cscope 15 /mnt/c/Projects/memscan/CE/ohad-cheat-engine/Cheat-Engine/embedded-ceserver -q 0000000938 0000120248
	@api.c

15 
	#_FILE_OFFSET_BITS
 64

	)

16 
	#_LARGEFILE64_SOURCE


	)

18 
	~<°dio.h
>

21 
	~<sys/sockë.h
>

22 
	~<sys/time.h
>

23 
	~<î∫o.h
>

24 
	~<sys/±ø˚.h
>

25 
	~<f˙é.h
>

26 
	~<°ddef.h
>

27 
	~<°rög.h
>

28 
	~<°dlib.h
>

29 
	~<°döt.h
>

30 
	~<sys/mm™.h
>

31 
	~<sig«l.h
>

32 
	~<sys/ty≥s.h
>

33 
	~<uni°d.h
>

34 
	~<sys/sysˇŒ.h
>

35 
	~<dúít.h
>

36 
	~<°dio.h
>

37 
	~<±hªad.h
>

39 #i‚de‡
__x86_64__


43 
	~<£m≠h‹e.h
>

44 
	~<limôs.h
>

47 #i‚de‡
__x86_64__


51 #ifde‡
__¨m__


56 
	#PTRACE_GETHBPREGS
 29

	)

57 
	#PTRACE_SETHBPREGS
 30

	)

60 
	#ARM_BREAKPOINT_EXECUTE
 0

	)

63 
	#ARM_BREAKPOINT_LOAD
 1

	)

64 
	#ARM_BREAKPOINT_STORE
 2

	)

67 
	#ARM_BREAKPOINT_PRIV
 1

	)

68 
	#ARM_BREAKPOINT_USER
 2

	)

71 
	#ARM_BREAKPOINT_LEN_1
 0x1

	)

72 
	#ARM_BREAKPOINT_LEN_2
 0x3

	)

73 
	#ARM_BREAKPOINT_LEN_4
 0xf

	)

74 
	#ARM_BREAKPOINT_LEN_8
 0xff

	)

76 
ölöe
 
	$ícode_˘æ_ªg
(
mism©ch
, 
Àn
, 
ty≥
, 
¥ivûege
, 
íabÀd
)

78  (
mism©ch
 << 22Ë| (
Àn
 << 5Ë| (
ty≥
 << 3Ë| (
¥ivûege
 << 1Ë| 
íabÀd
;

79 
	}
}

81 #i‚de‡
__ANDROID__


82 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

83 
	~<sys/u£r.h
>

89 
	~"≠i.h
"

90 
	~"p‹thñp.h
"

91 
	~"˚£rvî.h
"

92 
	~"thªads.h
"

93 
	~"symbﬁs.h
"

94 
	~"c⁄ãxt.h
"

97 
£m_t
 
	g£m_DebugThªadEvít
;

99 
±hªad_muãx_t
 
	gmem‹ymuãx
;

100 
±hªad_muãx_t
 
	gdebugsockëmuãx
;

104 
	gVîbo£Levñ
=0;

107 
	$WakeDebuggîThªad
()

110 
	`£m_po°
(&
£m_DebugThªadEvít
);

111 
	}
}

113 
	$mychûdh™dÀr
(
sig«l
, 
sigöfo
 *
öfo
, *
c⁄ãxt
)

117 
‹ig_î∫o
 = 
î∫o
;

118 
	`WakeDebuggîThªad
();

119 
î∫o
 = 
‹ig_î∫o
;

120 
	}
}

122 
	$GëDebugP‹t
(
HANDLE
 
hPro˚ss
)

125 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

127 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

128 i‡(
p
->
isDebugged
)

130  
p
->
debuggîSîvî
;

136 
	}
}

138 
	$FödPau£dThªad
(
PPro˚ssD©a
 
p
)

143 
i
;

144 
i
=0; i<
p
->
thªadli°pos
; i++)

145 i‡(
p
->
thªadli°
[
i
].
isPau£d
)

146  
p
->
thªadli°
[
i
].
tid
;

149 
	}
}

151 
	$gëBªakpoötC≠abûôõs
(
tid
, 
uöt8_t
 *
maxBªakpoötCou¡
, uöt8_à*
maxW©chpoötCou¡
, uöt8_à*
maxSh¨edBªakpoöts
)

155 *
maxBªakpoötCou¡
=0;

156 *
maxW©chpoötCou¡
=0;

157 *
maxSh¨edBªakpoöts
=0;

160 #ifde‡
__¨m__


161 
HBP_RESOURCE_INFO
 
hwbpˇp
;

163 
	`mem£t
(&
hwbpˇp
, 0, (
HBP_RESOURCE_INFO
));

164 i‡(
	`±ø˚
(
PTRACE_GETHBPREGS
, 
tid
, 0, &
hwbpˇp
)==0)

166 
	`¥ötf
("hwbpcap:\n");

167 
	`¥ötf
("debugárchôe˘uª: %d\n", 
hwbpˇp
.
debug_¨ch
);

168 
	`¥ötf
("numbî o‡ö°ru˘i⁄ bªakpoöts: %d\n", 
hwbpˇp
.
num_bΩs
);

169 
	`¥ötf
("numbî o‡d©®bªakpoöts: %d\n", 
hwbpˇp
.
num_wΩs
);

170 
	`¥ötf
("maxÜígth o‡®d©®bªakpoöt: %d\n", 
hwbpˇp
.
wp_Àn
);

172 *
maxBªakpoötCou¡
=
hwbpˇp
.
num_bΩs
;

173 *
maxW©chpoötCou¡
=
hwbpˇp
.
num_wΩs
;

174 *
maxSh¨edBªakpoöts
=0;

182 #ifde‡
__Ørch64__


183 
iovec
 
iov
;

184 
u£r_hwdebug_°©e
 
hwd
;

185 
	`mem£t
(&
hwd
, 0, (hwd));

187 
iov
.
iov_ba£
=&
hwd
;

188 
iov
.
iov_Àn
=(
hwd
);

190 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, 
NT_ARM_HW_WATCH
, &
iov
)==0)

192 
	`¥ötf
("NT_ARM_HW_WATCH: dbg_öfo=%x:\n", 
hwd
.
dbg_öfo
);

193 *
maxW©chpoötCou¡
=
hwd
.
dbg_öfo
 & 0xf;

198 
iov
.
iov_ba£
=&
hwd
;

199 
iov
.
iov_Àn
=(
hwd
);

200 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, 
NT_ARM_HW_BREAK
, &
iov
)==0)

202 
	`¥ötf
("NT_ARM_HW_BREAK: dbg_öfo=%x:\n", 
hwd
.
dbg_öfo
);

203 *
maxBªakpoötCou¡
=
hwd
.
dbg_öfo
 & 0xf;

211 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

212 *
maxBªakpoötCou¡
=0;

213 *
maxW©chpoötCou¡
=0;

214 *
maxSh¨edBªakpoöts
=4;

217 
	}
}

219 
	$SèπDebug
(
HANDLE
 
hPro˚ss
)

221 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

223 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

225 
siga˘i⁄
 
chûda˘i⁄h™dÀr
;

226 i‡(
p
->
isDebugged
)

228 
	`¥ötf
("TryingÅo start debuggingáÖrocessÅhat isálready debugged\n");

229  
FALSE
;

234 
	`InôülizePro˚ssThªadli°
(
p
);

237 
	`mem£t
(&
chûda˘i⁄h™dÀr
, 0, (childactionhandler));

238 
chûda˘i⁄h™dÀr
.
ß_h™dÀr
=(*)
mychûdh™dÀr
;

239 
chûda˘i⁄h™dÀr
.
ß_Êags
=
SA_SIGINFO
;

243 
	`siga˘i⁄
(
SIGCHLD
, &
chûda˘i⁄h™dÀr
, 
NULL
);

249 
_èskdú
[255];

250 
DIR
 *
èskdú
;

252 
	`•rötf
(
_èskdú
, "/¥oc/%d/èsk", 
p
->
pid
);

254 
èskdú
=
	`›ídú
(
_èskdú
);

256 i‡(
èskdú
)

258 
dúít
 *
d
;

260 
d
=
	`ªaddú
(
èskdú
);

261 
d
)

263 
tid
=
	`©oi
(
d
->
d_«me
);

265 i‡(
tid
)

267 
ThªadD©a
 
td
;

268 
	`mem£t
(&
td
, 0, (td));

269 
td
.
tid
=tid;

270 
td
.
isPau£d
=0;

271 
	`AddThªadToPro˚ss
(
p
, &
td
);

273 
	`±hªad_muãx_lock
(&
mem‹ymuãx
);

275 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
tid
,0,0)<0)

276 
	`¥ötf
("FaûedÅÿ©èchÅÿthªad %d\n", 
tid
);

279 
DebugEvít
 
¸óãThªadEvít
;

283 i‡(
p
->
isDebugged
==0)

285 
p
->
isDebugged
=1;

286 
p
->
debuggedThªadEvít
.
thªadid
=0;

287 
p
->
debuggîThªadID
=
	`±hªad_£lf
();

289 
	`sockë∑ú
(
PF_LOCAL
, 
SOCK_STREAM
, 0, &
p
->
debuggîSîvî
);

292 
DebugEvít
 
¸óãPro˚ssEvít
;

294 #i‡
	`deföed
(
__¨m__
Ë|| deföed (
__Ørch64__
)

296 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
¸óãPro˚ssEvít
, 
tid
, -1))

300 
	`gëBªakpoötC≠abûôõs
(
tid
, &
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
, &¸óãPro˚ssEvít.
maxW©chpoötCou¡
, &¸óãPro˚ssEvít.
maxSh¨edBªakpoöts
);

304 
	`±ø˚
(
PTRACE_CONT
, 
¸óãPro˚ssEvít
.
thªadid
, 0,0);

306 
PThªadD©a
 
_td
=
	`GëThªadD©a
(
p
, 
¸óãPro˚ssEvít
.
thªadid
);

308 i‡(
_td
)

309 
_td
->
isPau£d
=0;

311 
	`¥ötf
("Invalid first debugÅhread\n");

315 
	`¥ötf
("Failure waiting for createÉvent");

316 
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
=0;

317 
¸óãPro˚ssEvít
.
maxW©chpoötCou¡
=0;

318 
¸óãPro˚ssEvít
.
maxSh¨edBªakpoöts
=4;

322 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

324 
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
=0;

325 
¸óãPro˚ssEvít
.
maxW©chpoötCou¡
=0;

326 
¸óãPro˚ssEvít
.
maxSh¨edBªakpoöts
=4;

330 
¸óãPro˚ssEvít
.
debugevít
=-2;

331 
¸óãPro˚ssEvít
.
thªadid
=
p
->
pid
;

333 
	`AddDebugEvítToQueue
(
p
, &
¸óãPro˚ssEvít
);

337 
¸óãThªadEvít
.
debugevít
=-1;

338 
¸óãThªadEvít
.
thªadid
=
tid
;

339 
	`AddDebugEvítToQueue
(
p
, &
¸óãThªadEvít
);

345 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

349 
d
=
	`ªaddú
(
èskdú
);

352 
	`˛o£dú
(
èskdú
);

357 
	`¥ötf
("Faûuª o≥nög %s",
_èskdú
);

361  
p
->
isDebugged
;

367  
FALSE
;

370 
	}
}

372 
	$SëBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, *
addªss
, 
b±y≥
, 
bpsize
)

384 
ªsu…
=
FALSE
;

387 
	`¥ötf
("SëBªakpoöt(%d, %d, %d, %p, %d, %d)\n", 
hPro˚ss
, 
tid
, 
debugªg
, 
addªss
, 
b±y≥
, 
bpsize
);

388 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

390 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

394 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

397 
isdebugged
=
	`FödPau£dThªad
(
p
);

398 
wtid
;

399 
DebugEvít
 
de
;

403 
	`¥ötf
("SetBreakpoint from debuggerthread\n");

405 i‡(
tid
==-1)

407 
i
,
r
;

408 
	`¥ötf
("Calling SetBreakpoint forállÅhreads\n");

410 
i
=0; i<
p
->
thªadli°pos
; i++)

412 
r
=
	`SëBªakpoöt
(
hPro˚ss
, 
p
->
thªadli°
[
i
].
tid
, 
debugªg
, 
addªss
, 
b±y≥
, 
bpsize
);

413 i‡(
r
)

414 
ªsu…
=
TRUE
;

420 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

421 
wasPau£d
;

423 i‡(
td
==
NULL
)

424  
FALSE
;

426 
wasPau£d
=
td
->
isPau£d
;

428 
	`¥ötf
("CÆlög sëbªakpoöàf‹Åhªad :%d\n", 
tid
);

430 
	`¥ötf
("isdebugged=%d\n", 
isdebugged
);

432 i‡(
wasPau£d
==0)

435 
	`¥ötf
("TargetÅhread wasn't stopped yet\n");

437 
k
=0;

439 
	`¥ötf
("td=%p\n", 
td
);

440 
	`¥ötf
("td->isPau£d=%d\n", 
td
->
isPau£d
);

445 
wtid
=
tid
;

446 (
td
Ë&& (td->
isPau£d
==0Ë&& (
k
<10))

448 
	`¥ötf
("Not yetÖaused\n");

449 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

451 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

453 
wtid
=
de
.
thªadid
;

456 
k
++;

461 i‡(
wtid
!=
tid
)

463 
	`¥ötf
("<<<================UNEXPECTED TID (wtid=%dÅid=%d)================>>>\n", 
wtid
, 
tid
);

466 
	`¥ötf
("k=%d (numbî o‡åõs)\n", 
k
);

468 i‡(
k
==10)

470 
	`¥ötf
("Timeout when waiting forÅhread\n");

475 
	`¥ötf
("TheÅhread I wantedÅo break wasálready broken. Yeeeh\n");

476 
wtid
=
isdebugged
;

480 
	`¥ötf
("Sëtög bªakpoöàöÅhªad %d\n", 
wtid
);

481 #ifde‡
__Ørch64__


482 
u£r_±_ªgs
 
ªg£t
;

484 
iovec
 
iov
;

486 
	`mem£t
(&
ªg£t
, 0, (regset));

487 
	`mem£t
(&
iov
, 0, (iov));

488 
iov
.
iov_ba£
=&
ªg£t
;

489 
iov
.
iov_Àn
=(
ªg£t
);

490 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, (*)
NT_PRSTATUS
, &
iov
);

492 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

493 
	`¥ötf
("i=%d\n", 
i
);

497 i‡(
iov
.
iov_Àn
==72)

499 
	`¥ötf
("This isá 32 bitÅarget. MostÜikely debugging will fail\n");

502 
	`¥ötf
("r0=%Œx\n", 
ªg£t
.
ªgs
[0]);

503 
	`¥ötf
("r1=%Œx\n", 
ªg£t
.
ªgs
[1]);

504 
	`¥ötf
("r2=%Œx\n", 
ªg£t
.
ªgs
[2]);

505 
	`¥ötf
("r3=%Œx\n", 
ªg£t
.
ªgs
[3]);

509 
u£r_hwdebug_°©e
 
hwd
;

510 
	`mem£t
(&
hwd
, 0, (hwd));

516 
iov
.
iov_ba£
=&
hwd
;

517 
iov
.
iov_Àn
=(
hwd
);

518 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_WATCH
, &
iov
);

521 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

522 
	`¥ötf
("i=%d (%d)\n", 
i
,
î∫o
);

524 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

525 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

526 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

528 
iov
.
iov_ba£
=&
hwd
;

529 
iov
.
iov_Àn
=(
hwd
);

530 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_BREAK
, &
iov
);

533 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

534 
	`¥ötf
("i=%d (%d)\n", 
i
,
î∫o
);

536 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

537 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

538 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

542 
bty≥
=0;

543 
b∂i°
=
NT_ARM_HW_BREAK
;

545 i‡(
b±y≥
==0)

548 
b∂i°
=
NT_ARM_HW_BREAK
;

550 
bty≥
=
ARM_BREAKPOINT_EXECUTE
;

555 
b∂i°
=
NT_ARM_HW_WATCH
;

556 i‡(
b±y≥
==1)

557 
bty≥
=
ARM_BREAKPOINT_STORE
;

559 i‡(
b±y≥
==2)

560 
bty≥
=
ARM_BREAKPOINT_LOAD
;

562 i‡(
b±y≥
==3)

563 
bty≥
=
ARM_BREAKPOINT_STORE
 | 
ARM_BREAKPOINT_LOAD
;

567 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

569 
hwd
.
dbg_ªgs
[
debugªg
].
addr
=(
uöçå_t
)
addªss
;

570 
hwd
.
dbg_ªgs
[
debugªg
].
˘æ
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
bty≥
, 0, 1);

572 
i
=
	`±ø˚
(
PTRACE_SETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

574 
	`¥ötf
("£t=%d\n",
i
);

576 
	`mem£t
(&
hwd
, 0, (hwd));

578 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_WATCH
, &
iov
);

580 
	`¥ötf
("gë: iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

581 
	`¥ötf
("i=%d\n", 
i
);

583 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

584 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

585 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

589 #ifde‡
__¨m__


591 
vÆ
;

592 
bpödex
=1+(2*
debugªg
);

596 
	`¥ötf
("PTRACE_GETHBPREGS=%d\n",
PTRACE_GETHBPREGS
);

599 
vÆ
=0;

601 i‡(
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 0, &
vÆ
)==0)

603 
i
;

604 
hwb¥eg
;

605 
	`¥ötf
("BPREG0 (Info)=%x\n", 
vÆ
);

607 
	`¥ötf
("Setting bpáddress\n");

611 i‡(
b±y≥
==0)

614 *
rv
=
NULL
;

619 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
, &
rv
);

620 
	`¥ötf
("%d: Bef‹e: %d=%p\n", 
i
, 
bpödex
, 
rv
);

622 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
, &
addªss
);

623 
	`¥ötf
("i1=%d\n", 
i
, 
hwb¥eg
);

625 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
, &
rv
);

626 
	`¥ötf
("%d: A·î: %d=%p\n", 
i
, 
bpödex
, 
rv
);

630 
ªsu…
=
i
==0;

632 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

633 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

635 
	`¥ötf
("f1\n");

636 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_2
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

637 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

639 
	`¥ötf
("f2\n");

640 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_1
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

641 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

643 
	`¥ötf
("f3\n");

645 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_8
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

646 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

648 
	`¥ötf
("FailureÅo set breakpoint\n");

649 
ªsu…
=
FALSE
;

656 
	`¥ötf
("bpödex=%d bpödex+1=%d\n", 
bpödex
, bpindex+1);

658 
	`¥ötf
("hwb¥eg=%x\n", 
hwb¥eg
);

660 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
);

661 
	`¥ötf
("a·î=%x\n", 
hwb¥eg
);

668 
bty≥
;

671 
	`¥ötf
("watchpoint\n");

673 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -
bpödex
, &
addªss
);

674 
	`¥ötf
("i1=%d\n", 
i
, 
hwb¥eg
);

676 
bty≥
=0;

677 i‡(
b±y≥
==1)

678 
bty≥
=
ARM_BREAKPOINT_STORE
;

680 i‡(
b±y≥
==2)

681 
bty≥
=
ARM_BREAKPOINT_LOAD
;

683 i‡(
b±y≥
==3)

684 
bty≥
=
ARM_BREAKPOINT_STORE
 | 
ARM_BREAKPOINT_LOAD
;

686 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
bty≥
, 0, 1);

687 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -(
bpödex
+1), &
hwb¥eg
);

689 
	`¥ötf
("-bpödex=%d -(bpödex+1)=%d\n", -
bpödex
, -(bpindex+1));

690 
	`¥ötf
("i=%d (hwb¥eg=%x)\n", 
i
, 
hwb¥eg
);

691 
ªsu…
=
i
==0;

697 
	`¥ötf
("Faûuª gëtögÅhêdebug c≠abûôyÑegi°î f‹Åhªad %d (%d)\n", 
wtid
, 
î∫o
);

702 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

705 
r
,
r2
;

707 
uöçå_t
 
√wdr7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

710 
√wdr7
Úewdr7 | (1<<
debugªg
*2);

712 i‡(
b±y≥
==2)

713 
b±y≥
=3;

715 
√wdr7
Úewdr7 | (
b±y≥
 << (16+(
debugªg
*4)));

717 
	`¥ötf
("Sëtög DR7Åÿ%x\n", 
√wdr7
);

720 i‡(
bpsize
<=1)

721 
√wdr7
Úewdr7 | (0 << (18+(
debugªg
*4)));

723 i‡(
bpsize
<=2)

724 
√wdr7
Úewdr7 | (1 << (18+(
debugªg
*4)));

726 
√wdr7
Úewdr7 | (3 << (18+(
debugªg
*4)));

729 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[
debugªg
]), 
addªss
);

730 
r2
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 
√wdr7
);

732 
ªsu…
=(
r
==0Ë&& (
r2
==0);

733 i‡(!
ªsu…
)

735 
	`¥ötf
("Failure setting breakpoint\n");

738 
	`¥ötf
("ªsu…=%d (r=%dÑ2=%d)\n", 
ªsu…
, 
r
, 
r2
);

746 i‡(
wasPau£d
==0)

748 
r
;

750 
	`¥ötf
("Continue self brokenÅhread\n");

752 i‡(
de
.
debugevít
!=
SIGSTOP
)

756 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

757 
	`AddDebugEvítToQueue
(
p
, &
de
);

758 
td
->
isPau£d
=1;

763 
r
=
	`±ø˚
(
PTRACE_CONT
, 
wtid
, 0,0);

764 
	`¥ötf
("PTRACE_CONT=%d\n", 
r
);

766 
td
->
isPau£d
=0;

773 
	`¥ötf
("íd o‡SëBªakpoöàªached.Ñesu…=%d\n", 
ªsu…
);

780 
	`¥ötf
("SetBreakpoint from outsideÅhe debuggerthread. Waking debuggerthread\n");

782 #¥agm®
	`∑ck
(1)

785 
comm™d
;

786 
HANDLE
 
hPro˚ss
;

787 
tid
;

788 
debugªg
;

789 
uöt64_t
 
addªss
;

790 
b±y≥
;

791 
bpsize
;

792 } 
sb
;

793 #¥agm®
	`∑ck
()

795 
sb
.
comm™d
=
CMD_SETBREAKPOINT
;

796 
sb
.
hPro˚ss
=hProcess;

797 
sb
.
tid
=tid;

798 
sb
.
debugªg
=debugreg;

799 
sb
.
addªss
=(
uöçå_t
)address;

800 
sb
.
b±y≥
=bptype;

801 
sb
.
bpsize
=bpsize;

803 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

805 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

807 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
sb
, (sb), 0);

808 
	`WakeDebuggîThªad
();

809 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

811 
	`¥ötf
("Re˚ivedÑïly from debuggîÅhªad: %d\n", 
ªsu…
);

814 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

825  
ªsu…
;

827 
	}
}

829 
	$RemoveBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
,
wasW©chpoöt
)

834 
ªsu…
=
FALSE
;

836 
	`¥ötf
("RemoveBªakpoöt(%d, %d, %d, %d)\n", 
hPro˚ss
, 
tid
, 
debugªg
, 
wasW©chpoöt
);

837 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

839 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

841 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

843 
isdebugged
=
p
->
debuggedThªadEvít
.
thªadid
;

844 
wtid
;

845 
DebugEvít
 
de
;

847 
	`¥ötf
("Called fromÅhe debuggerthread itself\n");

849 i‡(
tid
==-1)

851 
i
;

852 
	`¥ötf
("Calling RemoveBreakpoint forállÅhreads\n");

853 
i
=0; i<
p
->
thªadli°pos
; i++)

855 i‡(
	`RemoveBªakpoöt
(
hPro˚ss
, 
p
->
thªadli°
[
i
].
tid
, 
debugªg
, 
wasW©chpoöt
)==
TRUE
)

856 
ªsu…
=
TRUE
;

861 
	`¥ötf
("specificÅhread\n");

863 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

864 
wasPau£d
=
td
->
isPau£d
;

866 i‡(
wasPau£d
==0)

869 
	`¥ötf
("Not currentlyÖaused\n");

870 
	`¥ötf
("GoingÅo killánd wait forÅhisÅhread\n");

872 
k
;

875 
k
=0;

876 (
td
Ë&& (td->
isPau£d
==0Ë&& (
k
<10))

878 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

879 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

881 
k
++;

884 
wtid
=
de
.
thªadid
;

887 
	`¥ötf
("----AFTER WAIT----\n");

889 
	`¥ötf
("a·î wtid=%d\n", 
wtid
);

890 
	`¥ötf
("^^^^AFTER WAIT^^^^\n");

894 
	`¥ötf
("TheÅhread I wantedÅo break wasálready broken. Yeeeh\n");

895 
wtid
=
isdebugged
;

899 
	`¥ötf
("Removög bªakpoöà‰omÅhªad %d\n", 
wtid
);

902 #ifde‡
__¨m__


903 
b¥eg
=0;

904 
i
,
i2
,
i3
;

905 *
a
=
NULL
;

907 
bpIndex
=1+(2*
debugªg
);

909 
	`¥ötf
("arm\n");

911 i‡(
wasW©chpoöt
)

913 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -
bpIndex
, &
b¥eg
);

914 
i2
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -(
bpIndex
+1), &
b¥eg
);

918 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpIndex
, &
b¥eg
);

919 
i2
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpIndex
+1, &
b¥eg
);

924 
	`¥ötf
("i1=%d\n", 
i
);

926 
	`¥ötf
("i2=%d\n", 
i2
);

930 
i3
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 1, &
a
);

932 
ªsu…
=(
i
==0Ë&& (
i2
==0Ë&& (
i3
==0);

935 #ifde‡
__Ørch64__


936 
i
;

937 
u£r_hwdebug_°©e
 
hwd
;

938 
iovec
 
iov
;

940 
	`mem£t
(&
hwd
, 0, (hwd));

941 
	`mem£t
(&
iov
, 0, (iov));

942 
iov
.
iov_ba£
=&
hwd
;

943 
iov
.
iov_Àn
=(
hwd
);

945 
b∂i°
;

947 i‡(
wasW©chpoöt
)

948 
b∂i°
=
NT_ARM_HW_WATCH
;

950 
b∂i°
=
NT_ARM_HW_BREAK
;

952 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

953 i‡(
i
!=0)

954 
	`¥ötf
("PTRACE_GETREGSET failed\n");

956 
hwd
.
dbg_ªgs
[
debugªg
].
addr
=0;

957 
hwd
.
dbg_ªgs
[
debugªg
].
˘æ
=0;

959 
i
=
	`±ø˚
(
PTRACE_SETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

960 i‡(
i
!=0)

961 
	`¥ötf
("PTRACE_SETREGSET failed\n");

963 
ªsu…
=
i
;

966 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

967 
r
;

968 
uöçå_t
 
dr7
=0;

969 
	`¥ötf
("x86\n");

971 
dr7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

973 
dr7
&=~(3 << (
debugªg
*2));

974 
dr7
&=~(15 << (16+
debugªg
*4));

977 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[
debugªg
]), 0);

980 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 
dr7
);

981 i‡(
r
==0)

982 
ªsu…
=
TRUE
;

984 
	`¥ötf
("FaûuªÑemovög bªakpoöà‰omÅhªad %d\n", 
wtid
);

989 i‡(
wasPau£d
==0)

991 
r
;

992 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

994 
	`¥ötf
("Continue self brokenÅhread\n");

996 i‡(
de
.
debugevít
!=
SIGSTOP
)

998 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

999 
	`AddDebugEvítToQueue
(
p
, &
de
);

1002 
td
->
isPau£d
=1;

1006 
r
=
	`±ø˚
(
PTRACE_CONT
, 
wtid
, 0,0);

1007 
	`¥ötf
("PTRACE_CONT=%d\n", 
r
);

1009 
td
->
isPau£d
=0;

1019 
	`¥ötf
("Called fromá secondaryÅhread\n");

1020 #¥agm®
	`∑ck
(1)

1023 
comm™d
;

1024 
HANDLE
 
hPro˚ss
;

1025 
tid
;

1026 
debugªg
;

1027 
wasW©chpoöt
;

1028 } 
rb
;

1029 #¥agm®
	`∑ck
()

1031 
rb
.
comm™d
=
CMD_REMOVEBREAKPOINT
;

1032 
rb
.
hPro˚ss
=hProcess;

1033 
rb
.
tid
=tid;

1034 
rb
.
debugªg
=debugreg;

1035 
rb
.
wasW©chpoöt
=wasWatchpoint;

1038 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1041 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

1043 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
rb
, (rb), 0);

1044 
	`WakeDebuggîThªad
();

1045 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1048 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1055 
	`¥ötf
("Invalid handle\n");

1057  
ªsu…
;

1058 
	}
}

1060 
	$GëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, 
PCONTEXT
 
C⁄ãxt
, 
ty≥
)

1067 
r
=
FALSE
;

1068 
	`¥ötf
("GëThªadC⁄ãxt(%d)\n", 
tid
);

1072 i‡(
tid
<=0)

1074 
	`¥ötf
("InvalidÅid\n");

1075  
FALSE
;

1078 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1080 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1084 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1086 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1088 
	`¥ötf
("Inside debuggerthread\n");

1090 i‡(
td
)

1092 
DebugEvít
 
de
;

1093 
wasPau£d
=
td
->
isPau£d
;

1094 
k
=0;

1097 (
td
->
isPau£d
==0Ë&& (
k
<10))

1099 
	`¥ötf
("ThisÅhread wasÇotÖaused. Pausing it\n");

1100 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

1101 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

1104 
k
++;

1109 
k
=
	`gëRegi°îs
(
tid
, &
C⁄ãxt
->
ªgs
);

1113 
	`¥ötf
("gëRegi°îs(Ëªtu∫ed %d\n", 
k
);

1115 i‡(
k
==0)

1116 
r
=
TRUE
;

1118 
r
=
FALSE
;

1121 i‡(!
wasPau£d
)

1124 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1126 
	`¥ötf
("TheÅhread wasÇotÖaused, soÑesuming itÇow\n");

1128 i‡(
de
.
debugevít
!=
SIGSTOP
)

1130 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

1131 
	`AddDebugEvítToQueue
(
p
, &
de
);

1132 
td
->
isPau£d
=1;

1136 
r
=‘ && (
	`±ø˚
(
PTRACE_CONT
, 
de
.
thªadid
, 0,0)==0));

1139 
td
->
isPau£d
=0;

1140 
	`¥ötf
("r=%d\n", 
r
);

1147 
	`¥ötf
("InvalidÅid\n");

1152 
	`¥ötf
("NotÅhe debuggerÅhread. PassÅo serverthread");

1153 #¥agm®
	`∑ck
(1)

1156 
comm™d
;

1157 
HANDLE
 
hPro˚ss
;

1158 
tid
;

1159 
ty≥
;

1160 } 
gtc
;

1161 #¥agm®
	`∑ck
()

1163 
gtc
.
comm™d
=
CMD_GETTHREADCONTEXT
;

1164 
gtc
.
hPro˚ss
=hProcess;

1165 
gtc
.
tid
=tid;

1166 
gtc
.
ty≥
=type;

1169 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1171 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

1173 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
gtc
, (gtc), 0);

1174 
	`WakeDebuggîThªad
();

1175 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
r
, ‘), 
MSG_WAITALL
);

1177 i‡(
r
)

1180 
uöt32_t
 
°ru˘size
;

1182 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
°ru˘size
, (°ru˘size), 
MSG_WAITALL
);

1183 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
C⁄ãxt
->
ªgs
, 
°ru˘size
, 
MSG_WAITALL
);

1187 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1193 
	`¥ötf
("invalid handle\n");

1196  
r
;

1197 
	}
}

1199 
	$SëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, *
C⁄ãxt
, 
ty≥
)

1206 
	}
}

1208 
	$Su•ídThªad
(
HANDLE
 
hPro˚ss
, 
tid
)

1217 
ªsu…
=-1;

1219 
	`¥ötf
("Su•ídThªad(%d)\n", 
tid
);

1220 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1222 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1223 
PThªadD©a
 
t
=
	`GëThªadD©a
(
p
, 
tid
);

1225 i‡(
t
==
NULL
)

1227 
	`¥ötf
("InvalidÅhread\n");

1231 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1234 
	`¥ötf
("InsideÅhe debuggerÅhread.\n");

1236 i‡(
t
->
isPau£d
)

1238 
	`¥ötf
("AlreadyÖaused\n");

1240 i‡(
t
->
su•ídCou¡
==0)

1244 i‡(
p
->
debuggedThªadEvít
.
thªadid
==
tid
)

1245 
t
->
su•ídedDevít
=
p
->
debuggedThªadEvít
;

1249 
t
->
su•ídedDevít
=*
	`FödThªadDebugEvítInQueue
(
p
,
tid
);

1250 
	`RemoveThªadDebugEvítFromQueue
(
p
, 
tid
);

1254 
t
->
su•ídCou¡
++;

1260 
	`¥ötf
("Not yetÖaused\n");

1262 
t
->
isPau£d
==0)

1264 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

1265 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
t
->
su•ídedDevít
, 
tid
, 100))

1270 
t
->
su•ídCou¡
++;

1274  
t
->
su•ídCou¡
;

1281 
	`¥ötf
("Not fromÅhe debuggerÅhread. Switching...\n");

1282 #¥agm®
	`∑ck
(1)

1285 
comm™d
;

1286 
HANDLE
 
hPro˚ss
;

1287 
tid
;

1288 } 
°
;

1289 #¥agm®
	`∑ck
()

1291 
°
.
comm™d
=
CMD_SUSPENDTHREAD
;

1292 
°
.
hPro˚ss
=hProcess;

1293 
°
.
tid
=tid;

1295 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1297 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
°
, (st), 0);

1298 
	`WakeDebuggîThªad
();

1299 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1301 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1309 
	`¥ötf
("invalid handle\n");

1310 
ªsu…
=-1;

1313  
ªsu…
;

1315 
	}
}

1317 
	$ResumeThªad
(
HANDLE
 
hPro˚ss
, 
tid
)

1322 
ªsu…
;

1324 
	`¥ötf
("ResumeThªad(%d)\n", 
tid
);

1325 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1327 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1328 
PThªadD©a
 
t
=
	`GëThªadD©a
(
p
, 
tid
);

1330 i‡(
t
==
NULL
)

1332 
	`¥ötf
("InvalidÅhread\n");

1336 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1339 
	`¥ötf
("InsideÅhe debuggerÅhread.\n");

1341 i‡((
t
->
isPau£d
Ë&& (t->
su•ídCou¡
>0))

1344 
t
->
su•ídCou¡
--;

1346 
ªsu…
=
t
->
su•ídCou¡
;

1349 i‡(
t
->
su•ídCou¡
==0)

1352 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1353 
	`¥ötf
("suspeneCount==0\n");

1355 i‡(
t
->
su•ídedDevít
.
debugevít
==
SIGSTOP
)

1357 
	`¥ötf
("SIGSTOP: ContinueÅhread without queing\n");

1358 
	`±ø˚
(
PTRACE_CONT
, 
t
->
su•ídedDevít
.
thªadid
, 0,0);

1359 
td
->
isPau£d
=0;

1363 
	`¥ötf
("Notá SIGSTOP AddÅoÅheÉvent queue\n");

1364 
td
->
isPau£d
=1;

1365 
	`AddDebugEvítToQueue
(
p
, &
t
->
su•ídedDevít
);

1366 
	`WakeDebuggîThªad
();

1372 
	`¥ötf
("FailureÑesumingÅhisÅhread\n");

1381 
	`¥ötf
("Not fromÅhe debuggerÅhread. Switching...\n");

1382 #¥agm®
	`∑ck
(1)

1385 
comm™d
;

1386 
HANDLE
 
hPro˚ss
;

1387 
tid
;

1388 } 
π
;

1389 #¥agm®
	`∑ck
()

1391 
π
.
comm™d
=
CMD_RESUMETHREAD
;

1392 
π
.
hPro˚ss
=hProcess;

1393 
π
.
tid
=tid;

1395 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1397 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
π
, (rt), 0);

1398 
	`WakeDebuggîThªad
();

1399 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1401 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1407 
	`¥ötf
("invalid handle\n");

1408 
ªsu…
=-1;

1411  
ªsu…
;

1412 
	}
}

1414 
	$RemoveThªadDebugEvítFromQueue
(
PPro˚ssD©a
 
p
, 
tid
)

1419 
ªsu…
=
FALSE
;

1420 
DebugEvítQueueEÀmít
 *
deqe
;

1422 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1426 
deqe
=
p
->
debugEvítQueue
.
tqh_fú°
;

1427 
deqe
)

1430 i‡(
deqe
->
de
.
thªadid
==
tid
)

1433 
	`TAILQ_REMOVE
(&
p
->
debugEvítQueue
, 
deqe
, 
íåõs
);

1435 
	`‰ì
(
deqe
);

1436 
ªsu…
=
TRUE
;

1441 
deqe
=deqe->
íåõs
.
tqe_√xt
;

1445 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1446  
ªsu…
;

1447 
	}
}

1449 
PDebugEvít
 
	$FödThªadDebugEvítInQueue
(
PPro˚ssD©a
 
p
, 
tid
)

1455 
PDebugEvít
 
ªsu…
=
NULL
;

1456 
DebugEvítQueueEÀmít
 *
deqe
;

1457 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1459 
deqe
=
p
->
debugEvítQueue
.
tqh_fú°
;

1460 
deqe
)

1462 i‡((
tid
==-1Ë|| (
deqe
->
de
.
thªadid
==tid))

1464 
ªsu…
=&
deqe
->
de
;

1468 
deqe
=deqe->
íåõs
.
tqe_√xt
;

1472 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1473  
ªsu…
;

1474 
	}
}

1476 
	$AddDebugEvítToQueue
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
)

1478 
DebugEvítQueueEÀmít
 *
deqe
;

1480 i‡(
devít
->
debugevít
==
SIGSTOP
)

1482 
	`¥ötf
("<<<<<--------------------SIGSTOP ADDED TO THE QUEUE!\n");

1485 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1487 
deqe
=
	`mÆloc
((
DebugEvítQueueEÀmít
));

1488 
deqe
->
de
=*
devít
;

1490 
	`TAILQ_INSERT_TAIL
(&
p
->
debugEvítQueue
, 
deqe
, 
íåõs
);

1492 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1493 
	}
}

1495 
	$GëSt›Sig«lFromThªad
(
tid
)

1497 
sigöfo_t
 
si
;

1498 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
tid
, 
NULL
, &
si
)==0)

1499  
si
.
si_signo
;

1502 
	}
}

1504 
	$WaôF‹DebugEvítN©ive
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
, 
tid
, 
timeout
)

1510 
cuºítTID
;

1511 
°©us
;

1512 
r
;

1522 
cuºítTID
=1;

1523 
cuºítTID
>0)

1525 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
 | 
WNOHANG
);

1529 i‡(
cuºítTID
>0)

1531 
devít
->
thªadid
=
cuºítTID
;

1532 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1534 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1535 i‡(
td
)

1536 
td
->
isPau£d
=1;

1539 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1540  
TRUE
;

1549 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1566 i‡(
timeout
>=0)

1570 i‡(
timeout
>0)

1572 
time•ec
 
ab°ime
;

1573 
timevÆ
 
cuºít
,
w™ãd
, 
diff
;

1574 
timedwaô
;

1578 
	`mem£t
(&
ab°ime
, 0, (abstime));

1579 
	`gëtimeofday
(&
cuºít
,
NULL
);

1581 
diff
.
tv_£c
=(
timeout
 / 1000);

1582 
diff
.
tv_u£c
=(
timeout
 % 1000)*1000;

1584 
	`timîadd
(&
cuºít
, &
diff
, &
w™ãd
);

1586 
ab°ime
.
tv_£c
=
w™ãd
.tv_sec;

1587 
ab°ime
.
tv_n£c
=
w™ãd
.
tv_u£c
*1000;

1589 
cuºítTID
=-1;

1590 
cuºítTID
<=0)

1592 
timedwaô
=
	`£m_timedwaô
(&
£m_DebugThªadEvít
, &
ab°ime
);

1596 i‡(
timedwaô
==0)

1603 
	`CheckF‹AndDi•©chComm™d
(
p
->
debuggîSîvî
);

1604 i‡(
Vîbo£Levñ
>10)

1605 
	`¥ötf
("CheckForAndDispatchCommandÑeturned\n");

1608 
PDebugEvít
 
e
=
	`FödThªadDebugEvítInQueue
(
p
, 
tid
);

1609 i‡(
e
)

1611 
	`¥ötf
("Thîêwa†®queuedÉvíàa·î CheckF‹AndDi•©chComm™d. TID=%ld (w™ãd %d)\n", 
e
->
thªadid
, 
tid
);

1612 
cuºítTID
=
e
->
thªadid
;

1614 
r
=
	`RemoveThªadDebugEvítFromQueue
(
p
, 
cuºítTID
);

1615 
	`¥ötf
("RemoveThªadDebugEvítFromQueuêªtu∫ed %d\n", 
r
);

1618 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
 | 
WNOHANG
);

1620 i‡(
Vîbo£Levñ
>10)

1621 
	`¥ötf
("cuºítTID = %d\n", 
cuºítTID
);

1623 i‡(
cuºítTID
>0)

1625 
devít
->
thªadid
=
cuºítTID
;

1626 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1628 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1629 i‡(
td
)

1630 
td
->
isPau£d
=1;

1632 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1633  
TRUE
;

1636 
	`¥ötf
("Stû»hîêsÿcuºítTID(%dËi†nŸÅhêßmêa†tid (%d)\n", 
cuºítTID
, 
tid
);

1637 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1639 
cuºítTID
=-1;

1644 i‡(
î∫o
==
ETIMEDOUT
)

1647  
FALSE
;

1666 
cuºítTID
=-1;

1667 
cuºítTID
<0)

1669 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
);

1670 i‡(
cuºítTID
>0)

1672 
devít
->
thªadid
=
cuºítTID
;

1673 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1675 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1676 i‡(
td
)

1677 
td
->
isPau£d
=1;

1679 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1680  
TRUE
;

1683 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1686 i‡((
cuºítTID
==-1Ë&& (
î∫o
!=
EINTR
))

1688 
	`¥ötf
("WaôF‹DebugEvítN©ive: Inföôêwaô: CouldÇŸ waô f‹Åid %d (î∫o=%d)\n", 
tid
, 
î∫o
);

1689  
FALSE
;

1692 
cuºítTID
=-1;

1700  
FALSE
;

1702 
	}
}

1705 
	$WaôF‹DebugEvít
(
HANDLE
 
hPro˚ss
, 
PDebugEvít
 
devít
, 
timeout
)

1711 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1713 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1715 i‡(
p
->
debuggedThªadEvít
.
thªadid
==0)

1717 
r
=0;

1719 
°©us
;

1720 
tid
;

1721 
DebugEvítQueueEÀmít
 *
de
=
NULL
;

1724 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1725 
de
=
	`TAILQ_FIRST
(&
p
->
debugEvítQueue
);

1727 i‡(
de
)

1728 
	`TAILQ_REMOVE
(&
p
->
debugEvítQueue
, 
de
, 
íåõs
);

1731 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1733 i‡(
de
)

1735 
	`¥ötf
("Rëu∫ög queuedÉvíà(sig=%d,Åhªad=%ld)\n", 
de
->de.
debugevít
, de->de.
thªadid
);

1736 i‡(
de
->de.
debugevít
==
SIGSTOP
)

1738 
	`¥ötf
("<---Something queuedá SIGSTOP--->\n");

1741 *
devít
=
de
->de;

1742 
p
->
debuggedThªadEvít
=*
devít
;

1743 
	`‰ì
(
de
);

1745 
r
=1;

1748 i‡(!
r
)

1749 
r
=
	`WaôF‹DebugEvítN©ive
(
p
, 
devít
, -1, 
timeout
);

1752 i‡(
r
)

1754 
p
->
debuggedThªadEvít
=*
devít
;

1757 i‡(
p
->
debuggedThªadEvít
.
debugevít
==
SIGTRAP
)

1759 
sigöfo_t
 
si
;

1760 
	`¥ötf
("SIGTRAP\n");

1765 #i‡(
	`deföed
(
__¨m__
Ë|| deföed(
__Ørch64__
))

1767 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
p
->
debuggedThªadEvít
.
thªadid
, 
NULL
, &
si
)==0)

1770 
p
->
debuggedThªadEvít
.
addªss
=(
uöçå_t
)
si
.
si_addr
;

1771 
	`¥ötf
("si.si_addr=%p\n", 
si
.
si_addr
);

1774 
	`¥ötf
("Failure getting siginfo forÅhisÅrap\n");

1777 #i‡
deföed
 
__i386__
 || deföed 
__x86_64__


1779 
uöçå_t
 
DR0
,
DR1
,
DR2
,
DR3
,
DR7
, 
IP
;

1780 
ªgDR6
 
DR6
;

1781 #i‡
deföed
 
__i386__


1782 
IP
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
ªgs
.
eù
), 0);

1784 
IP
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
ªgs
.
rù
), 0);

1786 
DR0
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[0]), 0);

1787 
DR1
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[1]), 0);

1788 
DR2
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[2]), 0);

1789 
DR3
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[3]), 0);

1791 
DR6
.
vÆue
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[6]), 0);

1792 
DR7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

1794 
	`¥ötf
("DR0=%lx\n",
DR0
);

1795 
	`¥ötf
("DR1=%lx\n",
DR1
);

1796 
	`¥ötf
("DR2=%lx\n",
DR2
);

1797 
	`¥ötf
("DR3=%lx\n",
DR3
);

1798 
	`¥ötf
("DR6=%lx\n",
DR6
.
vÆue
);

1799 
	`¥ötf
("DR7=%lx\n",
DR7
);

1800 
	`¥ötf
("IP=%lx\n",
IP
);

1802 
p
->
debuggedThªadEvít
.
addªss
=0;

1803 i‡(
DR6
.
B0
)

1804 
p
->
debuggedThªadEvít
.
addªss
=
DR0
;

1806 i‡(
DR6
.
B1
)

1807 
p
->
debuggedThªadEvít
.
addªss
=
DR1
;

1809 i‡(
DR6
.
B2
)

1810 
p
->
debuggedThªadEvít
.
addªss
=
DR2
;

1812 i‡(
DR6
.
B3
)

1813 
p
->
debuggedThªadEvít
.
addªss
=
DR3
;

1815 i‡(
DR6
.
BS
)

1816 
p
->
debuggedThªadEvít
.
addªss
=1;

1819 
	`±ø˚
(
PTRACE_POKEUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[6]), 0);

1822 
	`¥ötf
("p->debuggedThªadEvít.addªss=%lx\n", 
p
->
debuggedThªadEvít
.
addªss
);

1824 
devít
->
addªss
=
p
->
debuggedThªadEvít
.address;

1828  
r
;

1832 *
devít
=
p
->
debuggedThªadEvít
;

1833 
	`¥ötf
("CanÇot wait forá debugÉvent whenáÅhread is stillÖaused\n");

1834 
	`¥ötf
("tid=%d debugevít=%d\n", ()
devít
->
thªadid
, devít->
debugevít
);

1840 
	}
}

1842 
	$C⁄töueFromDebugEvít
(
HANDLE
 
hPro˚ss
, 
tid
, 
ign‹esig«l
)

1845 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1847 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1848 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1849 
sigöfo_t
 
si
;

1853 i‡(
p
->
debuggedThªadEvít
.
debugevít
<0)

1855 
	`¥ötf
("VirtualÉvent. Ignore\n");

1856 
p
->
debuggedThªadEvít
.
thªadid
=0;

1857 
p
->
debuggedThªadEvít
.
debugevít
=0;

1862 i‡(
td
==
NULL
)

1864 
	`¥ötf
("InvalidÅhread\n");

1865 
p
->
debuggedThªadEvít
.
thªadid
=0;

1872 i‡(
td
->
su•ídCou¡
>0)

1874 
	`¥ötf
("TrõdÅÿc⁄töuê®su•ídedÅhªad (su•ídcou¡=%d)\n", 
td
->
su•ídCou¡
);

1886 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
tid
, 
NULL
, &
si
)==0)

1888 
sig«l
=
ign‹esig«l
?0:
si
.
si_signo
;

1895 i‡((
sig«l
==19) || (signal==21))

1897 
sig«l
=0;

1902 
ªsu…
;

1903 i‡(
ign‹esig«l
==2)

1905 
	`¥ötf
("Single step\n");

1907 
ªsu…
=
	`±ø˚
(
PTRACE_SINGLESTEP
, 
tid
, 0,0);

1908 i‡(
ªsu…
!=0)

1910 
	`¥ötf
("PTRACE_SINGLESTEP faûed (%d). Shô h≠≥ns\n", 
î∫o
);

1911 
ªsu…
=
	`±ø˚
(
PTRACE_CONT
, 
tid
, 0,
sig«l
);

1917 
ªsu…
=
	`±ø˚
(
PTRACE_CONT
, 
tid
, 0,
sig«l
);

1924 i‡(
td
)

1925 
td
->
isPau£d
=0;

1928 i‡(
ªsu…
<0)

1930 
	`¥ötf
("FaûuªÅÿc⁄töuêthªad %d wôh sig«»%d\n", 
tid
, 
sig«l
);

1931 
	`RemoveThªadFromPro˚ss
(
p
, 
tid
);

1932 
p
->
debuggedThªadEvít
.
thªadid
=0;

1937 
p
->
debuggedThªadEvít
.
thªadid
=0;

1942 
	`¥ötf
("Failure getting sig info\n");

1946 
	`¥ötf
("Invalid handle\n");

1949 
	}
}

1951 
	$St›Debug
(
HANDLE
 
hPro˚ss
)

1953 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1955 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1956 
i
;

1957 
i
=0; i<
p
->
thªadli°pos
;i++)

1958 i‡(
	`±ø˚
(
PTRACE_DETACH
, 
p
->
thªadli°
[
i
].
tid
,0,0)<0)

1959 
	`¥ötf
("FaûedÅÿdëach from %ld\n", 
p
->
thªadli°
[
i
].
tid
);

1964 
	}
}

1966 
	$WrôePro˚ssMem‹yDebug
(
HANDLE
 
hPro˚ss
, 
PPro˚ssD©a
 
p
, *
ÕAddªss
, *
buf„r
, 
size
)

1968 
byãswrôãn
=0;

1969 
i
;

1971 
	`¥ötf
("WriteProcessMemoryDebug:");

1972 
i
=0; i<
size
; i++)

1974 
	`¥ötf
("%.2x ", ((*)
buf„r
)[
i
]);

1977 
	`¥ötf
("\n");

1982 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1984 
isdebugged
=
	`FödPau£dThªad
(
p
);

1985 
DebugEvít
 
evít
;

1987 
evít
.
thªadid
=
isdebugged
;

1989 i‡(!
isdebugged
)

1992 
	`kûl
(
p
->
pid
, 
SIGSTOP
);

1995 
	`WaôF‹DebugEvítN©ive
(
p
, &
evít
, -1, -1);

2004 
off£t
=0;

2005 
max
=
size
-();

2007 *
addªss
=(*)
buf„r
;

2010 
off£t
<
max
)

2012 
	`¥ötf
("off£t=%d max=%d\n", 
off£t
, 
max
);

2013 
	`±ø˚
(
PTRACE_POKEDATA
, 
p
->
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)*
addªss
);

2015 
addªss
++;

2016 
off£t
+=();

2017 
byãswrôãn
+=();

2020 i‡(
off£t
<
size
)

2022 
	`¥ötf
("Stû»somêbyã†À·: %d\n", 
size
-
off£t
);

2024 
ﬁdvÆue
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
p
->
pid
, (*)(
uöçå_t
)
ÕAddªss
+
off£t
, (*)0);

2026 *
ﬁdbuf
=(*)&
ﬁdvÆue
;

2027 *
√wmem
=(*)
addªss
;

2028 
i
;

2030 
	`¥ötf
("ﬁdvÆue=%lx\n", 
ﬁdvÆue
);

2032 
i
=0; i< (
size
-
off£t
); i++)

2033 
ﬁdbuf
[
i
]=
√wmem
[i];

2035 
	`¥ötf
("√wvÆue=%lx\n", 
ﬁdvÆue
);

2038 
i
=
	`±ø˚
(
PTRACE_POKEDATA
, 
p
->
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)
ﬁdvÆue
);

2040 
	`¥ötf
("±ø˚Öokêªtu∫ed %d\n", 
i
);

2041 i‡(
i
>=0)

2042 
byãswrôãn
+=
size
-
off£t
;

2050 i‡(!
isdebugged
)

2052 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
evít
.
thªadid
);

2055 i‡(
evít
.
debugevít
==
SIGSTOP
)

2060 
	`±ø˚
(
PTRACE_CONT
, 
evít
.
thªadid
, 0,0);

2062 i‡(
td
)

2063 
td
->
isPau£d
=0;

2069 
	`¥ötf
("WrôePro˚ssMem‹yDebug: Addög u√x≥˘ed sig«»tÿevítqueuê”vít.debugevít=%dÉvít.thªadid)\n", 
evít
.
debugevít
,Évít.
thªadid
);

2071 
	`AddDebugEvítToQueue
(
p
, &
evít
);

2072 i‡(
td
)

2073 
td
->
isPau£d
=1;

2080 
	`¥ötf
("WriteProcessMemoryDebug from outsideÅhe debuggerthread. Waking debuggerthread\n");

2083 #¥agm®
	`∑ck
(1)

2086 
uöt8_t
 
comm™d
;

2087 
uöt32_t
 
pH™dÀ
;

2088 
uöt64_t
 
addªss
;

2089 
uöt32_t
 
size
;

2090 
d©a
[
size
];

2091 } 
wpm
;

2092 #¥agm®
	`∑ck
()

2095 
	`¥ötf
("sizeo‡wpm=%d\n", (
wpm
));

2096 
wpm
.
comm™d
=
CMD_WRITEPROCESSMEMORY
;

2097 
wpm
.
pH™dÀ
=
hPro˚ss
;

2098 
wpm
.
addªss
=(
uöçå_t
)
ÕAddªss
;

2099 
wpm
.
size
=size;

2100 
	`mem˝y
(
wpm
.
d©a
, 
buf„r
, 
size
);

2106 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

2108 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
wpm
, (wpm), 0);

2109 
	`WakeDebuggîThªad
();

2111 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
byãswrôãn
, (byãswrôãn), 
MSG_WAITALL
);

2113 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

2115 
	`¥ötf
("a·îÑecvÆ»byãswrôãn=%d\n", 
byãswrôãn
);

2120  
byãswrôãn
;

2121 
	}
}

2123 
	$WrôePro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
)

2125 
wrôãn
=0;

2127 
	`¥ötf
("WrôePro˚ssMem‹y(%d, %p, %p, %d\n", 
hPro˚ss
, 
ÕAddªss
, 
buf„r
, 
size
);

2129 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2131 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2133 i‡(
p
->
isDebugged
)

2137  
	`WrôePro˚ssMem‹yDebug
(
hPro˚ss
, 
p
, 
ÕAddªss
, 
buf„r
, 
size
);

2140 i‡(
	`±hªad_muãx_lock
(&
mem‹ymuãx
) == 0)

2142 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
p
->
pid
,0,0)==0)

2144 
°©us
;

2145 
pid_t
 
pid
=
	`waô
(&
°©us
);

2146 
off£t
=0;

2147 
max
=
size
-();

2149 *
addªss
=(*)
buf„r
;

2152 
off£t
<
max
)

2154 
	`¥ötf
("off£t=%d max=%d\n", 
off£t
, 
max
);

2155 
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)*
addªss
);

2157 
addªss
++;

2158 
off£t
+=();

2160 
wrôãn
+=();

2163 i‡(
off£t
<
size
)

2165 
	`¥ötf
("Stû»somêbyã†À·: %d\n", 
size
-
off£t
);

2167 
ﬁdvÆue
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
pid
, (*)(
uöçå_t
)
ÕAddªss
+
off£t
, (*)0);

2169 *
ﬁdbuf
=(*)&
ﬁdvÆue
;

2170 *
√wmem
=(*)
addªss
;

2171 
i
;

2173 
	`¥ötf
("ﬁdvÆue=%lx\n", 
ﬁdvÆue
);

2175 
i
=0; i< (
size
-
off£t
); i++)

2176 
ﬁdbuf
[
i
]=
√wmem
[i];

2178 
	`¥ötf
("√wvÆue=%lx\n", 
ﬁdvÆue
);

2181 
i
=
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)
ﬁdvÆue
);

2183 
	`¥ötf
("±ø˚Öokêªtu∫ed %d\n", 
i
);

2184 i‡(
i
>=0)

2185 
wrôãn
+=
size
-
off£t
;

2192 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

2197 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

2204  
wrôãn
;

2205 
	}
}

2207 
	$RódPro˚ssMem‹yDebug
(
HANDLE
 
hPro˚ss
, 
PPro˚ssD©a
 
p
, *
ÕAddªss
, *
buf„r
, 
size
)

2219 
byã§ód
=0;

2226 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

2228 
isdebugged
=
	`FödPau£dThªad
(
p
);

2229 
DebugEvít
 
evít
;

2231 
evít
.
thªadid
=
isdebugged
;

2236 i‡(!
isdebugged
)

2239 
	`kûl
(
p
->
pid
, 
SIGSTOP
);

2242 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
evít
, -1, -1)==
FALSE
)

2244 
	`¥ötf
("WaitForDebugEventNativeÑeturned FALSE forá wait withoutÅimeout\n");

2250 
öÊo›ã°
=0;

2252 
byã§ód
=-1;

2253 
byã§ód
==-1)

2255 
öÊo›ã°
++;

2257 i‡(
öÊo›ã°
>10)

2258 
	`¥ötf
("FUUU");

2264 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2265 
byã§ód
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2268 i‡((
byã§ód
<0Ë&& (
î∫o
!=
EINTR
))

2280 
byã§ód
=0;

2282 i‡(
isdebugged
)

2286 
f
;

2287 
mem∑th
[255];

2289 
	`•rötf
(
mem∑th
,"/¥oc/%d/èsk/%d/mem", 
p
->
pid
, ()
evít
.
thªadid
);

2291 
f
=
	`›í
(
mem∑th
, 
O_RDONLY
);

2292 
	`¥ötf
("f=%d\n", 
f
);

2293 i‡(
f
>=0)

2296 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2297 
byã§ód
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2299 i‡((
byã§ód
<0Ë&& (
î∫o
!=
EINTR
))

2302 
byã§ód
=0;

2304 
	`˛o£
(
f
);

2313 i‡(!
isdebugged
)

2315 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
evít
.
thªadid
);

2318 i‡(
evít
.
debugevít
==
SIGSTOP
)

2323 
	`±ø˚
(
PTRACE_CONT
, 
evít
.
thªadid
, 0,0);

2325 i‡(
td
)

2326 
td
->
isPau£d
=0;

2332 
	`¥ötf
("RódPro˚ssMem‹yDebug: Addög u√x≥˘ed sig«»tÿevítqueuê”vít.debugevít=%dÉvít.thªadid=%d)\n", 
evít
.
debugevít
,Évít.
thªadid
);

2334 i‡(
td
)

2335 
td
->
isPau£d
=1;

2337 
	`AddDebugEvítToQueue
(
p
, &
evít
);

2339 
	`¥ötf
("Afterádd\n");

2341 
Vîbo£Levñ
=1000000000;

2351 
tid
=
p
->
pid
;

2355 #¥agm®
	`∑ck
(1)

2358 
uöt8_t
 
comm™d
;

2359 
uöt32_t
 
pH™dÀ
;

2360 
uöt64_t
 
addªss
;

2361 
uöt32_t
 
size
;

2362 
uöt8_t
 
com¥es£d
;

2363 } 
Ωm
;

2364 #¥agm®
	`∑ck
()

2367 
Ωm
.
comm™d
=
CMD_READPROCESSMEMORY
;

2368 
Ωm
.
pH™dÀ
=
hPro˚ss
;

2369 
Ωm
.
addªss
=(
uöçå_t
)
ÕAddªss
;

2370 
Ωm
.
size
=size;

2371 
Ωm
.
com¥es£d
=0;

2375 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

2379 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
Ωm
, (rpm), 0);

2384 
	`WakeDebuggîThªad
();

2386 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
byã§ód
, (byã§ód), 
MSG_WAITALL
);

2388 i‡(
Vîbo£Levñ
>10)

2389 
	`¥ötf
("A·î waôög f‹ debuggîÅhªad: byã§ód=%d\n", 
byã§ód
);

2391 i‡(
byã§ód
>0)

2392 
	`ªcvÆl
(
p
->
debuggîClõ¡
, 
buf„r
, 
byã§ód
, 
MSG_WAITALL
);

2395 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

2402 i‡(
Vîbo£Levñ
>10)

2403 
	`¥ötf
("RódPro˚ssMem‹yDebugÑëu∫†%d\n", 
byã§ód
);

2405  
byã§ód
;

2406 
	}
}

2408 
	$RódPro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
)

2420 
bªad
=0;

2423 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2425 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2429 i‡(
p
->
isDebugged
)

2433  
	`RódPro˚ssMem‹yDebug
(
hPro˚ss
, 
p
, 
ÕAddªss
, 
buf„r
, 
size
);

2438 i‡(
	`±hªad_muãx_lock
(&
mem‹ymuãx
) == 0)

2442 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
p
->
pid
,0,0)==0)

2444 
°©us
;

2446 
pid_t
 
pid
=
	`waô
(&
°©us
);

2448 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2450 
bªad
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2452 i‡(
bªad
==-1)

2454 
bªad
=0;

2462 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

2465 
	`¥ötf
("±ø˚áâach faûed (pid=%d). Thi†sy°em mighànŸ bê¥›îlyÑoŸed\n", 
p
->
pid
);

2468 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

2471 
	`¥ötf
("For someÑeason I failedÅo obtaináÜock\n");

2478 
	`fÊush
(
°dout
);

2480  
bªad
;

2481 
	}
}

2483 #ifde‡
__Ørch64__


2484 *
	$ödex
(c⁄° *
s
, 
c
)

2486 
i
=0;

2487 
i
=0; 
s
[i]!=0; i++)

2489 i‡(
s
[
i
]==
c
)

2490  &
s
[
i
];

2493  
NULL
;

2494 
	}
}

2497 
DWORD
 
	$PrŸe˘i⁄SåögToTy≥
(*
¥Ÿe˘i⁄°rög
)

2499 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 's'))

2500  
MEM_MAPPED
;

2502  
MEM_PRIVATE
;

2503 
	}
}

2505 
uöt32_t
 
	$PrŸe˘i⁄SåögToPrŸe˘i⁄
(*
¥Ÿe˘i⁄°rög
)

2507 
w
,
x
;

2509 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 'x'))

2510 
x
=1;

2512 
x
=0;

2514 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 'w'))

2515 
w
=1;

2517 
w
=0;

2519 i‡(
x
)

2522 i‡(
w
)

2523  
PAGE_EXECUTE_READWRITE
;

2525  
PAGE_EXECUTE_READ
;

2530 i‡(
w
)

2531  
PAGE_READWRITE
;

2533  
PAGE_READONLY
;

2535 
	}
}

2537 
	$AddToRegi⁄Li°
(
uöt64_t
 
ba£
, uöt64_à
size
, 
uöt32_t
 
ty≥
, uöt32_à
¥Ÿe˘i⁄
, 
Regi⁄Info
 **
li°
, *
pos
, *
max
)

2542 
	`¥ötf
("++>%Œx->%Œx : (%ŒxË - %d\n", ()
ba£
, ()ba£+
size
, ()size, 
ty≥
);

2544 (*
li°
)[*
pos
].
ba£addªss
=
ba£
;

2545 (*
li°
)[*
pos
].
size
=size;

2546 (*
li°
)[*
pos
].
ty≥
=type;

2547 (*
li°
)[*
pos
].
¥Ÿe˘i⁄
=protection;

2549 (*
pos
)++;

2551 i‡(*
pos
>=*
max
)

2553 
	`¥ötf
("resizeÜist\n");

2554 *
max
=(*max)*2;

2555 *
li°
=(
Regi⁄Info
 *)
	`ªÆloc
(*li°, (Regi⁄Info)*(*
max
));

2559 
	}
}

2561 
	$VútuÆQuîyExFuŒ
(
HANDLE
 
hPro˚ss
, 
uöt32_t
 
Êags
, 
Regi⁄Info
 **
röfo
, uöt32_à*
cou¡
)

2566 
∑ged⁄ly
=
Êags
 & 
VQE_PAGEDONLY
;

2567 
dúty⁄ly
=
Êags
 & 
VQE_DIRTYONLY
;

2568 
nosh¨ed
=
Êags
 & 
VQE_NOSHARED
;

2570 
	`¥ötf
("VirtualQueryExFull:\n");

2572 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2574 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2576 
sm≠s_«me
[64];

2577 
∑gem≠_«me
[64];

2579 
	`•rötf
(
sm≠s_«me
,"/¥oc/%d/sm≠s", 
p
->
pid
);

2580 
	`•rötf
(
∑gem≠_«me
,"/¥oc/%d/∑gem≠", 
p
->
pid
);

2582 
FILE
 *
m≠s
=
	`f›í
(
sm≠s_«me
, "r");

2583 
∑gem≠
=-1;

2585 
uöt64_t
 *
∑gem≠_íåõs
=
NULL
;

2587 i‡(
∑ged⁄ly
)

2589 
	`¥ötf
("pagedonly\n");

2590 
∑gem≠
=
	`›í
(
∑gem≠_«me
, 
O_RDONLY
);

2595 
∑gem≠_íåõs
=(
uöt64_t
 *)
	`mÆloc
(512*8);

2597 
	`¥ötf
("ÆloˇãdÖagem≠_íåõ†© %p\n", 
∑gem≠_íåõs
);

2601 i‡(
m≠s
 && (!
∑ged⁄ly
 || (
∑gem≠
>=0)))

2605 
°¨t
=0, 
°›
=0;

2606 
¥Ÿe˘i⁄°rög
[25];

2607 
x
[200];

2608 
pos
=0, 
max
=
∑ged⁄ly
?64:128;

2609 
Regi⁄Info
 *
r
;

2611 
	`¥ötf
("goingÅoállocateÑ\n");

2612 
r
=(
Regi⁄Info
 *)
	`mÆloc
((Regi⁄Info)*
max
);

2614 
	`¥ötf
("AŒoˇãdÑáà%p\n", 
r
);

2616 
isdúty
=0;

2617 
íd
=0;

2620 !
íd
)

2622 
_°¨t
, 
_°›
;

2623 
ãmp
[25];

2625 
íd
=
	`fgës
(
x
, 200, 
m≠s
)==0;

2632 i‡(
x
[
	`°æí
(x)-1]!='\n')

2636 
disˇrd
[100];

2640 
disˇrd
[99]=0;

2641 
	`fgës
(
disˇrd
, 99, 
m≠s
);

2642 } 
disˇrd
[99]!=0);

2645 
ãmp
[0]=0;

2646 
	`ssˇnf
(
x
, "%Œx-%Œx %24s", &
_°¨t
, &
_°›
, 
ãmp
);

2648 i‡((
íd
Ë|| (
ãmp
[0]!=0))

2651 i‡(
°¨t
)

2653 
∑s£d
=1;

2654 
DWORD
 
ty≥
=
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
);

2655 
DWORD
 
¥Ÿe˘i⁄
=
	`PrŸe˘i⁄SåögToPrŸe˘i⁄
(
¥Ÿe˘i⁄°rög
);

2661 i‡(
nosh¨ed
 && (
ty≥
==
MEM_MAPPED
))

2662 
∑s£d
=0;

2664 i‡(
dúty⁄ly
 && !
isdúty
)

2665 
∑s£d
=0;

2669 i‡(
∑s£d
)

2672 i‡(
∑ged⁄ly
)

2676 
uöt64_t
 
cuºít
=
°¨t
;

2677 
∑gesize
;

2678 #i‚de‡
PAGESIZE


2679 
∑gesize
=
	`gë∑gesize
();

2681 
∑gesize
=
PAGESIZE
;

2683 
cuºít
<
°›
)

2685 
i
;

2686 
cuºít°¨t
=-1;

2687 
off_t
 
off£t
=(
cuºít
 / 
∑gesize
)*8;

2688 
size_t
 
∑gecou¡
=(
°›
-
cuºít
Ë/ 
∑gesize
;

2689 i‡(
∑gecou¡
>512)

2690 
∑gecou¡
=512;

2692 
	`¥ötf
("-->%Œx->%Œx : %†(%Œx)\n", 
°¨t
, 
°›
, 
¥Ÿe˘i⁄°rög
, stop-start);

2694 
i
=
	`¥ód
(
∑gem≠
, 
∑gem≠_íåõs
, 
∑gecou¡
*8, 
off£t
);

2695 i‡(
i
==-1)

2697 
	`¥ötf
("off£t=%Œx,Öagecou¡=%dÑód=%d (%dË\n", ()
off£t
, ()
∑gecou¡
, 
i
/8, i);

2702 
i
=0; i<
∑gecou¡
; i++)

2704 i‡(
∑gem≠_íåõs
[
i
] >> 63)

2706 i‡(
cuºít°¨t
==-1)

2707 
cuºít°¨t
=
i
;

2713 i‡(
cuºít°¨t
!=-1)

2716 
	`AddToRegi⁄Li°
((
uöt64_t
)(
cuºít
+
cuºít°¨t
*
∑gesize
), (
i
-cuºít°¨t)*∑gesize, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2719 
cuºít°¨t
=-1;

2723 i‡(
cuºít°¨t
!=-1)

2726 
cou¡
=
∑gecou¡
-
cuºít°¨t
;

2727 
	`AddToRegi⁄Li°
((
uöt64_t
)(
cuºít
+
cuºít°¨t
*
∑gesize
), 
cou¡
*∑gesize, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2730 
cuºít
+=
∑gecou¡
*
∑gesize
;

2738 
	`AddToRegi⁄Li°
(
°¨t
, 
°›
-°¨t, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2747 
isdúty
=0;

2748 
	`°r˝y
(
¥Ÿe˘i⁄°rög
, 
ãmp
);

2749 
°¨t
=
_°¨t
;

2750 
°›
=
_°›
;

2756 i‡(
dúty⁄ly
 && (
°¨t
!=0))

2759 
i
;

2760 
numbî
;

2761 
«me
[32];

2762 
i
=
	`ssˇnf
(
x
, "%31[^:]: %d", 
«me
, &
numbî
);

2763 i‡(
i
==2)

2765 i‡((
numbî
>0Ë&& ((
	`°rcmp
(
«me
,"Shared_Dirty")==0) || (strcmp(name,"Private_Dirty")==0)))

2766 
isdúty
=1;

2779 i‡(
m≠s
)

2780 
	`f˛o£
(
m≠s
);

2782 i‡(
∑gem≠
>=0)

2783 
	`˛o£
(
∑gem≠
);

2786 *
cou¡
=
pos
;

2787 *
röfo
=
r
;

2789 i‡(
∑gem≠_íåõs
)

2790 
	`‰ì
(
∑gem≠_íåõs
);

2792 
	`fÊush
(
°dout
);

2798 
	`¥ötf
("Faûuª m≠s=%∞∑gem≠=%d\n", 
m≠s
, 
∑gem≠
);

2801 i‡(
m≠s
)

2802 
	`f˛o£
(
m≠s
);

2804 
	`¥ötf
("Faûuª o≥nög /¥oc/%d/sm≠s", 
p
->
pid
);

2806 i‡(
∑gem≠
>=0)

2807 
	`˛o£
(
∑gem≠
);

2809 
	`¥ötf
("Faûuª o≥nög /¥oc/%d/∑gem≠", 
p
->
pid
);

2811 
	`fÊush
(
°dout
);

2820 
	}
}

2822 
	$VútuÆQuîyEx
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, 
PRegi⁄Info
 
röfo
, *
m≠¶öe
)

2829 
found
=0;

2833 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2835 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2836 
FILE
 *
m≠s
=
	`f›í
(
p
->maps, "r");

2837 i‡(
m≠s
)

2839 
x
[200];

2843 
röfo
->
¥Ÿe˘i⁄
=0;

2844 
röfo
->
ba£addªss
=(
uöçå_t
)
ÕAddªss
 & ~0xfff;

2845 
ÕAddªss
=(*)(
uöçå_t
)(
röfo
->
ba£addªss
);

2847 
	`fgës
(
x
, 200, 
m≠s
) )

2849 
°¨t
=0, 
°›
=0;

2850 
¥Ÿe˘i⁄°rög
[25];

2852 
x
[199]=0;

2854 i‡(
x
[
	`°æí
(x)-1]!='\n')

2856 
disˇrd
[100];

2860 
disˇrd
[99]=0;

2861 
	`fgës
(
disˇrd
, 99, 
m≠s
);

2862 } 
disˇrd
[99]!=0);

2868 
	`ssˇnf
(
x
, "%Œx-%Œx %s", &
°¨t
, &
°›
, 
¥Ÿe˘i⁄°rög
);

2871 i‡(
°›
 > ((
uöçå_t
)
ÕAddªss
) )

2873 
found
=1;

2875 i‡(((
uöçå_t
)
ÕAddªss
Ë>
°¨t
 )

2879 
röfo
->
¥Ÿe˘i⁄
=
	`PrŸe˘i⁄SåögToPrŸe˘i⁄
(
¥Ÿe˘i⁄°rög
);

2880 
röfo
->
ty≥
=
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
);

2881 
röfo
->
size
=
°›
-röfo->
ba£addªss
;

2885 
röfo
->
size
=
°¨t
-röfo->
ba£addªss
;

2886 
röfo
->
¥Ÿe˘i⁄
=
PAGE_NOACCESS
;

2887 
röfo
->
ty≥
=0;

2890 i‡(
m≠¶öe
!=
NULL
)

2891 
	`°r˝y
(
m≠¶öe
, 
x
);

2897 
	`f˛o£
(
m≠s
);

2899  
found
;

2903 
	`¥ötf
("Áûed o≥nög %s\n", 
p
->
m≠s
);

2908 
	}
}

2910 
	$SórchH™dÀLi°Pro˚ssCÆlback
(
PPro˚ssD©a
 
d©a
, *
pid
)

2916  (
d©a
->
pid
==*pid);

2917 
	}
}

2919 
HANDLE
 
	$O≥nPro˚ss
(
DWORD
 
pid
)

2922 
¥o˚s•©h
[100];

2923 
h™dÀ
;

2924 
	`•rötf
(
¥o˚s•©h
, "/¥oc/%d/", 
pid
);

2928 
h™dÀ
=
	`SórchH™dÀLi°
(
htPro˚sH™dÀ
, 
SórchH™dÀLi°Pro˚ssCÆlback
, &
pid
);

2929 i‡(
h™dÀ
)

2931 
	`¥ötf
("Already opened. Returning same handle\n");

2932 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
h™dÀ
);

2933 
p
->
Re„ªn˚Cou¡
++;

2934  
h™dÀ
;

2940 i‡(
	`chdú
(
¥o˚s•©h
)==0)

2945 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`mÆloc
((
Pro˚ssD©a
));

2947 
	`mem£t
(
p
, 0, (
Pro˚ssD©a
));

2949 
p
->
Re„ªn˚Cou¡
=1;

2950 
p
->
pid
=pid;

2951 
p
->
∑th
=
	`°rdup
(
¥o˚s•©h
);

2953 
	`•rötf
(
¥o˚s•©h
,"/¥oc/%d/m≠s", 
pid
);

2954 
p
->
m≠s
=
	`°rdup
(
¥o˚s•©h
);

2956 
	`•rötf
(
¥o˚s•©h
,"/¥oc/%d/mem", 
pid
);

2957 
p
->
mem
=
	`›í
(
¥o˚s•©h
, 
O_RDONLY
);

2960 
	`±hªad_muãx_öô
(&
p
->
exãnsi⁄Muãx
, 
NULL
);

2961 
p
->
hasLﬂdedExãnsi⁄
=0;

2962 
p
->
exãnsi⁄FD
=0;

2965 
p
->
isDebugged
=0;

2967 
p
->
thªadli°max
=0;

2968 
p
->
thªadli°pos
=0;

2969 
p
->
thªadli°
=
NULL
;

2971 
p
->
debuggedThªadEvít
.
thªadid
=0;

2973 
	`±hªad_muãx_öô
(&
p
->
debugEvítQueueMuãx
, 
NULL
);

2981 
	`TAILQ_INIT
(&
p
->
debugEvítQueue
);

2988  
	`Cª©eH™dÀFromPoöãr
(
p
, 
htPro˚sH™dÀ
);

2995 
	}
}

2998 
BOOL
 
	$Pro˚ss32Next
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
)

3003 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSPro˚ss
)

3005 
PPro˚ssLi°
 
∂
=(PPro˚ssLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3007 i‡(
∂
->
¥o˚ssLi°Iãøt‹
<∂->
¥o˚ssCou¡
)

3009 
¥o˚s£¡ry
->
PID
=
∂
->
¥o˚ssLi°
[∂->
¥o˚ssLi°Iãøt‹
].PID;

3010 
¥o˚s£¡ry
->
Pro˚ssName
=
∂
->
¥o˚ssLi°
[∂->
¥o˚ssLi°Iãøt‹
].ProcessName;

3011 
∂
->
¥o˚ssLi°Iãøt‹
++;

3013  
TRUE
;

3016  
FALSE
;

3019  
FALSE
;

3020 
	}
}

3025 
BOOL
 
	$Pro˚ss32Fú°
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
)

3030 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSPro˚ss
)

3032 
PPro˚ssLi°
 
∂
=(PPro˚ssLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3033 
∂
->
¥o˚ssLi°Iãøt‹
=0;

3034  
	`Pro˚ss32Next
(
hS«pshŸ
, 
¥o˚s£¡ry
);

3037  
FALSE
;

3038 
	}
}

3041 
BOOL
 
	$ModuÀ32Next
(
HANDLE
 
hS«pshŸ
, 
PModuÀLi°E¡ry
 
moduÀíåy
)

3044 
	`¥ötf
("ModuÀ32Fú°/Next(%d)\n", 
hS«pshŸ
);

3046 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSModuÀ
)

3048 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3050 i‡(
ml
->
moduÀLi°Iãøt‹
<ml->
moduÀCou¡
)

3052 
moduÀíåy
->
ba£Addªss
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].baseAddress;

3053 
moduÀíåy
->
moduÀName
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].moduleName;

3054 
moduÀíåy
->
moduÀSize
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].moduleSize;

3056 
ml
->
moduÀLi°Iãøt‹
++;

3060  
TRUE
;

3064 
	`¥ötf
("ModuÀ32Fú°/Next: Rëu∫ög fÆ£ beˇu£ ml->moduÀLi°Iãøt‹=%dánd ml->moduÀCou¡=%d\n", 
ml
->
moduÀLi°Iãøt‹
, ml->
moduÀCou¡
);

3065  
FALSE
;

3070 
	`¥ötf
("ModuÀ32Fú°/Next: GëH™dÀTy≥(hS«pshŸ)=%d\n",
	`GëH™dÀTy≥
(
hS«pshŸ
));

3071  
FALSE
;

3073 
	}
}

3076 
BOOL
 
	$ModuÀ32Fú°
(
HANDLE
 
hS«pshŸ
, 
PModuÀLi°E¡ry
 
moduÀíåy
)

3080 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSModuÀ
)

3082 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3083 
ml
->
moduÀLi°Iãøt‹
=0;

3084  
	`ModuÀ32Next
(
hS«pshŸ
, 
moduÀíåy
);

3087  
FALSE
;

3088 
	}
}

3090 
	$Clo£H™dÀ
(
HANDLE
 
h
)

3092 
i
;

3093 
h™dÀTy≥
 
ht
=
	`GëH™dÀTy≥
(
h
);

3096 i‡(
ht
==
htTHSModuÀ
)

3098 
ModuÀLi°
 *
ml
=(
PModuÀLi°
)
	`GëPoöãrFromH™dÀ
(
h
);

3099 
ml
->
Re„ªn˚Cou¡
--;

3100 i‡(
ml
->
Re„ªn˚Cou¡
<=0)

3103 
i
=0; i<
ml
->
moduÀCou¡
; i++)

3104 
	`‰ì
(
ml
->
moduÀLi°
[
i
].
moduÀName
);

3106 
	`‰ì
(
ml
->
moduÀLi°
);

3107 
	`‰ì
(
ml
);

3109 
	`RemoveH™dÀ
(
h
);

3113 i‡(
ht
==
htTHSPro˚ss
)

3115 
Pro˚ssLi°
 *
∂
=(
PPro˚ssLi°
)
	`GëPoöãrFromH™dÀ
(
h
);

3118 
∂
->
Re„ªn˚Cou¡
--;

3120 i‡(
∂
->
Re„ªn˚Cou¡
<=0)

3123 
i
=0; i<
∂
->
¥o˚ssCou¡
; i++)

3124 
	`‰ì
(
∂
->
¥o˚ssLi°
[
i
].
Pro˚ssName
);

3126 
	`‰ì
(
∂
->
¥o˚ssLi°
);

3127 
	`‰ì
(
∂
);

3129 
	`RemoveH™dÀ
(
h
);

3133 i‡(
ht
==
htPro˚sH™dÀ
)

3135 
PPro˚ssD©a
 
pd
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
h
);

3137 
pd
->
Re„ªn˚Cou¡
--;

3138 i‡(
pd
->
Re„ªn˚Cou¡
<=0)

3140 
	`‰ì
(
pd
->
m≠s
);

3141 
	`‰ì
(
pd
->
∑th
);

3142 
	`˛o£
(
pd
->
mem
);

3143 
	`‰ì
(
pd
);

3145 
	`RemoveH™dÀ
(
h
);

3149 i‡(
ht
==
htN©iveThªadH™dÀ
)

3151 
uöt64_t
 *
th
=
	`GëPoöãrFromH™dÀ
(
h
);

3152 
	`¥ötf
("ClosingÅhread handle\n");

3154 
	`‰ì
(
th
);

3155 
	`RemoveH™dÀ
(
h
);

3158 
	`RemoveH™dÀ
(
h
);

3161 
	}
}

3163 
	$öôAPI
()

3165 
	}
}

	@api.h

8 #i‚de‡
API_H_


9 
	#API_H_


	)

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°döt.h
>

15 
	~<sys/queue.h
>

17 
	~<±hªad.h
>

19 
	~"p‹thñp.h
"

20 
	~"c⁄ãxt.h
"

32 #ifde‡
HAS_LINUX_USER_H


38 
	#VQE_PAGEDONLY
 1

	)

39 
	#VQE_DIRTYONLY
 2

	)

40 
	#VQE_NOSHARED
 4

	)

45 
	mba£Addªss
;

46 
	mmoduÀSize
;

47 *
	mmoduÀName
;

49 } 
	tModuÀLi°E¡ry
, *
	tPModuÀLi°E¡ry
;

53 
	mPID
;

54 *
	mPro˚ssName
;

56 } 
	tPro˚ssLi°E¡ry
, *
	tPPro˚ssLi°E¡ry
;

58 #¥agm®
∑ck
(1)

62 
uöt8_t
 
	mnum_bΩs
;

63 
uöt8_t
 
	mnum_wΩs
;

64 
uöt8_t
 
	mwp_Àn
;

65 
uöt8_t
 
	mdebug_¨ch
;

67 } 
	tHBP_RESOURCE_INFO
, *
	tPHBP_RESOURCE_INFO
;

69 #ifde‡
__¨m__


91 
	mdebugevít
;

92 
öt64_t
 
	mthªadid
;

95 
uöt64_t
 
	maddªss
;

97 
uöt8_t
 
	mmaxBªakpoötCou¡
;

98 
uöt8_t
 
	mmaxW©chpoötCou¡
;

99 
uöt8_t
 
	mmaxSh¨edBªakpoöts
;

103 } 
	tDebugEvít
, *
	tPDebugEvít
;

105 
	sDebugEvítQueueEÀmít
 {

106 
TAILQ_ENTRY
(
DebugEvítQueueEÀmít
Ë
	míåõs
;

107 
DebugEvít
 
	mde
;

110 #¥agm®
∑ck
()

112 
TAILQ_HEAD
(
debugEvítQueueHód
, 
DebugEvítQueueEÀmít
);

116 
	mtid
;

117 
	misPau£d
;

118 
	msu•ídCou¡
;

119 
DebugEvít
 
	msu•ídedDevít
;

120 } 
	tThªadD©a
, *
	tPThªadD©a
;

123 
	mRe„ªn˚Cou¡
;

124 
	mpid
;

125 
	mm≠fd
;

126 *
	m∑th
;

127 *
	mm≠s
;

128 
	mmem
;

129 
	mhasLﬂdedExãnsi⁄
;

130 
	m√vîF‹˚LﬂdExãnsi⁄
;

131 
±hªad_muãx_t
 
	mexãnsi⁄Muãx
;

132 
	mexãnsi⁄FD
;

134 
	misDebugged
;

135 
±hªad_t
 
	mdebuggîThªadID
;

137 
PThªadD©a
 
	mthªadli°
;

138 
	mthªadli°max
;

139 
	mthªadli°pos
;

141 
DebugEvít
 
	mdebuggedThªadEvít
;

143 
	mdebuggîSîvî
;

144 
	mdebuggîClõ¡
;

149 
±hªad_muãx_t
 
	mdebugEvítQueueMuãx
;

151 
debugEvítQueueHód
 
	mdebugEvítQueue
;

152 } 
	tPro˚ssD©a
, *
	tPPro˚ssD©a
;

156 #¥agm®
∑ck
(1)

158 
uöt64_t
 
	mba£addªss
;

159 
uöt64_t
 
	msize
;

160 
uöt32_t
 
	m¥Ÿe˘i⁄
;

161 
uöt32_t
 
	mty≥
;

162 } 
	tRegi⁄Info
, *
	tPRegi⁄Info
;

163 #¥agm®
∑ck
()

165 #i‡
deföed
 
__i386__
 || deföed 
__x86_64__


166 
	s_ªgDR6


169 
uöçå_t
 
	mvÆue
;

171 
	mB0
 :1;

172 
	mB1
 :1;

173 
	mB2
 :1;

174 
	mB3
 :1;

175 
	mRe£rved
 :9;

176 
	mBD
 :1;

177 
	mBS
 :1;

178 
	mBT
 :1;

181 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tªgDR6
,*
	tPªgDR6
;

186 
	mRe„ªn˚Cou¡
;

187 
	m¥o˚ssLi°Iãøt‹
;

188 
	m¥o˚ssCou¡
;

189 
PPro˚ssLi°E¡ry
 
	m¥o˚ssLi°
;

190 } 
	tPro˚ssLi°
, *
	tPPro˚ssLi°
;

194 
	mRe„ªn˚Cou¡
;

195 
	mmoduÀLi°Iãøt‹
;

196 
	mmoduÀCou¡
;

197 
PModuÀLi°E¡ry
 
	mmoduÀLi°
;

198 } 
	tModuÀLi°
, *
	tPModuÀLi°
;

204 
Clo£H™dÀ
(
HANDLE
 
h
);

205 
BOOL
 
Pro˚ss32Next
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
);

206 
BOOL
 
Pro˚ss32Fú°
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
);

207 
HANDLE
 
Cª©eToﬁhñp32S«pshŸ
(
DWORD
 
dwFœgs
, DWORD 
th32Pro˚ssID
);

208 
HANDLE
 
O≥nPro˚ss
(
DWORD
 
pid
);

209 
VútuÆQuîyEx
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, 
PRegi⁄Info
 
röfo
, *
m≠¶öe
);

210 
VútuÆQuîyExFuŒ
(
HANDLE
 
hPro˚ss
, 
uöt32_t
 
Êags
, 
Regi⁄Info
 **
röfo
, uöt32_à*
cou¡
);

211 
RódPro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
);

212 
WrôePro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
);

214 
SèπDebug
(
HANDLE
 
hPro˚ss
);

215 
St›Debug
(
HANDLE
 
hPro˚ss
);

217 
WaôF‹DebugEvítN©ive
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
, 
tid
, 
timeout
);

218 
WaôF‹DebugEvít
(
HANDLE
 
hPro˚ss
, 
PDebugEvít
 
devít
, 
timeout
);

219 
C⁄töueFromDebugEvít
(
HANDLE
 
hPro˚ss
, 
tid
, 
ign‹esig«l
);

220 
GëDebugP‹t
(
HANDLE
 
hPro˚ss
);

222 
SëBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, *
addªss
, 
b±y≥
, 
bpsize
);

223 
RemoveBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, 
wasW©chpoöt
);

225 
Su•ídThªad
(
HANDLE
 
hPro˚ss
, 
tid
);

226 
ResumeThªad
(
HANDLE
 
hPro˚ss
, 
tid
);

228 
GëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, 
PCONTEXT
 
C⁄ãxt
, 
ty≥
);

231 
PDebugEvít
 
FödThªadDebugEvítInQueue
(
PPro˚ssD©a
 
p
, 
tid
);

232 
AddDebugEvítToQueue
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
);

233 
RemoveThªadDebugEvítFromQueue
(
PPro˚ssD©a
 
p
, 
tid
);

235 
öôAPI
();

237 
±hªad_muãx_t
 
debugsockëmuãx
;

	@ceserver.c

1 
	~<°dio.h
>

2 
	~"embedded.h
"

3 
	~"≠i.h
"

4 
	~"˚£rvî.h
"

6 
	#CE_SERVER__RECEIVE_BUFFER_SIZE
 (1000)

	)

13 
Pro˚ssLi°E¡ry
 
	gCE_SERVER__¥o˚ss_li°_íåõs_g
[
CE_SERVER_MAX_PROCESS_AMOUNT
] = {0};

14 
Pro˚ssLi°
 
	gCE_SERVER__¥o˚ss_li°_g
 = {0, 0, 0, 
CE_SERVER__¥o˚ss_li°_íåõs_g
};

16 
	$mylog
(*
b
, 
uöt32_t
 
s
)

18 
uöt32_t
 
i
 = 0; i < 
s
; i++)

19 
	`¥ötf
("%02X ", 
b
[
i
]);

20 
	`¥ötf
("\n");

21 
	}
}

23 
EMBEDDED__rc_t
 
	$CE_SERVER__£nd_Æl
(*
buf„r
, 
uöt32_t
 
size
)

25 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

26 
uöt32_t
 
tŸÆ_£¡
 = 0;

27 
uöt32_t
 
cuºít_£¡
 = 0;

29 
tŸÆ_£¡
 < 
size
) {

30 
rc
 = 
	`EMBEDDED__£nd
(&
buf„r
[
tŸÆ_£¡
], (
size
 -ÅŸÆ_£¡), &
cuºít_£¡
);

31 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

33 
tŸÆ_£¡
 +
cuºít_£¡
;

36 
	`¥ötf
("[SEND] ");

37 
	`mylog
((*)
buf„r
, 
tŸÆ_£¡
);

38 
Exô
:

39  
rc
;

40 
	}
}

42 
EMBEDDED__rc_t
 
	$CE_SERVER__ªcv_Æl
(*
buf„r
, 
uöt32_t
 
size
)

44 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

45 
uöt32_t
 
tŸÆ_ª˚ived
 = 0;

46 
uöt32_t
 
cuºít_ª˚ived
 = 0;

48 
tŸÆ_ª˚ived
 < 
size
) {

49 
rc
 = 
	`EMBEDDED__ªcv
(&
buf„r
[
tŸÆ_ª˚ived
], (
size
 -ÅŸÆ_ª˚ived), &
cuºít_ª˚ived
);

50 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

52 
tŸÆ_ª˚ived
 +
cuºít_ª˚ived
;

55 
	`¥ötf
("[RECV] ");

56 
	`mylog
((*)
buf„r
, 
tŸÆ_ª˚ived
);

57 
Exô
:

58  
rc
;

59 
	}
}

61 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
()

63 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

64 
CeCª©eToﬁhñp32S«pshŸ
 
∑øms
 = {0};

65 
uöt32_t
 
¥o˚ss_li°_h™dÀ
 = -1;

67 
rc
 = 
	`CE_SERVER__ªcv_Æl
((*)&
∑øms
, (params));

68 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

70 i‡(
∑øms
.
dwFœgs
 & 
TH32CS_SNAPPROCESS
)

72 
CE_SERVER__¥o˚ss_li°_g
.
Re„ªn˚Cou¡
 = 1;

73 
CE_SERVER__¥o˚ss_li°_g
.
¥o˚ssCou¡
 = 0;

76 
rc
 = 
	`EMBEDDED__gë_¥o˚ss_li°
(&
CE_SERVER__¥o˚ss_li°_g
);

77 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

80 
¥o˚ss_li°_h™dÀ
 = 
	`Cª©eH™dÀFromPoöãr
(&
CE_SERVER__¥o˚ss_li°_g
, 
htTHSPro˚ss
);

81 
	`CE_SERVER__£nd_Æl
(&
¥o˚ss_li°_h™dÀ
, (process_list_handle));

86 
rc
 = 
EMBEDDED_SUCCESS
;

87 
Exô
:

88  
rc
;

89 
	}
}

91 
EMBEDDED__rc_t
 
	$˚_£rvî__h™dÀ_¥o˚ss_32_fú°
()

93 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

94 
uöt32_t
 
¥o˚ss_li°_h™dÀ
 = -1;

96 
rc
 = 
	`CE_SERVER__ªcv_Æl
((
uöt32_t
 *)&
¥o˚ss_li°_h™dÀ
, (process_list_handle));

97 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

99 
CE_SERVER__¥o˚ss_li°_g
.
¥o˚ssLi°Iãøt‹
 = 0;

101 
	`˚_£rvî__£nd_√xt_¥o˚ss
();

102 
Exô
:

103  
rc
;

104 
	}
}

106 
EMBEDDED__rc_t
 
	$˚_£rvî__h™dÀ_¥o˚ss_32_√xt
()

108 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

109 
uöt32_t
 
¥o˚ss_li°_h™dÀ
 = -1;

111 
rc
 = 
	`CE_SERVER__ªcv_Æl
((
uöt32_t
 *)&
¥o˚ss_li°_h™dÀ
, (process_list_handle));

112 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

114 
	`˚_£rvî__£nd_√xt_¥o˚ss
();

115 
Exô
:

116  
rc
;

117 
	}
}

119 
boﬁ_t
 
	$˚_£rvî__£nd_√xt_¥o˚ss
()

121 
boﬁ_t
 
rc
 = 
FALSE
;

122 
CePro˚ssE¡ry
 
¥o˚ss_íåy
 = {0};

123 *
¥o˚ss_«me
 = 
NULL
;

124 
uöt32_t
 
¥o˚ss_«me_size
 = 0;

127 i‡(
CE_SERVER__¥o˚ss_li°_g
.
¥o˚ssLi°Iãøt‹
 >CE_SERVER__¥o˚ss_li°_g.
¥o˚ssCou¡
)

132 
¥o˚ss_«me
 = 
CE_SERVER__¥o˚ss_li°_g
->
¥o˚ssLi°
[CE_SERVER__¥o˚ss_li°_g->
¥o˚ssLi°Iãøt‹
].
Pro˚ssName
;

133 
¥o˚ss_«me_size
 = 
	`°æí
(
¥o˚ss_«me
);

135 
¥o˚ss_íåy
->
pid
 = 
CE_SERVER__¥o˚ss_li°_g
->
¥o˚ssLi°
[CE_SERVER__¥o˚ss_li°_g->
¥o˚ssLi°Iãøt‹
].
PID
;

136 
	`mem˝y
((*)
¥o˚ss_íåy
 + ’ro˚ss_íåy), 
¥o˚ss_«me
, 
¥o˚ss_«me_size
);

138 
∂
->
¥o˚ssLi°Iãøt‹
++;

140  
rc
;

141 
	}
}

143 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_comm™d
(
uöt8_t
 
comm™d_id
)

145 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

147 
comm™d_id
) {

148 
CMD_CREATETOOLHELP32SNAPSHOT
:

149 
	`EMBEDDED__log
("Handling CMD_CREATETOOLHELP32SNAPSHOT");

150 
rc
 = 
	`CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
();

151 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

154 
CMD_PROCESS32FIRST
:

155 
	`EMBEDDED__log
("Handling CMD_PROCESS32FIRST");

156 
rc
 = 
	`CE_SERVER__h™dÀ_¥o˚ss_32_√xt
();

157 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

160 
CMD_PROCESS32NEXT
:

161 
	`EMBEDDED__log
("Handling CMD_PROCESS32NEXT");

162 
rc
 = 
	`CE_SERVER__h™dÀ_¥o˚ss_32_√xt
();

163 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

167 
rc
 = 
EMBEDDED_BAD_COMMAND_ID
;

170 
Exô
:

171  
rc
;

172 
	}
}

174 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_c⁄√˘i⁄
()

176 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

177 
uöt8_t
 
comm™d_id
 = 0;

179 
TRUE
) {

180 
rc
 = 
	`CE_SERVER__ªcv_Æl
(&
comm™d_id
, 1);

181 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

183 
rc
 = 
	`CE_SERVER__h™dÀ_comm™d
(
comm™d_id
);

184 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

187 
rc
 = 
EMBEDDED_SUCCESS
;

188 
Exô
:

189  
rc
;

190 
	}
}

193 
	$CheckF‹AndDi•©chComm™d
(
cuºítsockë
)

196 
	}
}

199 
ssize_t
 
	$£ndÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
)

202 
	}
}

204 
ssize_t
 
	$ªcvÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
)

207 
	}
}

	@ceserver.h

8 #i‚de‡
CESERVER_H_


9 
	#CESERVER_H_


	)

11 
	~<°döt.h
>

12 
	~<sys/ty≥s.h
>

13 
	~"p‹thñp.h
"

14 
	~"embedded.h
"

16 
	#CE_SERVER_MAX_PROCESS_AMOUNT
 (2048)

	)

18 
	#CMD_GETVERSION
 0

	)

19 
	#CMD_CLOSECONNECTION
 1

	)

20 
	#CMD_TERMINATESERVER
 2

	)

21 
	#CMD_OPENPROCESS
 3

	)

22 
	#CMD_CREATETOOLHELP32SNAPSHOT
 4

	)

23 
	#CMD_PROCESS32FIRST
 5

	)

24 
	#CMD_PROCESS32NEXT
 6

	)

25 
	#CMD_CLOSEHANDLE
 7

	)

26 
	#CMD_VIRTUALQUERYEX
 8

	)

27 
	#CMD_READPROCESSMEMORY
 9

	)

28 
	#CMD_WRITEPROCESSMEMORY
 10

	)

29 
	#CMD_STARTDEBUG
 11

	)

30 
	#CMD_STOPDEBUG
 12

	)

31 
	#CMD_WAITFORDEBUGEVENT
 13

	)

32 
	#CMD_CONTINUEFROMDEBUGEVENT
 14

	)

33 
	#CMD_SETBREAKPOINT
 15

	)

34 
	#CMD_REMOVEBREAKPOINT
 16

	)

35 
	#CMD_SUSPENDTHREAD
 17

	)

36 
	#CMD_RESUMETHREAD
 18

	)

37 
	#CMD_GETTHREADCONTEXT
 19

	)

38 
	#CMD_SETTHREADCONTEXT
 20

	)

39 
	#CMD_GETARCHITECTURE
 21

	)

40 
	#CMD_MODULE32FIRST
 22

	)

41 
	#CMD_MODULE32NEXT
 23

	)

43 
	#CMD_GETSYMBOLLISTFROMFILE
 24

	)

44 
	#CMD_LOADEXTENSION
 25

	)

46 
	#CMD_ALLOC
 26

	)

47 
	#CMD_FREE
 27

	)

48 
	#CMD_CREATETHREAD
 28

	)

49 
	#CMD_LOADMODULE
 29

	)

50 
	#CMD_SPEEDHACK_SETSPEED
 30

	)

52 
	#CMD_VIRTUALQUERYEXFULL
 31

	)

53 
	#CMD_GETREGIONINFO
 32

	)

56 
	#CMD_COMMANDLIST2
 255

	)

64 #¥agm®
∑ck
(1)

66 
	mvîsi⁄
;

67 
	m°rögsize
;

69 } 
	tCeVîsi⁄
, *
	tPCeVîsi⁄
;

72 
DWORD
 
	mdwFœgs
;

73 
DWORD
 
	mth32Pro˚ssID
;

74 } 
	tCeCª©eToﬁhñp32S«pshŸ
, *
	tPCeCª©eToﬁhñp32S«pshŸ
;

77 
	mªsu…
;

78 
	mpid
;

79 
	m¥o˚s¢amesize
;

81 } 
	tCePro˚ssE¡ry
, *
	tPCePro˚ssE¡ry
;

84 
	mªsu…
;

85 
öt64_t
 
	mmoduÀba£
;

86 
	mmoduÀsize
;

87 
	mmoduÀ«mesize
;

90 } 
	tCeModuÀE¡ry
, *
	tPCeModuÀE¡ry
;

93 
	mh™dÀ
;

94 
uöt64_t
 
	mba£addªss
;

95 } 
	tCeVútuÆQuîyExI≈ut
, *
	tPCeVútuÆQuîyExI≈ut
;

98 
uöt8_t
 
	mªsu…
;

99 
uöt32_t
 
	m¥Ÿe˘i⁄
;

100 
uöt32_t
 
	mty≥
;

101 
uöt64_t
 
	mba£addªss
;

102 
uöt64_t
 
	msize
;

103 } 
	tCeVútuÆQuîyExOuçut
, *
	tPCeVútuÆQuîyExOuçut
;

106 
	mh™dÀ
;

107 
uöt8_t
 
	mÊags
;

108 } 
	tCeVútuÆQuîyExFuŒI≈ut
, *
	tPCeVútuÆQuîyExFuŒI≈ut
;

111 
uöt32_t
 
	m¥Ÿe˘i⁄
;

112 
uöt32_t
 
	mty≥
;

113 
uöt64_t
 
	mba£addªss
;

114 
uöt64_t
 
	msize
;

115 } 
	tCeVútuÆQuîyExFuŒOuçut
, *
	tPCeVútuÆQuîyExFuŒOuçut
;

118 
uöt32_t
 
	mh™dÀ
;

119 
uöt64_t
 
	maddªss
;

120 
uöt32_t
 
	msize
;

121 
uöt8_t
 
	mcom¥ess
;

122 } 
	tCeRódPro˚ssMem‹yI≈ut
, *
	tPCeRódPro˚ssMem‹yI≈ut
;

125 
	mªad
;

126 } 
	tCeRódPro˚ssMem‹yOuçut
, *
	tPCeRódPro˚ssMem‹yOuçut
;

129 
öt32_t
 
	mh™dÀ
;

130 
öt64_t
 
	maddªss
;

131 
öt32_t
 
	msize
;

132 } 
	tCeWrôePro˚ssMem‹yI≈ut
, *
	tPCeWrôePro˚ssMem‹yI≈ut
;

136 
öt32_t
 
	mwrôãn
;

137 } 
	tCeWrôePro˚ssMem‹yOuçut
, *
	tPCeWrôePro˚ssMem‹yOuçut
;

141 
HANDLE
 
	mhPro˚ss
;

142 
	mtid
;

143 
	mdebugªg
;

144 
uöt64_t
 
	mAddªss
;

145 
	mb±y≥
;

146 
	mbpsize
;

147 } 
	tCeSëBª≠oötI≈ut
, *
	tPCeSëBªakpoötI≈ut
;

151 
	mªsu…
;

152 } 
	tCeSëBª≠oötOuçut
, *
	tPCeSëBªakpoötOuçut
;

155 
HANDLE
 
	mhPro˚ss
;

156 
uöt32_t
 
	mtid
;

157 
uöt32_t
 
	mdebugªg
;

158 
uöt32_t
 
	mwasW©chpoöt
;

159 } 
	tCeRemoveBª≠oötI≈ut
, *
	tPCeRemoveBªakpoötI≈ut
;

163 
	mªsu…
;

164 } 
	tCeRemoveBª≠oötOuçut
, *
	tPCeRemoveBªakpoötOuçut
;

167 
HANDLE
 
	mhPro˚ss
;

168 
	mtid
;

169 } 
	tCeSu•ídThªadI≈ut
, *
	tPCeSu•ídThªadI≈ut
;

173 
	mªsu…
;

174 } 
	tCeSu•ídThªadOuçut
, *
	tPCeSu•ídThªadOuçut
;

177 
HANDLE
 
	mhPro˚ss
;

178 
	mtid
;

179 } 
	tCeResumeThªadI≈ut
, *
	tPCeResumeThªadI≈ut
;

183 
	mªsu…
;

184 } 
	tCeResumeThªadOuçut
, *
	tPCeResumeThªadOuçut
;

187 
HANDLE
 
	mhPro˚ss
;

188 
uöt64_t
 
	m¥e„ªdBa£
;

189 
uöt32_t
 
	msize
;

190 } 
	tCeAŒocI≈ut
, *
	tPCeAŒocI≈ut
;

194 
uöt64_t
 
	maddªss
;

195 } 
	tCeAŒocOuçut
, *
	tPCeAŒocOuçut
;

198 
HANDLE
 
	mhPro˚ss
;

199 
uöt64_t
 
	maddªss
;

200 
uöt32_t
 
	msize
;

201 } 
	tCeFªeI≈ut
, *
	tPCeFªeI≈ut
;

205 
uöt32_t
 
	mªsu…
;

206 } 
	tCeFªeOuçut
, *
	tPCeFªeOuçut
;

209 
HANDLE
 
	mhPro˚ss
;

210 
uöt64_t
 
	m°¨èddªss
;

211 
uöt64_t
 
	m∑ømëî
;

212 } 
	tCeCª©eThªadI≈ut
, *
	tPCeCª©eThªadI≈ut
;

216 
HANDLE
 
	mthªadh™dÀ
;

217 } 
	tCeCª©eThªadOuçut
, *
	tPCeCª©eThªadOuçut
;

220 
HANDLE
 
	mhPro˚ss
;

221 
uöt32_t
 
	mmoduÀ∑thÀngth
;

223 } 
	tCeLﬂdModuÀI≈ut
, *
	tPCeLﬂdModuÀI≈ut
;

227 
uöt32_t
 
	mªsu…
;

228 } 
	tCeLﬂdModuÀOuçut
, *
	tPCeLﬂdModuÀOuçut
;

232 
HANDLE
 
	mhPro˚ss
;

233 
	m•ìd
;

234 } 
	tCeS≥edhackSëS≥edI≈ut
, *
	tPCeS≥edhackSëS≥edI≈ut
;

238 
uöt32_t
 
	mªsu…
;

239 } 
	tCeS≥edhackSëS≥edOuçut
, *
	tPCeS≥edhackSëS≥edOuçut
;

243 #¥agm®
∑ck
()

246 
ssize_t
 
£ndÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
);

247 
ssize_t
 
ªcvÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
);

248 
Di•©chComm™d
(
cuºítsockë
, 
comm™d
);

249 
CheckF‹AndDi•©chComm™d
(
cuºítsockë
);

251 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_comm™d
(
uöt8_t
 
comm™d_id
);

252 
EMBEDDED__rc_t
 
CE_SERVER__ªcv_Æl
(*
buf„r
, 
uöt32_t
 
size
);

253 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_c⁄√˘i⁄
();

256 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
();

	@ceservertest.c

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<uni°d.h
>

13 
	~<±hªad.h
>

14 
	~<°dlib.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<√töë/ö.h
>

18 
	~"˚£rvî.h
"

19 
	~"≠i.h
"

21 
	gpH™dÀ
;

23 
	$˚√t_c⁄√˘
()

25 
fd
;

26 
i
;

27 
PORT
=52736;

29 
sockaddr_ö
 
addr
;

31 
fd
=
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

34 
	`mem£t
(&
addr
, 0, (addr));

35 
addr
.
sö_Ámûy
=
AF_INET
;

36 
addr
.
sö_p‹t
=
	`ht⁄s
(
PORT
);

37 
addr
.
sö_addr
.
s_addr
=
	`ht⁄l
(
INADDR_LOOPBACK
);

39 
	`¥ötf
("calling connect...\n");

40 
i
=
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, (addr));

42 
	`¥ötf
("a·î c⁄√˘. %d\n", 
i
);

45  
fd
;

46 
	}
}

48 
	$˚√t_O≥nPro˚ss
(
fd
, 
pid
)

50 #¥agm®
	`∑ck
(1)

53 
comm™d
;

54 
pid
;

55 } 
›
;

56 #¥agm®
	`∑ck
()

58 
pH™dÀ
;

60 
	`¥ötf
("˚√t_O≥nPro˚ss(%d,%d)\n", 
fd
, 
pid
);

64 
›
.
comm™d
=
CMD_OPENPROCESS
;

65 
›
.
pid
=pid;

67 
pH™dÀ
=0;

69 
	`£ndÆl
(
fd
, &
›
, (op), 0);

70 
	`ªcv
(
fd
, &
pH™dÀ
, ’H™dÀ),
MSG_WAITALL
);

72  
pH™dÀ
;

73 
	}
}

75 
	$˚√t_°¨tDebuggî
(
fd
, 
pH™dÀ
)

77 #¥agm®
	`∑ck
(1)

80 
comm™d
;

81 
HANDLE
 
pH™dÀ
;

82 } 
sd
;

83 #¥agm®
	`∑ck
()

85 
ªsu…
;

88 
sd
.
comm™d
=
CMD_STARTDEBUG
;

89 
sd
.
pH™dÀ
=pHandle;

91 
	`£ndÆl
(
fd
, &
sd
, (sd), 0);

92 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

94  
ªsu…
;

96 
	}
}

98 
	$˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, 
DebugEvít
* 
devít
, 
timeout
)

100 #¥agm®
	`∑ck
(1)

103 
comm™d
;

104 
HANDLE
 
pH™dÀ
;

105 
timeout
;

106 } 
wfd
;

107 #¥agm®
	`∑ck
()

110 
ªsu…
;

115 
wfd
.
comm™d
=
CMD_WAITFORDEBUGEVENT
;

116 
wfd
.
pH™dÀ
=pHandle;

117 
wfd
.
timeout
=timeout;

119 
	`£ndÆl
(
fd
, &
wfd
, (wfd), 0);

120 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

121 i‡(
ªsu…
)

122 
	`ªcv
(
fd
, 
devít
, (
DebugEvít
), 
MSG_WAITALL
);

124 
	`¥ötf
(">>>>>>>>>>>>>>>>>>cenet_waitForDebugEventÑeturned<<<<<<<<<<<<<<<<\n");

126  
ªsu…
;

128 
	}
}

130 
	$˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
tid
, 
ign‹e
)

132 #¥agm®
	`∑ck
(1)

135 
comm™d
;

136 
HANDLE
 
pH™dÀ
;

137 
tid
;

138 
ign‹e
;

139 } 
cfd
;

140 #¥agm®
	`∑ck
()

142 
ªsu…
;

145 
cfd
.
comm™d
=
CMD_CONTINUEFROMDEBUGEVENT
;

146 
cfd
.
pH™dÀ
=pHandle;

147 
cfd
.
tid
=tid;

148 
cfd
.
ign‹e
=ignore;

150 
	`£ndÆl
(
fd
, &
cfd
, (cfd), 0);

151 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

153  
ªsu…
;

154 
	}
}

156 
	$˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 
addªss
, *
de°
, 
size
)

158 #¥agm®
	`∑ck
(1)

161 
comm™d
;

162 
pH™dÀ
;

163 
addªss
;

164 
size
;

165 } 
Ωm
;

166 #¥agm®
	`∑ck
()

168 
ªsu…
;

170 
	`¥ötf
("˚√t_ªadPro˚ssMem‹y(%d, %d, %Œx, %p, %d)", 
fd
, 
pH™dÀ
, 
addªss
, 
de°
, 
size
);

172 
Ωm
.
comm™d
=
CMD_READPROCESSMEMORY
;

173 
Ωm
.
pH™dÀ
=pHandle;

174 
Ωm
.
addªss
=address;

175 
Ωm
.
size
=size;

177 
	`£ndÆl
(
fd
, &
Ωm
, (rpm), 0);

178 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

180 
	`¥ötf
("ªsu…=%d\n", 
ªsu…
);

181 
	`ªcv
(
fd
, 
de°
, 
ªsu…
, 
MSG_WAITALL
);

184  
ªsu…
;

186 
	}
}

188 
	$˚√t_£tBªakpoöt
(
fd
, 
pH™dÀ
, 
tid
, *
Addªss
, 
b±y≥
, 
bpsize
, 
debugªg
)

190 #¥agm®
	`∑ck
(1)

193 
comm™d
;

194 
HANDLE
 
hPro˚ss
;

195 
tid
;

196 
debugªg
;

197 
uöt64_t
 
Addªss
;

198 
b±y≥
;

199 
bpsize
;

200 } 
sb
;

201 #¥agm®
	`∑ck
()

202 
ªsu…
;

204 
	`¥ötf
("˚√t_£tBªakpoöàsizeof(sb)=%d\n", (
sb
));

205 
sb
.
comm™d
=
CMD_SETBREAKPOINT
;

206 
sb
.
hPro˚ss
=
pH™dÀ
;

207 
sb
.
tid
=tid;

208 
sb
.
debugªg
=debugreg;

209 
sb
.
Addªss
=(
uöçå_t
)Address;

210 
sb
.
b±y≥
=bptype;

211 
sb
.
bpsize
=bpsize;

213 
	`£ndÆl
(
fd
, &
sb
, (sb), 0);

216 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

218  
ªsu…
;

219 
	}
}

221 
	$˚√t_ªmoveBªakpoöt
(
fd
, 
pH™dÀ
, 
tid
, 
debugªg
, 
wasw©chpoöt
)

223 #¥agm®
	`∑ck
(1)

226 
comm™d
;

227 
HANDLE
 
hPro˚ss
;

228 
uöt32_t
 
tid
;

229 
uöt32_t
 
debugªg
;

230 
uöt32_t
 
wasw©chpoöt
;

231 } 
rb
;

232 #¥agm®
	`∑ck
()

233 
ªsu…
;

235 
	`¥ötf
("cenet_removeBreakpoint\n");

236 
rb
.
comm™d
=
CMD_REMOVEBREAKPOINT
;

237 
rb
.
hPro˚ss
=
pH™dÀ
;

238 
rb
.
tid
=tid;

239 
rb
.
debugªg
=debugreg;

240 
rb
.
wasw©chpoöt
=waswatchpoint;

242 
	`£ndÆl
(
fd
, &
rb
, (rb), 0);

243 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

245  
ªsu…
;

246 
	}
}

248 
	#ARM_DBG_READ
(
N
, 
M
, 
OP2
, 
VAL
) do {\

249 
asm
 vﬁ©ûe("mr¯p14, 0, %0, " #N "," #M ", " #OP2 : "Ù" (
VAL
));\

250 } 0)

	)

253 
	$˚√t_VútuÆQuîyExFuŒ
(
fd
, 
pH™dÀ
, 
DWORD
 
Êags
)

255 #¥agm®
	`∑ck
(1)

258 
comm™d
;

259 
HANDLE
 
hPro˚ss
;

260 
uöt8_t
 
Êags
;

261 } 
vqef
;

262 #¥agm®
	`∑ck
()

264 
vqef
.
comm™d
=
CMD_VIRTUALQUERYEXFULL
;

265 
vqef
.
hPro˚ss
=
pH™dÀ
;

266 
vqef
.
Êags
=flags;

268 
	`£ndÆl
(
fd
, &
vqef
, (vqef),0);

272 
	}
}

274 *
	$CESERVERTEST_DEBUGGERTHREAD
(*
¨g
)

276 
cou¡
=0;

277 
fd
=
	`˚√t_c⁄√˘
();

279 
ds¸
=0;

280 #ifde‡
__¨m__


281 
	`ARM_DBG_READ
(
c0
, 
c1
, 0, 
ds¸
);

282 
	`¥ötf
("a·î: %x\n", 
ds¸
);

287 i‡(
	`˚√t_°¨tDebuggî
(
fd
, 
pH™dÀ
))

289 
i
;

290 
DebugEvít
 
devít
;

292 
	`¥ötf
("cenet_startDebugger=true\n");

296 
cou¡
++;

297 
	`¥ötf
("cou¡=%d\n", 
cou¡
);

299 i‡(
cou¡
==4)

301 
	`¥ötf
("goingÅo set breakpoint\n");

303 
i
=
	`˚√t_£tBªakpoöt
(
fd
, 
pH™dÀ
, -1, 0x00ce0000, 3, 4,0);

311 
	`¥ötf
("˚√t_£tBªakpoöàªtu∫ed %d\n",
i
);

314 
i
=
	`˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, &
devít
, 2000);

315 i‡(
i
)

318 i‡(
devít
.
debugevít
==5)

320 
	`¥ötf
("TRAP (thªad %d)\n", 
devít
.
thªadid
);

326 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 2);

328 
i
=
	`˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, &
devít
, 2000);

329 
	`¥ötf
("a·î sögÀ sãp. i=%d\n",
i
);

330 
	`¥ötf
("devít.debugevít=%d (thªad %d)\n", 
devít
.
debugevít
, devít.
thªadid
);

338 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 1);

341 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 0);

348 
	`¥ötf
("FailedÅo startÅhe debugger\n");

351  
NULL
;

353 
	}
}

355 *
	$CESERVERTEST_RPMTHREAD
(*
¨g
)

357 
fd
=
	`˚√t_c⁄√˘
();

358 
i
;

359 
hp
;

364 #ifde‡
__¨m__


365 
i
=
	`˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 0xa000, &
hp
, 4);

367 
i
=
	`˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 0x601068, &
hp
, 4);

369 
	`¥ötf
("CESERVERTEST_RPMTHREAD:");

371 
	`¥ötf
("i=%d\n", 
i
);

372 
	`¥ötf
("hp=%d\n", 
hp
);

373 
	`¶ìp
(1);

375 
	}
}

377 *
	$CESERVERTEST
(*
¨gv
[])

379 
fd
;

381 
pid
=
	`©oi
(
¨gv
[2]);

382 
±hªad_t
 
±h
;

383 
	`¥ötf
("CESERVERTEST:Ñunning\n");

386 
	`¥ötf
("connecting...\n");

388 
fd
=
	`˚√t_c⁄√˘
();

389 
	`¥ötf
("fd=%d\n", 
fd
);

390 
	`¥ötf
("pid=%d\n", 
pid
);

392 
pH™dÀ
=
	`˚√t_O≥nPro˚ss
(
fd
, 
pid
);

394 
	`¥ötf
("pH™dÀ=%d\n", 
pH™dÀ
);

404 
	`CESERVERTEST_DEBUGGERTHREAD
(
NULL
);

413 
	`fÊush
(
°dout
);

415  
NULL
;

417 
	}
}

	@ceservertest.h

8 #i‚de‡
CESERVERTEST_H_


9 
	#CESERVERTEST_H_


	)

11 *
CESERVERTEST
(*
¨gv
[]);

	@context.c

9 
	~"c⁄ãxt.h
"

11 
	$gëRegi°îs
(
tid
, 
CONTEXT_REGS
 *
ªgi°î°‹e
)

14 #i‚de‡
NT_PRSTATUS


15  
	`±ø˚
(
PTRACE_GETREGS
, 
tid
, 0, 
ªgi°î°‹e
);

17 
iovec
 
iov
;

18 
iov
.
iov_ba£
=
ªgi°î°‹e
;

19 
iov
.
iov_Àn
=(
CONTEXT_REGS
);

20  
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, (*)
NT_PRSTATUS
, &
iov
);

22 
	}
}

	@context.h

8 #i‚de‡
CONTEXT_H_


9 
	#CONTEXT_H_


	)

11 #ifde‡
HAS_LINUX_USER_H


12 
	~<löux/u£r.h
>

14 
	~<sys/u£r.h
>

17 
	~<sys/±ø˚.h
>

18 
	~<löux/sockë.h
>

20 #ifde‡
__Ørch64__


21 
	~<ñf.h
>

26 
	~<°döt.h
>

29 #ifde‡
__i386__


30 
±_ªgs
 
	tCONTEXT_REGS
;

33 #ifde‡
__x86_64__


34 
u£r_ªgs_°ru˘
 
	tCONTEXT_REGS
;

38 #ifde‡
__¨m__


39 
±_ªgs
 
	tCONTEXT_REGS
;

43 #ifde‡
__Ørch64__


44 
u£r_±_ªgs
 
	tCONTEXT_REGS
;

47 #ifde‡
__mùs__


49 
	su£r_±_ªgs


51 
	mªgs
[18];

54 
	su£r_hwdebug_°©e
 {

55 
uöt32_t
 
	mdbg_öfo
;

57 
uöt32_t
 
	maddr
;

58 
uöt32_t
 
	m˘æ
;

59 } 
	mdbg_ªgs
[16];

62 
	#NT_ARM_HW_WATCH
 0x403

	)

63 
	#PTRACE_GETREGSET
 0x4204

	)

64 
	#PTRACE_SETREGSET
 0x4205

	)

68 #ifde‡
__mùs__


69 
u£r_±_ªgs
 
	tCONTEXT_REGS
;

75 
uöt32_t
 
	mi
;

76 
CONTEXT_REGS
 
	mªgs
;

77 } 
	tCONTEXT
, *
	tPCONTEXT
;

80 
gëRegi°îs
(
tid
, 
CONTEXT_REGS
 *
ªgi°î°‹e
);

	@embedded-linux.c

1 
	~<°dio.h
>

2 
	~<°dboﬁ.h
>

3 
	~<sys/sockë.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<¨∑/öë.h
>

6 
	~<f˙é.h
>

7 
	~<√töë/t˝.h
>

8 
	~<uni°d.h
>

9 
	~<dúít.h
>

10 
	~<°rög.h
>

12 
	~"p‹thñp.h
"

13 
	~"embedded.h
"

14 
	~"˚£rvî.h
"

16 
	gembedded__£rvî_sockë_g
 = -1;

17 
	gembedded__˛õ¡_sockë_g
 = -1;

19 
	$EMBEDDED__log
(*
mesßge
)

21 
	`¥ötf
("%s\n", 
mesßge
);

22 
	}
}

24 
EMBEDDED__rc_t
 
	$EMBEDDED__£nd
(*
buf„r
, 
uöt32_t
 
buf„r_size
, uöt32_à*
£¡_size
)

26 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

27 
ssize_t
 
£nd_rc
 = -1;

29 
£nd_rc
 = 
	`£nd
(
embedded__˛õ¡_sockë_g
, 
buf„r
, 
buf„r_size
, 0);

30 i‡(-1 =
£nd_rc
) {

31 
rc
 = 
EMBEDDED_SEND_FAILED
;

32 
Exô
;

35 *
£¡_size
 = 
£nd_rc
;

36 
rc
 = 
EMBEDDED_SUCCESS
;

38 
Exô
:

39  
rc
;

40 
	}
}

42 
EMBEDDED__rc_t
 
	$EMBEDDED__ªcv
(*
buf„r
, 
uöt32_t
 
max_buf„r_size
, uöt32_à*
ª˚ived_size
)

44 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

45 
ssize_t
 
ªcv_rc
 = -1;

47 
ªcv_rc
 = 
	`ªcv
(
embedded__˛õ¡_sockë_g
, 
buf„r
, 
max_buf„r_size
, 
MSG_WAITALL
);

48 i‡(-1 =
ªcv_rc
) {

49 
rc
 = 
EMBEDDED_RECV_FAILED
;

50 
Exô
;

53 *
ª˚ived_size
 = 
ªcv_rc
;

54 
rc
 = 
EMBEDDED_SUCCESS
;

56 
Exô
:

57  
rc
;

58 
	}
}

60 
EMBEDDED__rc_t
 
	$EMBEDDED__maö
()

62 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

63 
sockaddr_ö
 
addr
 = {0};

64 
sockaddr_ö
 
˛õ¡_addr
 = {0};

65 
commîcül_rc
 = -1;

66 
ªu£addr_vÆue
 = 1;

67 
no_dñay_vÆue
 = 0;

68 
sockÀn_t
 
˛õ¡_size
 = 0;

70 
	`¥ötf
("CE Server forÜinux\n");

71 
embedded__£rvî_sockë_g
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

72 i‡(-1 =
embedded__£rvî_sockë_g
) {

73 
rc
 = 
EMBEDDED_CREATE_SOCKET_FAILED
;

74 
Exô
;

77 
commîcül_rc
 = 
	`£tsock›t
(
embedded__£rvî_sockë_g
,

78 
SOL_SOCKET
,

79 
SO_REUSEADDR
,

80 &
ªu£addr_vÆue
,

81 (
ªu£addr_vÆue
));

82 i‡(-1 =
commîcül_rc
) {

83 
rc
 = 
EMBEDDED_SETSOCKOPT_FAILED
;

84 
CÀ™up
;

87 
addr
.
sö_Ámûy
 = 
AF_INET
;

89 
addr
.
sö_p‹t
 = 
	`ht⁄s
(1337);

90 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

92 
commîcül_rc
 = 
	`böd
(
embedded__£rvî_sockë_g
, (c⁄° 
sockaddr
 *)&
addr
, (addr));

93 i‡(-1 =
commîcül_rc
) {

94 
rc
 = 
EMBEDDED_BIND_FAILED
;

95 
CÀ™up
;

98 
commîcül_rc
 = 
	`li°í
(
embedded__£rvî_sockë_g
, 32);

99 i‡(-1 =
commîcül_rc
) {

100 
rc
 = 
EMBEDDED_LISTEN_FAILED
;

101 
CÀ™up
;

104 
	`¥ötf
("Waiting for connections...\n");

105 
TRUE
) {

106 
embedded__˛õ¡_sockë_g
 = 
	`ac˚±
(
embedded__£rvî_sockë_g
,

107 (
sockaddr
 * 
ª°ri˘
)&
˛õ¡_addr
,

108 &
˛õ¡_size
);

109 i‡(-1 =
embedded__˛õ¡_sockë_g
) {

110 
rc
 = 
EMBEDDED_ACCEPT_FAILED
;

111 
CÀ™up
;

114 
	`¥ötf
("Connection has beenáccepted.\n");

115 
commîcül_rc
 = 
	`£tsock›t
(
embedded__˛õ¡_sockë_g
,

116 
IPPROTO_TCP
,

117 
TCP_NODELAY
,

118 &
no_dñay_vÆue
,

119 (
no_dñay_vÆue
));

120 i‡(-1 =
commîcül_rc
) {

121 
rc
 = 
EMBEDDED_SETSOCKOPT_CLIENT_FAILED
;

122 
CÀ™up
;

125 
rc
 = 
	`CE_SERVER__h™dÀ_c⁄√˘i⁄
();

126 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
CÀ™up
);

129 
CÀ™up
:

131 
	`˛o£
(
embedded__£rvî_sockë_g
);

133 
Exô
:

134  
rc
;

135 
	}
}

137 
	$maö
(
¨gc
, **
¨gv
)

141  
	`EMBEDDED__maö
();

142 
	}
}

145 
EMBEDDED__rc_t
 
	$EMBEDDED__gë_¥o˚ss_li°
(
Pro˚ssLi°
 *
¥o˚ss_li°
)

147 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

148 
DIR
 *
¥oc_fﬁdî
 = 
NULL
;

149 
dúít
 *
cuºít_fûe
 = 
NULL
;

150 
pid
;

151 
exe_∑th
[266];

152 
¥o˚ss_∑th
[512];

153 
uöt32_t
 
i
 = -1;

154 
exåa_fûe
[270];

155 
f
;

158 
¥oc_fﬁdî
 = 
	`›ídú
("/proc/");

161 
cuºít_fûe
 = 
	`ªaddú
(
¥oc_fﬁdî
);

162 
NULL
 !
cuºít_fûe
) {

163 i‡(
	`°r•n
(
cuºít_fûe
->
d_«me
, "1234567890"Ë!
	`°æí
(current_file->d_name))

165 
cuºít_fûe
 = 
	`ªaddú
(
¥oc_fﬁdî
);

169 
	`¢¥ötf
(
exe_∑th
, 200, "/¥oc/%s/exe", 
cuºít_fûe
->
d_«me
);

170 
exe_∑th
[199] = 0;

173 
i
 = 
	`ªadlök
(
exe_∑th
, 
¥o˚ss_∑th
, 254);

174 i‡(
i
 == -1)

176 
cuºít_fûe
 = 
	`ªaddú
(
¥oc_fﬁdî
);

180 i‡(
i
 > 254) {

181 
i
 = 254;

184 
¥o˚ss_∑th
[
i
] = 0;

186 
	`¢¥ötf
(
exåa_fûe
, 255, "/¥oc/%s/cmdlöe", 
cuºít_fûe
->
d_«me
);

187 
exåa_fûe
[254] = 0;

190 
f
 = 
	`›í
(
exåa_fûe
, 
O_RDONLY
);

191 i‡(
f
 != -1)

193 
i
 = 
	`ªad
(
f
, 
exåa_fûe
, 255);

194 i‡(
i
 >= 0) {

195 
exåa_fûe
[
i
] = 0;

198 
exåa_fûe
[0] = 0;

201 
	`°rˇt
(
¥o˚ss_∑th
, " ");

202 
	`°rˇt
(
¥o˚ss_∑th
, 
exåa_fûe
);

204 
	`˛o£
(
f
);

207 
	`ssˇnf
(
cuºít_fûe
->
d_«me
, "%d", &
pid
);

211 
¥o˚ss_li°
->
¥o˚ssLi°
[¥o˚ss_li°->
¥o˚ssCou¡
].
PID
=
pid
;

212 
¥o˚ss_li°
->
¥o˚ssLi°
[¥o˚ss_li°->
¥o˚ssCou¡
].
Pro˚ssName
=
	`°rdup
(
¥o˚ss_∑th
);

214 
¥o˚ss_li°
->
¥o˚ssCou¡
++;

216 i‡(
¥o˚ss_li°
->
¥o˚ssCou¡
 >
CE_SERVER_MAX_PROCESS_AMOUNT
)

218 
rc
 = 
EMBEDDED_PROCESSES_AMOUNT_EXCEEDED_MAX
;

219 
Exô
;

223 
cuºít_fûe
 = 
	`ªaddú
(
¥oc_fﬁdî
);

227 
	`˛o£dú
(
¥oc_fﬁdî
);

229 
rc
 = 
EMBEDDED_SUCCESS
;

231 
Exô
:

232  
rc
;

233 
	}
}

	@embedded.c

1 
	~<°döt.h
>

3 
	$EMBEDDED__log
(*
mesßge
)

6 
	}
}

	@embedded.h

1 #i‚de‡
EMBEDDED_H


2 
	#EMBEDDED_H


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

6 
	~<dúít.h
>

7 
	~<°rög.h
>

8 
	~<°dio.h
>

10 
	~"≠i.h
"

12 
	#ON_EMBEDDED_ERROR_GOTO
(
__rc
, 
__œbñ
) \

14 i‡(
EMBEDDED_SUCCESS
 !
__rc
) { \

15 
__œbñ
; \

17 } 
FALSE
)

	)

20 
	mEMBEDDED_SUCCESS
 = 0,

21 
	mEMBEDDED_UNINITIALIZED
,

25 
	mEMBEDDED_CREATE_SOCKET_FAILED
,

26 
	mEMBEDDED_BIND_FAILED
,

27 
	mEMBEDDED_LISTEN_FAILED
,

28 
	mEMBEDDED_ACCEPT_FAILED
,

29 
	mEMBEDDED_SETSOCKOPT_FAILED
,

30 
	mEMBEDDED_SETSOCKOPT_CLIENT_FAILED
,

31 
	mEMBEDDED_RECV_FAILED
,

32 
	mEMBEDDED_SEND_FAILED
,

33 
	mEMBEDDED_BAD_COMMAND_ID
,

34 
	mEMBEDDED_PROCESSES_AMOUNT_EXCEEDED_MAX
,

35 } 
	tEMBEDDED__rc_t
;

38 
EMBEDDED__log
(*
mesßge
);

41 
EMBEDDED__rc_t
 
EMBEDDED__maö
();

44 
EMBEDDED__rc_t
 
EMBEDDED__£nd
(*
buf„r
, 
uöt32_t
 
buf„r_size
, uöt32_à*
£¡_size
);

45 
EMBEDDED__rc_t
 
EMBEDDED__ªcv
(*
buf„r
, 
uöt32_t
 
max_buf„r_size
, uöt32_à*
ª˚ived_size
);

48 
EMBEDDED__rc_t
 
EMBEDDED__gë_¥o˚ss_li°
(
Pro˚ssLi°
 *
¥o˚ss_li°
);

	@extensionfunctions.c

9 
	~<°dio.h
>

10 
	~<±hªad.h
>

11 
	~<°rög.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sockë.h
>

16 
	~"exãnsi⁄lﬂdî.h
"

17 
	~"exãnsi⁄fun˘i⁄s.h
"

18 
	~"≠i.h
"

22 
	$ext_•ìdhack_£tS≥ed
(
HANDLE
 
hPro˚ss
, 
•ìd
)

24 
uöt32_t
 
ªsu…
=0;

26 
	`¥ötf
("ext_•ìdhack_£tS≥ed(%d, %f)\n", 
hPro˚ss
, 
•ìd
);

28 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

30 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

32 #¥agm®
	`∑ck
(1)

34 
uöt8_t
 
comm™d
;

35 
•ìd
;

36 } 
•ìdhackSëS≥edComm™d
;

37 #¥agm®
	`∑ck
()

39 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

41 
	`¥ötf
("hasLoadedExtension == FALSE");

42 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

44 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

50 
•ìdhackSëS≥edComm™d
.
comm™d
=
EXTCMD_SPEEDHACK_SETSPEED
;

51 
•ìdhackSëS≥edComm™d
.
•ìd
=speed;

53 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

55 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
•ìdhackSëS≥edComm™d
, (speedhackSetSpeedCommand), 0)>0)

56 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

58 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

62  
ªsu…
;

63 
	}
}

65 
uöt64_t
 
	$ext_lﬂdModuÀ
(
HANDLE
 
hPro˚ss
, *
moduÀ∑th
)

67 
uöt64_t
 
ªsu…
=0;

68 
	`¥ötf
("ext_lﬂdModuÀ(%d, \"%s\"\n", 
hPro˚ss
, 
moduÀ∑th
);

70 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

72 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

74 #¥agm®
	`∑ck
(1)

76 
uöt8_t
 
comm™d
;

77 
uöt32_t
 
moduÀ∑thÀngth
;

78 } 
lﬂdModuÀComm™d
;

79 #¥agm®
	`∑ck
()

81 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

83 
	`¥ötf
("hasLoadedExtension == FALSE");

84 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

86 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

91 
lﬂdModuÀComm™d
.
comm™d
=
EXTCMD_LOADMODULE
;

92 
lﬂdModuÀComm™d
.
moduÀ∑thÀngth
=
	`°æí
(
moduÀ∑th
);

94 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

96 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
lﬂdModuÀComm™d
, ÷ﬂdModuÀComm™d), 
MSG_MORE
)>0)

98 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, 
moduÀ∑th
, 
lﬂdModuÀComm™d
.
moduÀ∑thÀngth
, 0)>0)

100 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

104 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

109  
ªsu…
;

110 
	}
}

113 
uöt64_t
 
	$ext_¸óãThªad
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
°¨èddªss
, uöt64_à
∑ømëî
)

115 
uöt64_t
 
ªsu…
=0;

116 
	`¥ötf
("ext_¸óãThªad(%d, %lx, %lx\n", 
hPro˚ss
, 
°¨èddªss
, 
∑ømëî
);

118 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

120 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

122 #¥agm®
	`∑ck
(1)

124 
uöt8_t
 
comm™d
;

125 
uöt64_t
 
°¨èddªss
;

126 
uöt64_t
 
∑ømëî
;

127 } 
¸óãThªadComm™d
;

128 #¥agm®
	`∑ck
()

130 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

132 
	`¥ötf
("hasLoadedExtension == FALSE");

133 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

135 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

140 
¸óãThªadComm™d
.
comm™d
=
EXTCMD_CREATETHREAD
;

141 
¸óãThªadComm™d
.
°¨èddªss
=startaddress;

142 
¸óãThªadComm™d
.
∑ømëî
=parameter;

144 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

146 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
¸óãThªadComm™d
, (createThreadCommand), 0)>0)

147 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

149 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

154  
ªsu…
;

155 
	}
}

157 
	$ext_‰ì
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
addªss
, 
size
)

159 
uöt32_t
 
ªsu…
=0;

161 
	`¥ötf
("ext_‰ì(%d, %lx, %d)\n", 
hPro˚ss
, 
addªss
, 
size
);

163 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

165 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

167 #¥agm®
	`∑ck
(1)

169 
uöt8_t
 
comm™d
;

170 
uöt64_t
 
addªss
;

171 
uöt32_t
 
size
;

172 } 
‰ìComm™d
;

173 #¥agm®
	`∑ck
()

175 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

177 
	`¥ötf
("hasLoadedExtension == FALSE");

178 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

180 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

186 
‰ìComm™d
.
comm™d
=
EXTCMD_FREE
;

187 
‰ìComm™d
.
addªss
=address;

188 
‰ìComm™d
.
size
=size;

190 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

192 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
‰ìComm™d
, (freeCommand), 0)>0)

193 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

195 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

199  
ªsu…
;

200 
	}
}

202 
uöt64_t
 
	$ext_Æloc
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
¥e„ªdBa£
, 
size
)

204 
uöt64_t
 
ªsu…
=0;

205 
	`¥ötf
("ext_Æloc(%d, %Œx, %d)\n", 
hPro˚ss
, 
¥e„ªdBa£
, 
size
);

207 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

209 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

211 #¥agm®
	`∑ck
(1)

213 
uöt8_t
 
comm™d
;

214 
uöt64_t
 
¥e„ªdAddªss
;

215 
uöt32_t
 
size
;

216 } 
ÆlocComm™d
;

217 #¥agm®
	`∑ck
()

219 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

221 
	`¥ötf
("hasLoadedExtension == FALSE");

222 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

224 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

230 
ÆlocComm™d
.
comm™d
=
EXTCMD_ALLOC
;

231 
ÆlocComm™d
.
¥e„ªdAddªss
=
¥e„ªdBa£
;

232 
ÆlocComm™d
.
size
=size;

234 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

236 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
ÆlocComm™d
, (allocCommand), 0)>0)

237 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

239 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

241 
	`¥ötf
("Rëu∫ed fromÉxãnsi⁄ wôhÑesu… %Œx\n", 
ªsu…
);

246  
ªsu…
;

247 
	}
}

	@extensionfunctions.h

8 #i‚de‡
EXTENSIONFUNCTIONS_H_


9 
	#EXTENSIONFUNCTIONS_H_


	)

11 
	~<°döt.h
>

12 
	~"˚£rvî.h
"

13 
	~"p‹thñp.h
"

15 
	#EXTCMD_ALLOC
 0

	)

16 
	#EXTCMD_FREE
 1

	)

17 
	#EXTCMD_CREATETHREAD
 2

	)

18 
	#EXTCMD_LOADMODULE
 3

	)

19 
	#EXTCMD_SPEEDHACK_SETSPEED
 4

	)

23 
uöt64_t
 
ext_Æloc
(
HANDLE
 
hPro˚ss
, uöt64_à
¥e„ªdBa£
, 
size
);

24 
ext_‰ì
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
addªss
, 
size
);

25 
uöt64_t
 
ext_¸óãThªad
(
HANDLE
 
hPro˚ss
, uöt64_à
°¨èddªss
, uöt64_à
∑ømëî
);

26 
ext_•ìdhack_£tS≥ed
(
HANDLE
 
hPro˚ss
, 
•ìd
);

	@extensionloader.c

47 
	~<°dio.h
>

48 
	~<sys/waô.h
>

49 
	~<sys/±ø˚.h
>

51 
	~<î∫o.h
>

52 
	~<°döt.h
>

53 
	~<°rög.h
>

55 #ifde‡
HAS_LINUX_USER_H


56 
	~<löux/u£r.h
>

58 
	~<sys/u£r.h
>

61 
	~<dlf˙.h
>

63 
	~<sys/ty≥s.h
>

64 
	~<sys/sockë.h
>

65 
	~<sys/un.h
>

66 
	~<uni°d.h
>

67 
	~<libgí.h
>

69 #ifde‡
__Ørch64__


70 
	~<ñf.h
>

73 
	~"p‹thñp.h
"

74 
	~"≠i.h
"

75 
	~"˚£rvî.h
"

77 #i‚de‡
SUN_LEN


80 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

81 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

86 
	$WaôF‹Pid
()

88 
°©us
;

89 
pid
=-1;

90 
pid
==-1)

92 
pid
=
	`waôpid
(-1, &
°©us
, 
__WALL
);

93 i‡((
pid
==-1Ë&& (
î∫o
!=
EINTR
))

95 
	`¥ötf
("LﬂdExãnsi⁄ waô faû. :%d\n", 
î∫o
);

99  
pid
;

100 
	}
}

102 
	$showRegi°îs
(
pid
)

104 #ifde‡
__Ørch64__


105 
u£r_±_ªgs
 
ªgs
;

107 #ifde‡
__¨m__


108 
±_ªgs
 
r
;

110 
u£r_ªgs_°ru˘
 
r
;

146 
	}
}

148 
uöçå_t
 
	$föddl›í
(
pid
)

150 *
libdl
;

151 *
ªÆdl›í
;

152 
libdl
=
	`dl›í
("libdl.so", 
RTLD_NOW
);

154 
	`¥ötf
("libdl=%p\n", 
libdl
);

156 
ªÆdl›í
=
	`dlsym
(
libdl
,"dlopen");

157 
	`¥ötf
("dl›í=%p\n", 
dl›í
);

158 
	`¥ötf
("ªÆdl›í=%p\n", 
ªÆdl›í
);

159 #i‚de‡
__¨m__


160 i‡(
dl›í
==
ªÆdl›í
)

161 
	`¥ötf
("PleaseÅell db what you didÅo getÅhisÅo function (excluding manuallyÉditingÅhis if statement)\n");

167 
FILE
 *
m≠s
=
	`f›í
("/proc/self/maps", "r");

169 
x
[200];

170 
cuºítmoduÀ
[256];

171 
moduÀ∑th
[256];

173 
cuºítmoduÀ°¨t
;

175 
cuºítmoduÀ
[0]=0;

178 
	`fgës
(
x
, 200, 
m≠s
))

180 
°¨t
;

181 
°›
;

182 
	`¥ötf
("%s", 
x
);

184 
	`ssˇnf
(
x
, "%Œx-%Œx %*†%*†%*†%*†%s\n", &
°¨t
, &
°›
, 
moduÀ∑th
);

186 i‡(
	`°rcmp
(
moduÀ∑th
, 
cuºítmoduÀ
)!=0)

188 
	`°r˝y
(
cuºítmoduÀ
, 
moduÀ∑th
);

189 
cuºítmoduÀ°¨t
=
°¨t
;

193 (((
uöçå_t
)
ªÆdl›í
)>=
°¨t
) &&

194 (((
uöçå_t
)
ªÆdl›í
)<
°›
)

197 
off£t
=(
uöçå_t
)
ªÆdl›í
-
cuºítmoduÀ°¨t
;

198 
m≠sfûíame
[255];

199 
	`¥ötf
("found it. ModuÀ: %†Off£t=%x\n", 
cuºítmoduÀ
, 
off£t
);

202 
	`•rötf
(
m≠sfûíame
, "/¥oc/%d/m≠s", 
pid
);

203 
FILE
 *
m≠s2
=
	`f›í
(
m≠sfûíame
, "r");

204 i‡(
m≠s2
)

206 
y
[200];

207 
	`fgës
(
y
, 200, 
m≠s2
))

209 i‡(
y
[
	`°æí
(y)-1]!='\n')

213 
disˇrd
[100];

217 
disˇrd
[99]=0;

218 
	`fgës
(
disˇrd
, 99, 
m≠s
);

219 } 
disˇrd
[99]!=0);

223 
	`¥ötf
("%s", 
y
);

225 
moduÀ∑th
[0]='\0';

226 
	`ssˇnf
(
y
, "%Œx-%Œx %*†%*†%*†%*†%s\n", &
°¨t
, &
°›
, 
moduÀ∑th
);

228 
	`¥ötf
("Check i‡'%s' ='%s'\n", 
moduÀ∑th
, 
cuºítmoduÀ
);

229 i‡(
	`°rcmp
(
moduÀ∑th
, 
cuºítmoduÀ
)==0)

231 
	`¥ötf
("foundÅhe module inÅheÅargetÖrocess\n");

232 
	`f˛o£
(
m≠s
);

233 
	`f˛o£
(
m≠s2
);

234  
°¨t
+
off£t
;

237 
	`f˛o£
(
m≠s2
);

242 
	`¥ötf
("FaûuªÅÿ›í %s\n", 
m≠sfûíame
);

246 
	`f˛o£
(
m≠s
);

249 
	`¥ötf
("Nope\n");

253 
	`f˛o£
(
m≠s
);

254 
	}
}

256 
	$wrôeSåög
(
pid
, 
uöçå_t
 
addªss
, *
°rög
)

258 
l
=
	`°æí
(
°rög
)+1;

259 *
p
;

260 
v
;

261 
i
;

262 
bs
;

263 
i
=0;

265 
	`¥ötf
("l=%d\n", 
l
);

268 
i
<
l
)

270 
p
=(*)&
°rög
[
i
];

271 i‡((
l
-
i
)<())

273 
bs
=();

274 
v
=*
p
;

278 
v
=
°rög
[
i
];

279 
bs
=1;

282 
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
addªss
+
i
, 
v
);

283 
i
+=
bs
;

285 
	}
}

287 
	$›íExãnsi⁄
(
pid
, *
›íedSockë
)

289 
i
;

290 
s
;

291 
Æ
;

292 
«me
[256];

293 
s
=
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

294 
	`¥ötf
("s=%d\n", 
s
);

296 
	`•rötf
(
«me
, " ce£rvî_exãnsi⁄%d", 
pid
);

298 
sockaddr_un
 
addªss
;

299 
addªss
.
sun_Ámûy
=
AF_UNIX
;

300 
	`°r˝y
(
addªss
.
sun_∑th
, 
«me
);

302 
Æ
=
	`SUN_LEN
(&
addªss
);

304 
addªss
.
sun_∑th
[0]=0;

305 
i
=
	`c⁄√˘
(
s
, (
sockaddr
 *)&
addªss
, 
Æ
);

307 i‡(
i
==0)

309 
	`¥ötf
("Successful connection\n");

310 *
›íedSockë
=
s
;

315 
	`˛o£
(
s
);

318 
	}
}

320 
	$isExãnsi⁄Lﬂded
(
pid
)

322 
s
;

323 
ªsu…
=
	`›íExãnsi⁄
(
pid
, &
s
);

325 i‡(
ªsu…
)

326 
	`˛o£
(
s
);

328  
ªsu…
;

329 
	}
}

331 
	$lﬂdExãnsi⁄
(
pid
, *
∑th
, 
isBeögDebugged
)

334 
uöçå_t
 
dl›í
;

335 
uöçå_t
 
°r
;

336 
°©us
;

337 
∑thÀn
=
	`°æí
(
∑th
)+1;

339 
	`¥ötf
("lﬂdExãnsi⁄(%d, %s, %d)\n", 
pid
, 
∑th
, 
isBeögDebugged
);

341 
	`¥ötf
("Phase 0: Check if it'sálready open\n");

342 i‡(
	`isExãnsi⁄Lﬂded
(
pid
))

344 
	`¥ötf
("AlreadyÜoaded\n");

345  
TRUE
;

348 
	`¥ötf
("Not yetÜoaded\n");

352 
	`¥ötf
("Phase 1: Find dlopen inÅarget\n");

354 
dl›í
=
	`föddl›í
(
pid
);

355 
	`¥ötf
("dl›í=%p\n", (*)
dl›í
);

357 i‡(!
isBeögDebugged
)

359 
	`±ø˚
(
PTRACE_ATTACH
, 
pid
, 0,0);

361 
pid
=
	`WaôF‹Pid
();

362 
	`¥ötf
("A·î waô. PID=%d\n", 
pid
);

363 
	`±ø˚
(
PTRACE_CONT
,
pid
,0,0);

366 
	`¥ötf
("KûlögÖid %d\n", 
pid
);

367 
e
=
	`kûl
(
pid
, 
SIGSTOP
);

369 
	`¥ötf
("kû»ªtu∫ed %d\n", 
e
);

370 
	`¥ötf
("Waiting...\n");

371 
pid
=
	`WaôF‹Pid
();

374 
	`showRegi°îs
(
pid
);

378 
	`¥ötf
("A·î waô 2. PID=%d\n", 
pid
);

384 #ifde‡
__i386__


385 
±_ªgs
 
‹igªgs
;

386 
±_ªgs
 
√wªgs
;

389 #ifde‡
__x86_64__


390 
u£r_ªgs_°ru˘
 
‹igªgs
;

391 
u£r_ªgs_°ru˘
 
√wªgs
;

395 #ifde‡
__¨m__


396 
±_ªgs
 
‹igªgs
;

397 
±_ªgs
 
√wªgs
;

401 #ifde‡
__Ørch64__


402 
u£r_±_ªgs
 
‹igªgs
;

403 
u£r_±_ªgs
 
√wªgs
;

404 
iovec
 
iov
;

407 #ifde‡
__Ørch64__


408 
iov
.
iov_ba£
=&
√wªgs
;

409 
iov
.
iov_Àn
=(
√wªgs
);

410 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

412 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

415 
	`¥ötf
("PTRACE_GETREGS FAILED\n");

416 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

418  
FALSE
;

421 #ifde‡
__Ørch64__


422 
iov
.
iov_ba£
=&
‹igªgs
;

423 
iov
.
iov_Àn
=(
‹igªgs
);

424 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

426 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
‹igªgs
)!=0)

429 
	`¥ötf
("PTRACE_GETREGS FAILED 2\n");

430 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

432  
FALSE
;

437 
uöçå_t
 
ªtu∫addªss
=0x0ce0;

440 #ifde‡
__¨m__


443 
√wªgs
.
ARM_•
-=8+4*((
∑thÀn
+3)/ 4);

446 
°r
=
√wªgs
.
ARM_•
+4;

447 
	`wrôeSåög
(
pid
, 
°r
, 
∑th
);

449 
√wªgs
.
ARM_Ã
=
ªtu∫addªss
;

450 
√wªgs
.
ARM_pc
=
dl›í
;

451 
√wªgs
.
ARM_r0
=
°r
;

452 
√wªgs
.
ARM_r1
=
RTLD_NOW
;

454 i‡(
√wªgs
.
ARM_pc
 & 1)

457 
	`¥ötf
("THUMB destination\n");

458 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr | (1 << 5);

462 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<25));

468 
	`¥ötf
("ARM destination\n");

469 
	`¥ötf
("√wªgs.ARM_˝§ wa†%x\n", 
√wªgs
.
ARM_˝§
);

470 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<5));

471 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<25));

472 
	`¥ötf
("√wªgs.ARM_˝§ i†%x\n", 
√wªgs
.
ARM_˝§
);

475 
	`¥ötf
("r0=%lx\n", 
‹igªgs
.
ARM_r0
);

476 
	`¥ötf
("‹ig_r0=%lx\n", 
‹igªgs
.
ARM_ORIG_r0
);

477 
	`¥ötf
("pc=%lx\n", 
‹igªgs
.
ARM_pc
);

478 
	`¥ötf
("˝§=%lx\n", 
‹igªgs
.
ARM_˝§
);

482 #ifde‡
__Ørch64__


483 
	`¥ötf
("extensionloader isÇot implemented yet foráarch64\n");

484  
FALSE
;

487 #ifde‡
__x86_64__


488 
	`¥ötf
("øx=%lx\n", 
‹igªgs
.
øx
);

489 
	`¥ötf
("rbp=%lx\n", 
‹igªgs
.
rbp
);

490 
	`¥ötf
("r•=%lx\n", 
‹igªgs
.
r•
);

491 
	`¥ötf
("‹ig_øx=%lx\n", 
‹igªgs
.
‹ig_øx
);

492 
	`¥ötf
("rù=%lx\n", 
‹igªgs
.
rù
);

497 
√wªgs
.
r•
Úewªgs.r•-0x28-(8*((
∑thÀn
+7) / 8));

500 i‡((
√wªgs
.
r•
 & 0xf)!=8)

502 
	`¥ötf
("Alignög sèck. Wa†%Œx", 
√wªgs
.
r•
);

503 
√wªgs
.
r•
-=8;

504 
√wªgs
.
r•
&=~(0xf);

506 
√wªgs
.
r•
=newregs.rsp | 8;

508 
	`¥ötf
(" i†now %Œx\n", 
√wªgs
.
r•
);

512 
	`¥ötf
("Wrôög 0x0˚0Åÿ%lx\n", 
√wªgs
.
r•
);

513 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
, 
ªtu∫addªss
)!=0)

515 
	`¥ötf
("FailedÅo writeÑeturnáddress\n");

516 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

518  
FALSE
;

521 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
-8, 
ªtu∫addªss
)!=0)

523 
	`¥ötf
("Fuck\n");

524 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

526  
FALSE
;

529 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
+8, 
ªtu∫addªss
)!=0)

531 
	`¥ötf
("Fuck\n");

532 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

534  
FALSE
;

540 
°r
=
√wªgs
.
r•
+0x18;

541 
	`wrôeSåög
(
pid
, 
°r
, 
∑th
);

543 
	`¥ötf
("°r=%p\n", (*)
°r
);

547 
ªtu∫addªss
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
pid
, 
√wªgs
.
r•
, 0);

548 
	`¥ötf
("[%lx]=%lx", 
√wªgs
.
r•
, 
ªtu∫addªss
);

551 
√wªgs
.
rù
=
dl›í
;

552 
√wªgs
.
øx
=0;

553 
√wªgs
.
rdi
=
°r
;

554 
√wªgs
.
rsi
=
RTLD_NOW
;

555 
√wªgs
.
‹ig_øx
=0;

558 #ifde‡
__i386__


559 
	`¥ötf
("óx=%lx\n", 
‹igªgs
.
óx
);

560 
	`¥ötf
("ebp=%lx\n", 
‹igªgs
.
ebp
);

561 
	`¥ötf
("e•=%lx\n", 
‹igªgs
.
e•
);

562 
	`¥ötf
("‹ig_óx=%lx\n", 
‹igªgs
.
‹ig_óx
);

563 
	`¥ötf
("eù=%lx\n", 
‹igªgs
.
eù
);

566 
√wªgs
.
e•
Úewªgs.e•-0x28-(8*((
∑thÀn
+7) / 8));

567 i‡((
√wªgs
.
e•
 & 0xf)!=8)

569 
	`¥ötf
("Alignög sèck. Wa†%Œx", 
√wªgs
.
e•
);

570 
√wªgs
.
e•
-=8;

571 
√wªgs
.
e•
&=~(0xf);

573 
√wªgs
.
e•
=newregs.esp | 8;

575 
	`¥ötf
(" i†now %Œx\n", 
√wªgs
.
e•
);

587 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+0, 
ªtu∫addªss
)!=0)

589 
	`¥ötf
("Fuck\n");

590 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

592  
FALSE
;

595 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+4,Çewregs.esp+12)!=0)

597 
	`¥ötf
("Fuck2\n");

598 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

600  
FALSE
;

603 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+8, 
RTLD_NOW
)!=0)

605 
	`¥ötf
("Fuck3\n");

606 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

608  
FALSE
;

611 
	`wrôeSåög
(
pid
, 
√wªgs
.
e•
+12, 
∑th
);

613 
√wªgs
.
eù
=
dl›í
;

614 
√wªgs
.
‹ig_óx
=0;

617 #ifde‡
__Ørch64__


618 
iov
.
iov_ba£
=&
√wªgs
;

619 
iov
.
iov_Àn
=(
√wªgs
);

620 i‡(
	`±ø˚
(
PTRACE_SETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

622 i‡(
	`±ø˚
(
PTRACE_SETREGS
, 
pid
, 0, &
√wªgs
)!=0)

625 
	`¥ötf
("PTRACE_SETREGS FAILED\n");

626 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

628  
FALSE
;

631 #ifde‡
__Ørch64__


632 
iov
.
iov_ba£
=&
√wªgs
;

633 
iov
.
iov_Àn
=(
√wªgs
);

634 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

636 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

639 
	`¥ötf
("PTRACE_GETREGS FAILED 4\n");

640 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

642  
FALSE
;

645 
	`¥ötf
("after setregs:\n");

647 #ifde‡
__¨m__


648 
	`¥ötf
("r0=%lx\n", 
√wªgs
.
ARM_r0
);

649 
	`¥ötf
("‹ig_r0=%lx\n", 
√wªgs
.
ARM_ORIG_r0
);

650 
	`¥ötf
("pc=%lx\n", 
√wªgs
.
ARM_pc
);

651 
	`¥ötf
("˝§=%lx\n", 
√wªgs
.
ARM_˝§
);

654 #ifde‡
__x86_64__


655 
	`¥ötf
("øx=%lx\n", 
√wªgs
.
øx
);

656 
	`¥ötf
("rdi=%lx\n", 
√wªgs
.
rdi
);

657 
	`¥ötf
("rsi=%lx\n", 
√wªgs
.
rsi
);

658 
	`¥ötf
("rbp=%lx\n", 
√wªgs
.
rbp
);

659 
	`¥ötf
("r•=%lx\n", 
√wªgs
.
r•
);

660 
	`¥ötf
("‹ig_øx=%lx\n", 
√wªgs
.
‹ig_øx
);

661 
	`¥ötf
("rù=%lx\n", 
√wªgs
.
rù
);

664 #ifde‡
__i386__


665 
	`¥ötf
("óx=%lx\n", 
√wªgs
.
óx
);

666 
	`¥ötf
("edi=%lx\n", 
√wªgs
.
edi
);

667 
	`¥ötf
("esi=%lx\n", 
√wªgs
.
esi
);

668 
	`¥ötf
("ebp=%lx\n", 
√wªgs
.
ebp
);

669 
	`¥ötf
("e•=%lx\n", 
√wªgs
.
e•
);

670 
	`¥ötf
("‹ig_óx=%lx\n", 
√wªgs
.
‹ig_óx
);

671 
	`¥ötf
("eù=%lx\n", 
√wªgs
.
eù
);

674 
	`¥ötf
("\n\nContinuingÅhread\n");

677 
±r
;

678 
±r
=
	`±ø˚
(
PTRACE_CONT
,
pid
,(*)0,(*)
SIGCONT
);

680 
	`¥ötf
("PRACE_CONT=%d\n", 
±r
);

681 i‡(
±r
!=0)

683 
	`¥ötf
("PTRACE_CONT FAILED\n");

689 
pid
=-1;

690 
pid
==-1)

692 
pid
=
	`waôpid
(-1, &
°©us
, 
WUNTRACED
| 
__WALL
);

694 i‡((
pid
==-1Ë&& (
î∫o
!=
EINTR
))

696 
	`¥ötf
("LﬂdExãnsi⁄ waô faû. :%d\n", 
î∫o
);

698  
FALSE
;

701 i‡(
pid
==0)

702 
pid
=-1;

703 
	`¥ötf
(".");

706 
	`¥ötf
("a·î waô:Öid=%d (°©us=%x)\n", 
pid
, 
°©us
);

708 
sigöfo_t
 
si
;

709 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
pid
, 
NULL
, &
si
)!=0)

711 
	`¥ötf
("GETSIGINFO FAILED\n");

712 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

714  
FALSE
;

717 
	`¥ötf
("si.si_signo=%d\n", 
si
.
si_signo
);

721 #ifde‡
__Ørch64__


722 
iov
.
iov_ba£
=&
√wªgs
;

723 
iov
.
iov_Àn
=(
√wªgs
);

724 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

726 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

729 
	`¥ötf
("PTRACE_GETREGS FAILED (2)\n");

730 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

732  
FALSE
;

735 #ifde‡
__¨m__


736 
	`¥ötf
("r0=%lx\n", 
√wªgs
.
ARM_r0
);

737 
	`¥ötf
("‹ig_r0=%lx\n", 
√wªgs
.
ARM_ORIG_r0
);

738 
	`¥ötf
("pc=%lx\n", 
√wªgs
.
ARM_pc
);

739 
	`¥ötf
("•=%lx\n", 
√wªgs
.
ARM_•
);

740 
	`¥ötf
("˝§=%lx\n", 
√wªgs
.
ARM_˝§
);

743 #ifde‡
__x86_64__


744 
	`¥ötf
("øx=%lx\n", 
√wªgs
.
øx
);

745 
	`¥ötf
("rdi=%lx\n", 
√wªgs
.
rdi
);

746 
	`¥ötf
("rsi=%lx\n", 
√wªgs
.
rsi
);

747 
	`¥ötf
("rbp=%lx\n", 
√wªgs
.
rbp
);

748 
	`¥ötf
("r•=%lx\n", 
√wªgs
.
r•
);

749 
	`¥ötf
("‹ig_øx=%lx\n", 
√wªgs
.
øx
);

750 
	`¥ötf
("rù=%lx\n", 
√wªgs
.
rù
);

753 #ifde‡
__i386__


754 
	`¥ötf
("óx=%lx\n", 
√wªgs
.
óx
);

755 
	`¥ötf
("edi=%lx\n", 
√wªgs
.
edi
);

756 
	`¥ötf
("esi=%lx\n", 
√wªgs
.
esi
);

757 
	`¥ötf
("ebp=%lx\n", 
√wªgs
.
ebp
);

758 
	`¥ötf
("e•=%lx\n", 
√wªgs
.
e•
);

759 
	`¥ötf
("‹ig_óx=%lx\n", 
√wªgs
.
óx
);

760 
	`¥ötf
("eù=%lx\n", 
√wªgs
.
eù
);

764 #ifde‡
__Ørch64__


765 
iov
.
iov_ba£
=&
‹igªgs
;

766 
iov
.
iov_Àn
=(
‹igªgs
);

767 i‡(
	`±ø˚
(
PTRACE_SETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

769 i‡(
	`±ø˚
(
PTRACE_SETREGS
, 
pid
, 0, &
‹igªgs
)!=0)

772 
	`¥ötf
("PTRACE_SETREGS FAILED (20\n");

775 i‡(!
isBeögDebugged
)

777 
	`¥ötf
("Detaching\n");

778 i‡(
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0)!=0)

779 
	`¥ötf
("PTRACE_DETACH FAILED\n");

783 i‡(
	`±ø˚
(
PTRACE_CONT
,
pid
,(*)0,(*)
SIGCONT
)!=0)

784 
	`¥ötf
("PTRACE_CONT failed\n");

788 
	`¥ötf
("End...\n");

790 
	}
}

792 
	$lﬂdCESîvîExãnsi⁄
(
HANDLE
 
hPro˚ss
)

794 
	`¥ötf
("loadCEServerExtension\n");

795 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

797 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

800 i‡(
p
->
isDebugged
)

802 
	`¥ötf
("thisÖrocess id being debugged\n");

804 i‡(
p
->
debuggîThªadID
!=
	`±hªad_£lf
())

806 
	`¥ötf
("NotÅhe debuggerÅhread. Switching...\n");

808 
ªsu…
=0;

809 #¥agm®
	`∑ck
(1)

812 
uöt8_t
 
comm™d
;

813 
uöt32_t
 
pH™dÀ
;

814 } 
lx
;

815 #¥agm®
	`∑ck
()

817 
lx
.
comm™d
=
CMD_LOADEXTENSION
;

818 
lx
.
pH™dÀ
=
hPro˚ss
;

819 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

821 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
lx
, (lx), 0);

822 
	`WakeDebuggîThªad
();

824 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

825 
	`¥ötf
("Rëu∫ed from debuggîÅhªad. Resu…:%d\n", 
ªsu…
);

827 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

830  
ªsu…
;

833 
	`¥ötf
("This isÅhe debuggerÅhread\n");

838 i‡(
p
->
hasLﬂdedExãnsi⁄
==0)

840 
moduÀ∑th
[256], 
moduÀ∑th2
[256];

841 
l
;

843 
	`mem£t
(
moduÀ∑th
, 0, 256);

844 
	`mem£t
(
moduÀ∑th2
, 0, 256);

846 *
mp
;

849 
l
=
	`ªadlök
("/¥oc/£lf/exe", 
moduÀ∑th2
, 256);

851 i‡(
l
!=-1)

853 
moduÀ∑th2
[
l
]=0;

854 
	`¥ötf
("moduÀ∑th2=%s\n", 
moduÀ∑th2
);

855 
	`ssˇnf
(
moduÀ∑th2
,"%s", 
moduÀ∑th
);

857 
	`¥ötf
("moduÀ∑th=%s\n", 
moduÀ∑th
);

858 
mp
=
	`dú«me
(
moduÀ∑th
);

860 
	`¥ötf
("a·î dú«me: %s\n", 
mp
);

861 
	`°r˝y
(
moduÀ∑th
, 
mp
);

862 
	`°rˇt
(
moduÀ∑th
, "/libceserver-extension");

864 #ifde‡
__i386__


865 
	`°rˇt
(
moduÀ∑th
, "_x86");

868 #ifde‡
__Ørch64__


869 
	`°rˇt
(
moduÀ∑th
, "_arm64");

872 #ifde‡
__¨m__


873 
	`°rˇt
(
moduÀ∑th
, "_arm");

875 
	`°rˇt
(
moduÀ∑th
,".so");

882 
	`°r˝y
(
moduÀ∑th
, "libceserver-extension");

884 #ifde‡
__i386__


885 
	`°rˇt
(
moduÀ∑th
, "_x86");

888 #ifde‡
__x86_64__


889 
	`°rˇt
(
moduÀ∑th
, "_x86_64");

892 #ifde‡
__Ørch64__


893 
	`°rˇt
(
moduÀ∑th
, "_arm64");

896 #ifde‡
__¨m__


897 
	`°rˇt
(
moduÀ∑th
, "_arm");

899 
	`°rˇt
(
moduÀ∑th
,".so");

902 
	`¥ötf
("moduÀ∑th = %s\n", 
moduÀ∑th
);

907 i‡(
p
->
isDebugged
)

909 
	`¥ötf
("ThisÖrocess is being debugged. Checking if it'sálreadyÜoaded\n");

911 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

912 
p
->
hasLﬂdedExãnsi⁄
=
	`›íExãnsi⁄
’->
pid
, &p->
exãnsi⁄FD
);

913 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

917 i‡(
p
->
hasLﬂdedExãnsi⁄
)

918 
	`¥ötf
("TheÉxtension isálreadyÜoaded\n");

922 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

923 i‡(
p
->
hasLﬂdedExãnsi⁄
==0)

926 i‡(
p
->
√vîF‹˚LﬂdExãnsi⁄
==0)

928 
	`¥ötf
("CallingÜoadExtension\n");

929 
p
->
hasLﬂdedExãnsi⁄
=
	`lﬂdExãnsi⁄
’->
pid
, 
moduÀ∑th
,Ö->
isDebugged
);

931 
	`¥ötf
("p->hasLﬂdedExãnsi⁄=%d\n", 
p
->
hasLﬂdedExãnsi⁄
);

934 i‡(
p
->
hasLﬂdedExãnsi⁄
)

935 
p
->
hasLﬂdedExãnsi⁄
=
	`›íExãnsi⁄
’->
pid
, &p->
exãnsi⁄FD
);

938 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

944 
	`¥ötf
("AlreadyÜoaded\n");

946  
p
->
hasLﬂdedExãnsi⁄
;

950 
	`¥ötf
("Invalid handleÅype");

953 
	}
}

	@extensionloader.h

8 #i‚de‡
EXTENTIONLOADER_H_


9 
	#EXTENTIONLOADER_H_


	)

11 
	~"p‹thñp.h
"

13 
lﬂdCESîvîExãnsi⁄
(
HANDLE
 
hPro˚ss
);

	@porthelp.c

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~"p‹thñp.h
"

16 
h™dÀTy≥
 
	mty≥
;

17 *
	mpoöãr
;

19 } 
	tH™dÀLi°E¡ry
, *
	tPH™dÀLi°E¡ry
;

21 vﬁ©ûê
H™dÀLi°E¡ry
 *
	gH™dÀLi°
;

22 
	gH™dÀLi°_max
;

24 
	$Cª©eH™dÀFromPoöãr
(*
p
, 
h™dÀTy≥
 
ty≥
)

26 i‡(
H™dÀLi°
==
NULL
)

29 
H™dÀLi°_max
=4096 / (
H™dÀLi°E¡ry
);

30 
H™dÀLi°
=(
PH™dÀLi°E¡ry
)
	`mÆloc
(
H™dÀLi°_max
*4096);

32 
	`mem£t
((*)
H™dÀLi°
, 0, (
H™dÀLi°E¡ry
)*256);

36 
i
;

37 
i
=1; i<
H™dÀLi°_max
; i++)

39 i‡(
H™dÀLi°
[
i
].
ty≥
==
htEm±y
)

41 
H™dÀLi°
[
i
].
poöãr
=
p
;

42 
H™dÀLi°
[
i
].
ty≥
=type;

43  
i
;

48 
i
=
H™dÀLi°_max
;

50 
H™dÀLi°_max
=HandleList_max * 2;

52 
H™dÀLi°
=(
PH™dÀLi°E¡ry
)
	`ªÆloc
((*)H™dÀLi°, 
H™dÀLi°_max
 * (
H™dÀLi°E¡ry
));

53 
	`mem£t
((*)&
H™dÀLi°
[
i
], 0, i);

55 
H™dÀLi°
[
i
].
poöãr
=
p
;

56 
H™dÀLi°
[
i
].
ty≥
=type;

57  
i
;

58 
	}
}

61 *
	$GëPoöãrFromH™dÀ
(
h™dÀ
)

63 i‡((
h™dÀ
<
H™dÀLi°_max
Ë&& (
H™dÀLi°
[h™dÀ].
ty≥
 !
htEm±y
))

64  
H™dÀLi°
[
h™dÀ
].
poöãr
;

66  
NULL
;

67 
	}
}

69 
h™dÀTy≥
 
	$GëH™dÀTy≥
(
h™dÀ
)

71 i‡(
h™dÀ
<
H™dÀLi°_max
)

72  
H™dÀLi°
[
h™dÀ
].
ty≥
;

74  
htEm±y
;

75 
	}
}

77 
	$RemoveH™dÀ
(
h™dÀ
)

79 i‡((
h™dÀ
>0Ë&& (h™dÀ<
H™dÀLi°_max
Ë&& (
H™dÀLi°
[h™dÀ].
ty≥
 !
htEm±y
))

80 
H™dÀLi°
[
h™dÀ
].
ty≥
=
htEm±y
;

81 
	}
}

83 
	$SórchH™dÀLi°
(
ty≥
, 
HANDLESEARCHCALLBACK
 
cb
, *
£¨chd©a
)

89 
i
;

91 
i
=1; i<
H™dÀLi°_max
; i++)

93 i‡(
H™dÀLi°
[
i
].
ty≥
==type)

95 i‡(
	`cb
(
H™dÀLi°
[
i
].
poöãr
, 
£¨chd©a
))

96  
i
;

101 
	}
}

	@porthelp.h

8 #i‚de‡
PORTHELP_H_


9 
	#PORTHELP_H_


	)

11 
	~<°döt.h
>

13 
uöt32_t
 
	tHANDLE
;

14 
uöt32_t
 
	tDWORD
;

16 
	#TH32CS_SNAPPROCESS
 0x2

	)

17 
	#TH32CS_SNAPMODULE
 0x8

	)

19 
	#PAGE_NOACCESS
 1

	)

20 
	#PAGE_READONLY
 2

	)

21 
	#PAGE_READWRITE
 4

	)

22 
	#PAGE_WRITECOPY
 8

	)

23 
	#PAGE_EXECUTE
 16

	)

24 
	#PAGE_EXECUTE_READ
 32

	)

25 
	#PAGE_EXECUTE_READWRITE
 64

	)

27 
	#MEM_MAPPED
 262144

	)

28 
	#MEM_PRIVATE
 131072

	)

30 íum {
	mhtEm±y
=0, 
	mhtPro˚sH™dÀ
, 
	mhtThªadH™dÀ
, 
	mhtTHSPro˚ss
, 
	mhtTHSModuÀ
, 
	mhtN©iveThªadH™dÀ
} 
	th™dÀTy≥
;

31 
	tBOOL
;

33 (*
	tHANDLESEARCHCALLBACK
Ë(*
	td©a
, *
	t£¨chd©a
);

35 
	#TRUE
 1

	)

36 
	#FALSE
 0

	)

39 
	`Cª©eH™dÀFromPoöãr
(*
p
, 
h™dÀTy≥
 
ty≥
);

40 *
	`GëPoöãrFromH™dÀ
(
h™dÀ
);

41 
h™dÀTy≥
 
	`GëH™dÀTy≥
(
h™dÀ
);

42 
	`RemoveH™dÀ
(
h™dÀ
);

43 
	`SórchH™dÀLi°
(
ty≥
, 
HANDLESEARCHCALLBACK
 
cb
, *
£¨chd©a
);

	@symbols.c

8 
	~<°dio.h
>

9 
	~<ñf.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<°ddef.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<zlib.h
>

19 #¥agm®
∑ck
(1)

22 
uöt64_t
 
	maddªss
;

23 
	msize
;

24 
	mty≥
;

25 
	m«mñígth
;

26 
	m«me
[0];

27 } 
	tsymbﬁöfo
, *
	tpsymbﬁöfo
;

28 #¥agm®
∑ck
()

30 
	#TEMPBUFSIZE
 64*1024

	)

33 
	$lﬂdSåögTabÀ64
(
f
, 
Elf64_Shdr
 *
£˘i⁄Hódîs
, **
°rögTabÀ
, 
ödex
)

35 i‡((
°rögTabÀ
[
ödex
]==
NULL
Ë&& (
£˘i⁄Hódîs
[ödex].
sh_ty≥
==
SHT_STRTAB
))

37 
°rögTabÀ
[
ödex
]=
	`mÆloc
(
£˘i⁄Hódîs
[ödex].
sh_size
);

38 i‡(
	`¥ód
(
f
, 
°rögTabÀ
[
ödex
], 
£˘i⁄Hódîs
[ödex].
sh_size
, se˘i⁄Hódîs[ödex].
sh_off£t
)==-1)

40 
	`¥ötf
("FailureÜoadingÅhe stringtable\n");

41 
	`‰ì
(
°rögTabÀ
[
ödex
]);

42 
°rögTabÀ
[
ödex
]=
NULL
;

47 
	`¥ötf
("Notá stringÅable\n");

48 
	}
}

50 
	$lﬂdSåögTabÀ32
(
f
, 
Elf32_Shdr
 *
£˘i⁄Hódîs
, **
°rögTabÀ
, 
ödex
)

52 i‡((
°rögTabÀ
[
ödex
]==
NULL
Ë&& (
£˘i⁄Hódîs
[ödex].
sh_ty≥
==
SHT_STRTAB
))

54 
°rögTabÀ
[
ödex
]=
	`mÆloc
(
£˘i⁄Hódîs
[ödex].
sh_size
);

55 i‡(
	`¥ód
(
f
, 
°rögTabÀ
[
ödex
], 
£˘i⁄Hódîs
[ödex].
sh_size
, se˘i⁄Hódîs[ödex].
sh_off£t
)==-1)

57 
	`¥ötf
("FailureÜoadingÅhe stringtable\n");

58 
	`‰ì
(
°rögTabÀ
[
ödex
]);

59 
°rögTabÀ
[
ödex
]=
NULL
;

64 
	`¥ötf
("Notá stringÅable\n");

65 
	}
}

67 
	$ELF32
(
f
, 
Elf32_Ehdr
 *
b
, **
ouçut
)

72 
i
,
j
;

74 *
ãmpbuf„r
=
NULL
;

75 
ãmpbuf„Ωos
=0;

76 
maxouçutsize
=
TEMPBUFSIZE
;

77 
ãmpbuf„r
=
	`mÆloc
(
TEMPBUFSIZE
);

80 
z_°ªam
 
°rm
;

81 
°rm
.
zÆloc
 = 
Z_NULL
;

82 
°rm
.
z‰ì
 = 
Z_NULL
;

83 
°rm
.
›aque
 = 
Z_NULL
;

84 
	`deÊ©eInô
(&
°rm
, 9);

86 *
ouçut
=
	`mÆloc
(
maxouçutsize
);

88 
°rm
.
avaû_out
=
maxouçutsize
-3*(
uöt32_t
);

89 
°rm
.
√xt_out
=(*)&(*
ouçut
)[(
uöt32_t
)*3];

91 *(
uöt32_t
 *)(&(*
ouçut
)[0])=(
b
->
e_ty≥
==
ET_EXEC
);

100 
Elf32_Shdr
 *
£˘i⁄Hódîs
=
	`mÆloc
(
b
->
e_shítsize
*b->
e_shnum
);

102 i‡(
	`¥ód
(
f
, 
£˘i⁄Hódîs
, 
b
->
e_shítsize
*b->
e_shnum
, b->
e_shoff
)==-1)

105 
	`deÊ©eEnd
(&
°rm
);

106 i‡(
£˘i⁄Hódîs
)

107 
	`‰ì
(
£˘i⁄Hódîs
);

109 i‡(
ouçut
)

110 
	`‰ì
(
ouçut
);

112 i‡(
ãmpbuf„r
)

113 
	`‰ì
(
ãmpbuf„r
);

118 **
°rögTabÀ
=
	`ˇŒoc
(
b
->
e_shnum
, (*) );

120 
	`lﬂdSåögTabÀ32
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, 
b
->
e_sh°∫dx
);

123 
i
=0; i<
b
->
e_shnum
; i++)

127 i‡((
£˘i⁄Hódîs
[
i
].
sh_ty≥
==
SHT_SYMTAB
Ë|| (£˘i⁄Hódîs[i].sh_ty≥==
SHT_DYNSYM
))

137 
Elf32_Sym
 *
symbﬁTabÀ
=
	`mÆloc
(
£˘i⁄Hódîs
[
i
].
sh_size
);

138 i‡(
	`¥ód
(
f
, 
symbﬁTabÀ
, 
£˘i⁄Hódîs
[
i
].
sh_size
, se˘i⁄Hódîs[i].
sh_off£t
)==-1)

143 
maxödex
=
£˘i⁄Hódîs
[
i
].
sh_size
 / (
Elf32_Sym
);

145 
	`lﬂdSåögTabÀ32
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, se˘i⁄Hódîs[
i
].
sh_lök
);

148 
j
=0; j<
maxödex
; j++)

160 i‡(
symbﬁTabÀ
[
j
].
°_vÆue
)

163 *
symbﬁ«me
=(*)&
°rögTabÀ
[
£˘i⁄Hódîs
[
i
].
sh_lök
][
symbﬁTabÀ
[
j
].
°_«me
];

164 
size_t
 
«mñígth
=
	`°æí
(
symbﬁ«me
);

165 
íåysize
=(
symbﬁöfo
)+
«mñígth
;

166 i‡(
ãmpbuf„Ωos
+
íåysize
>=
TEMPBUFSIZE
)

170 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

171 
°rm
.
√xt_ö
=
ãmpbuf„r
;

173 
°rm
.
avaû_ö
)

175 i‡(
	`deÊ©e
(&
°rm
, 
Z_NO_FLUSH
)!=
Z_OK
)

182 i‡(
°rm
.
avaû_out
==0)

187 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

189 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

190 
°rm
.
avaû_out
=
maxouçutsize
;

191 
maxouçutsize
=maxoutputsize*2;

197 
ãmpbuf„Ωos
=0;

202 
psymbﬁöfo
 
si
=’symbﬁöfo)&
ãmpbuf„r
[
ãmpbuf„Ωos
];

203 
si
->
addªss
=
symbﬁTabÀ
[
j
].
°_vÆue
;

204 
si
->
size
=
symbﬁTabÀ
[
j
].
°_size
;

205 
si
->
ty≥
=
symbﬁTabÀ
[
j
].
°_öfo
;

206 
si
->
«mñígth
=namelength;

207 
	`mem˝y
(&
si
->
«me
, 
symbﬁ«me
, 
«mñígth
);

210 
ãmpbuf„Ωos
+=
íåysize
;

214 
	`‰ì
(
symbﬁTabÀ
);

220 
i
=0; i<
b
->
e_shnum
; i++)

222 i‡(
°rögTabÀ
[
i
])

223 
	`‰ì
(
°rögTabÀ
[
i
]);

225 
	`‰ì
(
°rögTabÀ
);

227 
	`‰ì
(
£˘i⁄Hódîs
);

230 
	`¥ötf
("end:\n");

231 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

232 
°rm
.
√xt_ö
=
ãmpbuf„r
;

237 
i
=
	`deÊ©e
(&
°rm
, 
Z_FINISH
);

238 
	`¥ötf
("i=%d\n", 
i
);

239 i‡(
i
==
Z_STREAM_END
)

242 i‡(
i
!=
Z_OK
)

244 
	`¥ötf
("FaûuªÅÿcom¥ess: %i\n", 
i
);

248 i‡(
°rm
.
avaû_out
==0)

250 
	`¥ötf
("Ouàbuf„∏fuŒ. RóŒoˇtög :%d\n", 
maxouçutsize
*2);

251 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

253 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

254 
°rm
.
avaû_out
=
maxouçutsize
;

255 
maxouçutsize
=maxoutputsize*2;

268 
	`deÊ©eEnd
(&
°rm
);

272 *(
uöt32_t
 *)(&(*
ouçut
)[4])=
°rm
.
tŸÆ_out
+3*(uint32_t);

273 *(
uöt32_t
 *)(&(*
ouçut
)[8])=
°rm
.
tŸÆ_ö
;

275 
	`‰ì
(
ãmpbuf„r
);

278 
	}
}

280 
	$ELF64
(
f
, 
Elf64_Ehdr
 *
b
, **
ouçut
)

285 
i
,
j
;

288 *
ãmpbuf„r
=
NULL
;

289 
ãmpbuf„Ωos
=0;

290 
maxouçutsize
=
TEMPBUFSIZE
;

291 
ãmpbuf„r
=
	`mÆloc
(
TEMPBUFSIZE
);

294 
z_°ªam
 
°rm
;

295 
°rm
.
zÆloc
 = 
Z_NULL
;

296 
°rm
.
z‰ì
 = 
Z_NULL
;

297 
°rm
.
›aque
 = 
Z_NULL
;

298 
	`deÊ©eInô
(&
°rm
, 9);

300 *
ouçut
=
	`mÆloc
(
maxouçutsize
);

302 
°rm
.
avaû_out
=
maxouçutsize
-3*(
uöt32_t
);

303 
°rm
.
√xt_out
=(*)&(*
ouçut
)[(
uöt32_t
)*3];

305 *(
uöt32_t
 *)(&(*
ouçut
)[0])=(
b
->
e_ty≥
==
ET_EXEC
);

313 
Elf64_Shdr
 *
£˘i⁄Hódîs
=
	`mÆloc
(
b
->
e_shítsize
*b->
e_shnum
);

315 i‡(
	`¥ód
(
f
, 
£˘i⁄Hódîs
, 
b
->
e_shítsize
*b->
e_shnum
, b->
e_shoff
)==-1)

318 
	`deÊ©eEnd
(&
°rm
);

319 i‡(
£˘i⁄Hódîs
)

320 
	`‰ì
(
£˘i⁄Hódîs
);

322 i‡(
ouçut
)

323 
	`‰ì
(
ouçut
);

325 i‡(
ãmpbuf„r
)

326 
	`‰ì
(
ãmpbuf„r
);

331 **
°rögTabÀ
=
	`ˇŒoc
(
b
->
e_shnum
, (*) );

333 
	`lﬂdSåögTabÀ64
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, 
b
->
e_sh°∫dx
);

336 
i
=0; i<
b
->
e_shnum
; i++)

340 i‡((
£˘i⁄Hódîs
[
i
].
sh_ty≥
==
SHT_SYMTAB
Ë|| (£˘i⁄Hódîs[i].sh_ty≥==
SHT_DYNSYM
))

350 
Elf64_Sym
 *
symbﬁTabÀ
=
	`mÆloc
(
£˘i⁄Hódîs
[
i
].
sh_size
);

351 i‡(
	`¥ód
(
f
, 
symbﬁTabÀ
, 
£˘i⁄Hódîs
[
i
].
sh_size
, se˘i⁄Hódîs[i].
sh_off£t
)==-1)

356 
maxödex
=
£˘i⁄Hódîs
[
i
].
sh_size
 / (
Elf64_Sym
);

358 
	`lﬂdSåögTabÀ64
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, se˘i⁄Hódîs[
i
].
sh_lök
);

361 
j
=0; j<
maxödex
; j++)

374 i‡(
symbﬁTabÀ
[
j
].
°_vÆue
)

377 *
symbﬁ«me
=(*)&
°rögTabÀ
[
£˘i⁄Hódîs
[
i
].
sh_lök
][
symbﬁTabÀ
[
j
].
°_«me
];

378 
size_t
 
«mñígth
=
	`°æí
(
symbﬁ«me
);

379 
íåysize
=(
symbﬁöfo
)+
«mñígth
;

380 i‡(
ãmpbuf„Ωos
+
íåysize
>=
TEMPBUFSIZE
)

384 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

385 
°rm
.
√xt_ö
=
ãmpbuf„r
;

387 
°rm
.
avaû_ö
)

389 i‡(
	`deÊ©e
(&
°rm
, 
Z_NO_FLUSH
)!=
Z_OK
)

391 
	`¥ötf
("FAILURE TO COMPRESS!\n");

396 i‡(
°rm
.
avaû_out
==0)

400 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

402 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

403 
°rm
.
avaû_out
=
maxouçutsize
;

404 
maxouçutsize
=maxoutputsize*2;

408 
ãmpbuf„Ωos
=0;

413 
psymbﬁöfo
 
si
=’symbﬁöfo)&
ãmpbuf„r
[
ãmpbuf„Ωos
];

414 
si
->
addªss
=
symbﬁTabÀ
[
j
].
°_vÆue
;

415 
si
->
size
=
symbﬁTabÀ
[
j
].
°_size
;

416 
si
->
ty≥
=
symbﬁTabÀ
[
j
].
°_öfo
;

417 
si
->
«mñígth
=namelength;

418 
	`mem˝y
(&
si
->
«me
, 
symbﬁ«me
, 
«mñígth
);

421 
ãmpbuf„Ωos
+=
íåysize
;

425 
	`‰ì
(
symbﬁTabÀ
);

431 
i
=0; i<
b
->
e_shnum
; i++)

433 i‡(
°rögTabÀ
[
i
])

434 
	`‰ì
(
°rögTabÀ
[
i
]);

436 
	`‰ì
(
°rögTabÀ
);

438 
	`‰ì
(
£˘i⁄Hódîs
);

441 
	`¥ötf
("end:\n");

442 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

443 
°rm
.
√xt_ö
=
ãmpbuf„r
;

448 
i
=
	`deÊ©e
(&
°rm
, 
Z_FINISH
);

449 
	`¥ötf
("i=%d\n", 
i
);

450 i‡(
i
==
Z_STREAM_END
)

453 i‡(
i
!=
Z_OK
)

455 
	`¥ötf
("FaûuªÅÿcom¥ess: %i\n", 
i
);

459 i‡(
°rm
.
avaû_out
==0)

461 
	`¥ötf
("Ouàbuf„∏fuŒ. RóŒoˇtög :%d\n", 
maxouçutsize
*2);

462 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

464 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

465 
°rm
.
avaû_out
=
maxouçutsize
;

466 
maxouçutsize
=maxoutputsize*2;

473 
	`¥ötf
("°rm.avaû_out=%d\n", 
°rm
.
avaû_out
);

475 
	`¥ötf
("tŸÆ_ö = %lu\n", 
°rm
.
tŸÆ_ö
);

476 
	`¥ötf
("tŸÆ_ouà%lu\n", 
°rm
.
tŸÆ_out
);

478 
	`deÊ©eEnd
(&
°rm
);

481 *(
uöt32_t
 *)(&(*
ouçut
)[4])=
°rm
.
tŸÆ_out
+3*(uint32_t);

482 *(
uöt32_t
 *)(&(*
ouçut
)[8])=
°rm
.
tŸÆ_ö
;

485 
	`‰ì
(
ãmpbuf„r
);

489 
	}
}

491 
	$GëSymbﬁLi°FromFûe
(*
fûíame
, **
ouçut
, *
ouçutsize
)

496 
i
, 
f
;

497 *
b
=
NULL
;

499 
	`¥ötf
("GëSymbﬁLi°FromFûe(%s)\n", 
fûíame
);

501 *
ouçut
=
NULL
;

502 
f
=
	`›í
(
fûíame
, 
O_RDONLY
);

503 i‡(
f
==-1)

506 
b
=
	`mÆloc
((
Elf64_Ehdr
));

507 i‡(
b
)

509 
i
=
	`¥ód
(
f
, 
b
, (
Elf64_Ehdr
), 0);

511 i‡(*(
uöt32_t
 *)
b
!=0x464c457f)

514 i‡(
b
[
EI_CLASS
]==
ELFCLASS32
)

515 
i
=
	`ELF32
(
f
, (
Elf32_Ehdr
 *)
b
, 
ouçut
);

517 
i
=
	`ELF64
(
f
, (
Elf64_Ehdr
 *)
b
, 
ouçut
);

519 
	`‰ì
(
b
);

522 
	`˛o£
(
f
);

524  
i
;

525 
	}
}

528 
	$GëModuÀSize32
(
f
, 
Elf32_Ehdr
 *
b
)

534 
Elf32_Phdr
 *
¥ogømHódîs
=
	`mÆloc
(
b
->
e_phítsize
*b->
e_phnum
);

544 i‡(
	`¥ód
(
f
, 
¥ogømHódîs
, 
b
->
e_phítsize
*b->
e_phnum
, b->
e_phoff
)==-1)

546 i‡(
¥ogømHódîs
)

547 
	`‰ì
(
¥ogømHódîs
);

553 
i
;

554 
lowe°
=0;

555 
highe°
=0;

557 
i
=0; i<
b
->
e_phnum
; i++)

559 i‡(
¥ogømHódîs
[
i
].
p_memsz
>0)

561 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
<
lowe°
))

562 
lowe°
=
¥ogømHódîs
[
i
].
p_vaddr
;

564 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
+¥ogømHódîs[i].
p_memsz
>
highe°
))

565 
highe°
=
¥ogømHódîs
[
i
].
p_vaddr
+¥ogømHódîs[i].
p_memsz
;

576 i‡(
¥ogømHódîs
)

577 
	`‰ì
(
¥ogømHódîs
);

581  
highe°
-
lowe°
;

582 
	}
}

584 
	$GëModuÀSize64
(
f
, 
Elf64_Ehdr
 *
b
)

589 
Elf64_Phdr
 *
¥ogømHódîs
=
	`mÆloc
(
b
->
e_phítsize
*b->
e_phnum
);

600 i‡(
	`¥ód
(
f
, 
¥ogømHódîs
, 
b
->
e_phítsize
*b->
e_phnum
, b->
e_phoff
)==-1)

602 i‡(
¥ogømHódîs
)

603 
	`‰ì
(
¥ogømHódîs
);

609 
i
;

610 
lowe°
=0;

611 
highe°
=0;

613 
i
=0; i<
b
->
e_phnum
; i++)

615 i‡(
¥ogømHódîs
[
i
].
p_memsz
>0)

617 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
<
lowe°
))

618 
lowe°
=
¥ogømHódîs
[
i
].
p_vaddr
;

620 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
+¥ogømHódîs[i].
p_memsz
>
highe°
))

621 
highe°
=
¥ogømHódîs
[
i
].
p_vaddr
+¥ogømHódîs[i].
p_memsz
;

632 i‡(
¥ogømHódîs
)

633 
	`‰ì
(
¥ogømHódîs
);

637  
highe°
-
lowe°
;

638 
	}
}

641 
	$GëModuÀSize
(*
fûíame
, 
deÁu…size
)

646 
i
,
f
;

647 *
b
=
NULL
;

648 
ªsu…
=
deÁu…size
;

652 
f
=
	`›í
(
fûíame
, 
O_RDONLY
);

653 i‡(
f
==-1)

655 
	`¥ötf
("FaûedÅÿ›í %s\n", 
fûíame
);

656  
deÁu…size
;

660 
b
=
	`mÆloc
((
Elf64_Ehdr
));

661 i‡(
b
)

663 
i
=
	`¥ód
(
f
, 
b
, (
Elf64_Ehdr
), 0);

665 i‡(*(
uöt32_t
 *)
b
!=0x464c457f)

667 
	`¥ötf
("%†i†nŸá¿ñf\n", 
fûíame
);

668 
	`‰ì
(
b
);

669 
	`˛o£
(
f
);

670  
deÁu…size
;

673 i‡(
b
[
EI_CLASS
]==
ELFCLASS32
)

674 
i
=
	`GëModuÀSize32
(
f
, (
Elf32_Ehdr
 *)
b
);

676 
i
=
	`GëModuÀSize64
(
f
, (
Elf64_Ehdr
 *)
b
);

678 
	`‰ì
(
b
);

679 
	`˛o£
(
f
);

682  
i
;

686 
	`˛o£
(
f
);

687  
deÁu…size
;

695 
	}
}

	@symbols.h

8 #i‚de‡
SYMBOLS_H_


9 
	#SYMBOLS_H_


	)

11 
GëSymbﬁLi°FromFûe
(*
fûíame
, **
ouçut
);

12 
GëModuÀSize
(*
fûíame
, 
deÁu…size
);

	@threads.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~"thªads.h
"

11 
	~"≠i.h
"

13 
	$InôülizePro˚ssThªadli°
(
PPro˚ssD©a
 
p
)

15 i‡(
p
->
thªadli°
==
NULL
)

17 
p
->
thªadli°
=
	`mÆloc
((
ThªadD©a
)*64);

18 
p
->
thªadli°max
=64;

21 
p
->
thªadli°pos
=0;

22 
	}
}

24 
	$AddThªadToPro˚ss
(
PPro˚ssD©a
 
p
, 
PThªadD©a
 
thªadd©a
)

26 i‡(
p
->
thªadli°
==
NULL
)

27 
	`InôülizePro˚ssThªadli°
(
p
);

29 i‡(
p
->
thªadli°pos
=ı->
thªadli°max
)

32 
p
->
thªadli°
=
	`ªÆloc
’->thªadli°, (
ThªadD©a
)*p->
thªadli°max
*2);

33 i‡(
p
->
thªadli°
==
NULL
)

35 
	`¥ötf
("REALLOC FAILED!\n");

36 
	`exô
(2);

38 
p
->
thªadli°max
=p->threadlistmax*2;

42 
p
->
thªadli°
[p->
thªadli°pos
]=*
thªadd©a
;

43 
p
->
thªadli°pos
++;

44 
	}
}

46 
	$RemoveThªadFromPro˚ss
(
PPro˚ssD©a
 
p
, 
tid
)

48 
i
;

49 
i
=0; i<
p
->
thªadli°pos
; i++)

50 i‡(
p
->
thªadli°
[
i
].
tid
==tid)

53 
j
;

54 
j
=
i
; j<
p
->
thªadli°pos
-1; j++)

55 
p
->
thªadli°
[
j
]=p->threadlist[j+1];

57 
p
->
thªadli°pos
--;

63 
	}
}

65 
PThªadD©a
 
	$GëThªadD©a
(
PPro˚ssD©a
 
p
, 
tid
)

67 
i
;

68 
i
=0; i<
p
->
thªadli°pos
; i++)

69 i‡(
p
->
thªadli°
[
i
].
tid
==tid)

70  &
p
->
thªadli°
[
i
];

72  
NULL
;

73 
	}
}

	@threads.h

8 #i‚de‡
TREADS_H_


9 
	#TREADS_H_


	)

11 
	~<sys/queue.h
>

12 
	~"≠i.h
"

15 
InôülizePro˚ssThªadli°
(
PPro˚ssD©a
 
p
);

16 
AddThªadToPro˚ss
(
PPro˚ssD©a
 
p
, 
PThªadD©a
 
thªadd©a
);

17 
RemoveThªadFromPro˚ss
(
PPro˚ssD©a
 
p
, 
tid
);

18 
PThªadD©a
 
GëThªadD©a
(
PPro˚ssD©a
 
p
, 
tid
);

	@
1
.
0
21
263
api.c
api.h
ceserver.c
ceserver.h
ceservertest.c
ceservertest.h
context.c
context.h
embedded-linux.c
embedded.c
embedded.h
extensionfunctions.c
extensionfunctions.h
extensionloader.c
extensionloader.h
porthelp.c
porthelp.h
symbols.c
symbols.h
threads.c
threads.h
