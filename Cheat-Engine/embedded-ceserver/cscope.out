cscope 15 /mnt/c/Projects/memscan/CE/ohad-cheat-engine/Cheat-Engine/embedded-ceserver               0000446352
	@api.c

15 
	#_FILE_OFFSET_BITS
 64

	)

16 
	#_LARGEFILE64_SOURCE


	)

18 
	~<°dio.h
>

21 
	~<°ddef.h
>

22 
	~<°rög.h
>

23 
	~<°dlib.h
>

24 
	~<°döt.h
>

26 #i‚de‡
__x86_64__


30 
	~<£m≠h‹e.h
>

31 
	~<limôs.h
>

34 #i‚de‡
__x86_64__


38 #ifde‡
__¨m__


43 
	#PTRACE_GETHBPREGS
 29

	)

44 
	#PTRACE_SETHBPREGS
 30

	)

47 
	#ARM_BREAKPOINT_EXECUTE
 0

	)

50 
	#ARM_BREAKPOINT_LOAD
 1

	)

51 
	#ARM_BREAKPOINT_STORE
 2

	)

54 
	#ARM_BREAKPOINT_PRIV
 1

	)

55 
	#ARM_BREAKPOINT_USER
 2

	)

58 
	#ARM_BREAKPOINT_LEN_1
 0x1

	)

59 
	#ARM_BREAKPOINT_LEN_2
 0x3

	)

60 
	#ARM_BREAKPOINT_LEN_4
 0xf

	)

61 
	#ARM_BREAKPOINT_LEN_8
 0xff

	)

63 
ölöe
 
	$ícode_˘æ_ªg
(
mism©ch
, 
Àn
, 
ty≥
, 
¥ivûege
, 
íabÀd
)

65  (
mism©ch
 << 22Ë| (
Àn
 << 5Ë| (
ty≥
 << 3Ë| (
¥ivûege
 << 1Ë| 
íabÀd
;

66 
	}
}

68 #i‚de‡
__ANDROID__


69 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

70 
	~<sys/u£r.h
>

76 
	~"≠i.h
"

77 
	~"p‹thñp.h
"

78 
	~"˚£rvî.h
"

79 
	~"thªads.h
"

80 
	~"symbﬁs.h
"

81 
	~"c⁄ãxt.h
"

84 
£m_t
 
	g£m_DebugThªadEvít
;

86 
±hªad_muãx_t
 
	gmem‹ymuãx
;

87 
±hªad_muãx_t
 
	gdebugsockëmuãx
;

92 
	mRe„ªn˚Cou¡
;

93 
	m¥o˚ssLi°Iãøt‹
;

94 
	m¥o˚ssCou¡
;

95 
PPro˚ssLi°E¡ry
 
	m¥o˚ssLi°
;

96 } 
	tPro˚ssLi°
, *
	tPPro˚ssLi°
;

100 
	mRe„ªn˚Cou¡
;

101 
	mmoduÀLi°Iãøt‹
;

102 
	mmoduÀCou¡
;

103 
PModuÀLi°E¡ry
 
	mmoduÀLi°
;

104 } 
	tModuÀLi°
, *
	tPModuÀLi°
;

106 
	gVîbo£Levñ
=0;

109 
	$WakeDebuggîThªad
()

112 
	`£m_po°
(&
£m_DebugThªadEvít
);

113 
	}
}

115 
	$mychûdh™dÀr
(
sig«l
, 
sigöfo
 *
öfo
, *
c⁄ãxt
)

119 
‹ig_î∫o
 = 
î∫o
;

120 
	`WakeDebuggîThªad
();

121 
î∫o
 = 
‹ig_î∫o
;

124 
	}
}

126 
	$GëDebugP‹t
(
HANDLE
 
hPro˚ss
)

129 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

131 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

132 i‡(
p
->
isDebugged
)

134  
p
->
debuggîSîvî
;

140 
	}
}

142 
	$FödPau£dThªad
(
PPro˚ssD©a
 
p
)

147 
i
;

148 
i
=0; i<
p
->
thªadli°pos
; i++)

149 i‡(
p
->
thªadli°
[
i
].
isPau£d
)

150  
p
->
thªadli°
[
i
].
tid
;

153 
	}
}

155 
	$gëBªakpoötC≠abûôõs
(
tid
, 
uöt8_t
 *
maxBªakpoötCou¡
, uöt8_à*
maxW©chpoötCou¡
, uöt8_à*
maxSh¨edBªakpoöts
)

159 *
maxBªakpoötCou¡
=0;

160 *
maxW©chpoötCou¡
=0;

161 *
maxSh¨edBªakpoöts
=0;

164 #ifde‡
__¨m__


165 
HBP_RESOURCE_INFO
 
hwbpˇp
;

167 
	`mem£t
(&
hwbpˇp
, 0, (
HBP_RESOURCE_INFO
));

168 i‡(
	`±ø˚
(
PTRACE_GETHBPREGS
, 
tid
, 0, &
hwbpˇp
)==0)

170 
	`¥ötf
("hwbpcap:\n");

171 
	`¥ötf
("debugárchôe˘uª: %d\n", 
hwbpˇp
.
debug_¨ch
);

172 
	`¥ötf
("numbî o‡ö°ru˘i⁄ bªakpoöts: %d\n", 
hwbpˇp
.
num_bΩs
);

173 
	`¥ötf
("numbî o‡d©®bªakpoöts: %d\n", 
hwbpˇp
.
num_wΩs
);

174 
	`¥ötf
("maxÜígth o‡®d©®bªakpoöt: %d\n", 
hwbpˇp
.
wp_Àn
);

176 *
maxBªakpoötCou¡
=
hwbpˇp
.
num_bΩs
;

177 *
maxW©chpoötCou¡
=
hwbpˇp
.
num_wΩs
;

178 *
maxSh¨edBªakpoöts
=0;

186 #ifde‡
__Ørch64__


187 
iovec
 
iov
;

188 
u£r_hwdebug_°©e
 
hwd
;

189 
	`mem£t
(&
hwd
, 0, (hwd));

191 
iov
.
iov_ba£
=&
hwd
;

192 
iov
.
iov_Àn
=(
hwd
);

194 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, 
NT_ARM_HW_WATCH
, &
iov
)==0)

196 
	`¥ötf
("NT_ARM_HW_WATCH: dbg_öfo=%x:\n", 
hwd
.
dbg_öfo
);

197 *
maxW©chpoötCou¡
=
hwd
.
dbg_öfo
 & 0xf;

202 
iov
.
iov_ba£
=&
hwd
;

203 
iov
.
iov_Àn
=(
hwd
);

204 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, 
NT_ARM_HW_BREAK
, &
iov
)==0)

206 
	`¥ötf
("NT_ARM_HW_BREAK: dbg_öfo=%x:\n", 
hwd
.
dbg_öfo
);

207 *
maxBªakpoötCou¡
=
hwd
.
dbg_öfo
 & 0xf;

215 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

216 *
maxBªakpoötCou¡
=0;

217 *
maxW©chpoötCou¡
=0;

218 *
maxSh¨edBªakpoöts
=4;

221 
	}
}

223 
	$SèπDebug
(
HANDLE
 
hPro˚ss
)

225 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

227 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

229 
siga˘i⁄
 
chûda˘i⁄h™dÀr
;

230 i‡(
p
->
isDebugged
)

232 
	`¥ötf
("TryingÅo start debuggingáÖrocessÅhat isálready debugged\n");

233  
FALSE
;

238 
	`InôülizePro˚ssThªadli°
(
p
);

241 
	`mem£t
(&
chûda˘i⁄h™dÀr
, 0, (childactionhandler));

242 
chûda˘i⁄h™dÀr
.
ß_h™dÀr
=(*)
mychûdh™dÀr
;

243 
chûda˘i⁄h™dÀr
.
ß_Êags
=
SA_SIGINFO
;

247 
	`siga˘i⁄
(
SIGCHLD
, &
chûda˘i⁄h™dÀr
, 
NULL
);

253 
_èskdú
[255];

254 
DIR
 *
èskdú
;

256 
	`•rötf
(
_èskdú
, "/¥oc/%d/èsk", 
p
->
pid
);

258 
èskdú
=
	`›ídú
(
_èskdú
);

260 i‡(
èskdú
)

262 
dúít
 *
d
;

264 
d
=
	`ªaddú
(
èskdú
);

265 
d
)

267 
tid
=
	`©oi
(
d
->
d_«me
);

269 i‡(
tid
)

271 
ThªadD©a
 
td
;

272 
	`mem£t
(&
td
, 0, (td));

273 
td
.
tid
=tid;

274 
td
.
isPau£d
=0;

275 
	`AddThªadToPro˚ss
(
p
, &
td
);

277 
	`±hªad_muãx_lock
(&
mem‹ymuãx
);

279 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
tid
,0,0)<0)

280 
	`¥ötf
("FaûedÅÿ©èchÅÿthªad %d\n", 
tid
);

283 
DebugEvít
 
¸óãThªadEvít
;

287 i‡(
p
->
isDebugged
==0)

289 
p
->
isDebugged
=1;

290 
p
->
debuggedThªadEvít
.
thªadid
=0;

291 
p
->
debuggîThªadID
=
	`±hªad_£lf
();

293 
	`sockë∑ú
(
PF_LOCAL
, 
SOCK_STREAM
, 0, &
p
->
debuggîSîvî
);

296 
DebugEvít
 
¸óãPro˚ssEvít
;

298 #i‡
	`deföed
(
__¨m__
Ë|| deföed (
__Ørch64__
)

300 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
¸óãPro˚ssEvít
, 
tid
, -1))

304 
	`gëBªakpoötC≠abûôõs
(
tid
, &
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
, &¸óãPro˚ssEvít.
maxW©chpoötCou¡
, &¸óãPro˚ssEvít.
maxSh¨edBªakpoöts
);

308 
	`±ø˚
(
PTRACE_CONT
, 
¸óãPro˚ssEvít
.
thªadid
, 0,0);

310 
PThªadD©a
 
_td
=
	`GëThªadD©a
(
p
, 
¸óãPro˚ssEvít
.
thªadid
);

312 i‡(
_td
)

313 
_td
->
isPau£d
=0;

315 
	`¥ötf
("Invalid first debugÅhread\n");

319 
	`¥ötf
("Failure waiting for createÉvent");

320 
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
=0;

321 
¸óãPro˚ssEvít
.
maxW©chpoötCou¡
=0;

322 
¸óãPro˚ssEvít
.
maxSh¨edBªakpoöts
=4;

326 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

328 
¸óãPro˚ssEvít
.
maxBªakpoötCou¡
=0;

329 
¸óãPro˚ssEvít
.
maxW©chpoötCou¡
=0;

330 
¸óãPro˚ssEvít
.
maxSh¨edBªakpoöts
=4;

334 
¸óãPro˚ssEvít
.
debugevít
=-2;

335 
¸óãPro˚ssEvít
.
thªadid
=
p
->
pid
;

337 
	`AddDebugEvítToQueue
(
p
, &
¸óãPro˚ssEvít
);

341 
¸óãThªadEvít
.
debugevít
=-1;

342 
¸óãThªadEvít
.
thªadid
=
tid
;

343 
	`AddDebugEvítToQueue
(
p
, &
¸óãThªadEvít
);

349 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

353 
d
=
	`ªaddú
(
èskdú
);

356 
	`˛o£dú
(
èskdú
);

361 
	`¥ötf
("Faûuª o≥nög %s",
_èskdú
);

365  
p
->
isDebugged
;

371  
FALSE
;

374 
	}
}

376 
	$SëBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, *
addªss
, 
b±y≥
, 
bpsize
)

388 
ªsu…
=
FALSE
;

391 
	`¥ötf
("SëBªakpoöt(%d, %d, %d, %p, %d, %d)\n", 
hPro˚ss
, 
tid
, 
debugªg
, 
addªss
, 
b±y≥
, 
bpsize
);

392 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

394 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

398 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

401 
isdebugged
=
	`FödPau£dThªad
(
p
);

402 
wtid
;

403 
DebugEvít
 
de
;

407 
	`¥ötf
("SetBreakpoint from debuggerthread\n");

409 i‡(
tid
==-1)

411 
i
,
r
;

412 
	`¥ötf
("Calling SetBreakpoint forállÅhreads\n");

414 
i
=0; i<
p
->
thªadli°pos
; i++)

416 
r
=
	`SëBªakpoöt
(
hPro˚ss
, 
p
->
thªadli°
[
i
].
tid
, 
debugªg
, 
addªss
, 
b±y≥
, 
bpsize
);

417 i‡(
r
)

418 
ªsu…
=
TRUE
;

424 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

425 
wasPau£d
;

427 i‡(
td
==
NULL
)

428  
FALSE
;

430 
wasPau£d
=
td
->
isPau£d
;

432 
	`¥ötf
("CÆlög sëbªakpoöàf‹Åhªad :%d\n", 
tid
);

434 
	`¥ötf
("isdebugged=%d\n", 
isdebugged
);

436 i‡(
wasPau£d
==0)

439 
	`¥ötf
("TargetÅhread wasn't stopped yet\n");

441 
k
=0;

443 
	`¥ötf
("td=%p\n", 
td
);

444 
	`¥ötf
("td->isPau£d=%d\n", 
td
->
isPau£d
);

449 
wtid
=
tid
;

450 (
td
Ë&& (td->
isPau£d
==0Ë&& (
k
<10))

452 
	`¥ötf
("Not yetÖaused\n");

453 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

455 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

457 
wtid
=
de
.
thªadid
;

460 
k
++;

465 i‡(
wtid
!=
tid
)

467 
	`¥ötf
("<<<================UNEXPECTED TID (wtid=%dÅid=%d)================>>>\n", 
wtid
, 
tid
);

470 
	`¥ötf
("k=%d (numbî o‡åõs)\n", 
k
);

472 i‡(
k
==10)

474 
	`¥ötf
("Timeout when waiting forÅhread\n");

479 
	`¥ötf
("TheÅhread I wantedÅo break wasálready broken. Yeeeh\n");

480 
wtid
=
isdebugged
;

484 
	`¥ötf
("Sëtög bªakpoöàöÅhªad %d\n", 
wtid
);

485 #ifde‡
__Ørch64__


486 
u£r_±_ªgs
 
ªg£t
;

488 
iovec
 
iov
;

490 
	`mem£t
(&
ªg£t
, 0, (regset));

491 
	`mem£t
(&
iov
, 0, (iov));

492 
iov
.
iov_ba£
=&
ªg£t
;

493 
iov
.
iov_Àn
=(
ªg£t
);

494 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, (*)
NT_PRSTATUS
, &
iov
);

496 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

497 
	`¥ötf
("i=%d\n", 
i
);

501 i‡(
iov
.
iov_Àn
==72)

503 
	`¥ötf
("This isá 32 bitÅarget. MostÜikely debugging will fail\n");

506 
	`¥ötf
("r0=%Œx\n", 
ªg£t
.
ªgs
[0]);

507 
	`¥ötf
("r1=%Œx\n", 
ªg£t
.
ªgs
[1]);

508 
	`¥ötf
("r2=%Œx\n", 
ªg£t
.
ªgs
[2]);

509 
	`¥ötf
("r3=%Œx\n", 
ªg£t
.
ªgs
[3]);

513 
u£r_hwdebug_°©e
 
hwd
;

514 
	`mem£t
(&
hwd
, 0, (hwd));

520 
iov
.
iov_ba£
=&
hwd
;

521 
iov
.
iov_Àn
=(
hwd
);

522 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_WATCH
, &
iov
);

525 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

526 
	`¥ötf
("i=%d (%d)\n", 
i
,
î∫o
);

528 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

529 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

530 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

532 
iov
.
iov_ba£
=&
hwd
;

533 
iov
.
iov_Àn
=(
hwd
);

534 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_BREAK
, &
iov
);

537 
	`¥ötf
("iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

538 
	`¥ötf
("i=%d (%d)\n", 
i
,
î∫o
);

540 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

541 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

542 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

546 
bty≥
=0;

547 
b∂i°
=
NT_ARM_HW_BREAK
;

549 i‡(
b±y≥
==0)

552 
b∂i°
=
NT_ARM_HW_BREAK
;

554 
bty≥
=
ARM_BREAKPOINT_EXECUTE
;

559 
b∂i°
=
NT_ARM_HW_WATCH
;

560 i‡(
b±y≥
==1)

561 
bty≥
=
ARM_BREAKPOINT_STORE
;

563 i‡(
b±y≥
==2)

564 
bty≥
=
ARM_BREAKPOINT_LOAD
;

566 i‡(
b±y≥
==3)

567 
bty≥
=
ARM_BREAKPOINT_STORE
 | 
ARM_BREAKPOINT_LOAD
;

571 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

573 
hwd
.
dbg_ªgs
[
debugªg
].
addr
=(
uöçå_t
)
addªss
;

574 
hwd
.
dbg_ªgs
[
debugªg
].
˘æ
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
bty≥
, 0, 1);

576 
i
=
	`±ø˚
(
PTRACE_SETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

578 
	`¥ötf
("£t=%d\n",
i
);

580 
	`mem£t
(&
hwd
, 0, (hwd));

582 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
NT_ARM_HW_WATCH
, &
iov
);

584 
	`¥ötf
("gë: iov.iov_Àn=%d\n", ()
iov
.
iov_Àn
);

585 
	`¥ötf
("i=%d\n", 
i
);

587 
	`¥ötf
("hwd.dbg_öfo=%x\n", 
hwd
.
dbg_öfo
);

588 
	`¥ötf
("hwd.dbg_ªgs[0].addr=%Œx\n", 
hwd
.
dbg_ªgs
[0].
addr
);

589 
	`¥ötf
("hwd.dbg_ªgs[0].˘æ=%x\n", 
hwd
.
dbg_ªgs
[0].
˘æ
);

593 #ifde‡
__¨m__


595 
vÆ
;

596 
bpödex
=1+(2*
debugªg
);

600 
	`¥ötf
("PTRACE_GETHBPREGS=%d\n",
PTRACE_GETHBPREGS
);

603 
vÆ
=0;

605 i‡(
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 0, &
vÆ
)==0)

607 
i
;

608 
hwb¥eg
;

609 
	`¥ötf
("BPREG0 (Info)=%x\n", 
vÆ
);

611 
	`¥ötf
("Setting bpáddress\n");

615 i‡(
b±y≥
==0)

618 *
rv
=
NULL
;

623 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
, &
rv
);

624 
	`¥ötf
("%d: Bef‹e: %d=%p\n", 
i
, 
bpödex
, 
rv
);

626 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
, &
addªss
);

627 
	`¥ötf
("i1=%d\n", 
i
, 
hwb¥eg
);

629 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
, &
rv
);

630 
	`¥ötf
("%d: A·î: %d=%p\n", 
i
, 
bpödex
, 
rv
);

634 
ªsu…
=
i
==0;

636 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

637 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

639 
	`¥ötf
("f1\n");

640 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_2
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

641 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

643 
	`¥ötf
("f2\n");

644 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_1
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

645 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

647 
	`¥ötf
("f3\n");

649 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_8
, 
ARM_BREAKPOINT_EXECUTE
, 2, 1);

650 i‡(
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
)<0)

652 
	`¥ötf
("FailureÅo set breakpoint\n");

653 
ªsu…
=
FALSE
;

660 
	`¥ötf
("bpödex=%d bpödex+1=%d\n", 
bpödex
, bpindex+1);

662 
	`¥ötf
("hwb¥eg=%x\n", 
hwb¥eg
);

664 
i
=
	`±ø˚
(
PTRACE_GETHBPREGS
, 
wtid
, 
bpödex
+1, &
hwb¥eg
);

665 
	`¥ötf
("a·î=%x\n", 
hwb¥eg
);

672 
bty≥
;

675 
	`¥ötf
("watchpoint\n");

677 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -
bpödex
, &
addªss
);

678 
	`¥ötf
("i1=%d\n", 
i
, 
hwb¥eg
);

680 
bty≥
=0;

681 i‡(
b±y≥
==1)

682 
bty≥
=
ARM_BREAKPOINT_STORE
;

684 i‡(
b±y≥
==2)

685 
bty≥
=
ARM_BREAKPOINT_LOAD
;

687 i‡(
b±y≥
==3)

688 
bty≥
=
ARM_BREAKPOINT_STORE
 | 
ARM_BREAKPOINT_LOAD
;

690 
hwb¥eg
=
	`ícode_˘æ_ªg
(0, 
ARM_BREAKPOINT_LEN_4
, 
bty≥
, 0, 1);

691 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -(
bpödex
+1), &
hwb¥eg
);

693 
	`¥ötf
("-bpödex=%d -(bpödex+1)=%d\n", -
bpödex
, -(bpindex+1));

694 
	`¥ötf
("i=%d (hwb¥eg=%x)\n", 
i
, 
hwb¥eg
);

695 
ªsu…
=
i
==0;

701 
	`¥ötf
("Faûuª gëtögÅhêdebug c≠abûôyÑegi°î f‹Åhªad %d (%d)\n", 
wtid
, 
î∫o
);

706 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

709 
r
,
r2
;

711 
uöçå_t
 
√wdr7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

714 
√wdr7
Úewdr7 | (1<<
debugªg
*2);

716 i‡(
b±y≥
==2)

717 
b±y≥
=3;

719 
√wdr7
Úewdr7 | (
b±y≥
 << (16+(
debugªg
*4)));

721 
	`¥ötf
("Sëtög DR7Åÿ%x\n", 
√wdr7
);

724 i‡(
bpsize
<=1)

725 
√wdr7
Úewdr7 | (0 << (18+(
debugªg
*4)));

727 i‡(
bpsize
<=2)

728 
√wdr7
Úewdr7 | (1 << (18+(
debugªg
*4)));

730 
√wdr7
Úewdr7 | (3 << (18+(
debugªg
*4)));

733 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[
debugªg
]), 
addªss
);

734 
r2
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 
√wdr7
);

736 
ªsu…
=(
r
==0Ë&& (
r2
==0);

737 i‡(!
ªsu…
)

739 
	`¥ötf
("Failure setting breakpoint\n");

742 
	`¥ötf
("ªsu…=%d (r=%dÑ2=%d)\n", 
ªsu…
, 
r
, 
r2
);

750 i‡(
wasPau£d
==0)

752 
r
;

754 
	`¥ötf
("Continue self brokenÅhread\n");

756 i‡(
de
.
debugevít
!=
SIGSTOP
)

760 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

761 
	`AddDebugEvítToQueue
(
p
, &
de
);

762 
td
->
isPau£d
=1;

767 
r
=
	`±ø˚
(
PTRACE_CONT
, 
wtid
, 0,0);

768 
	`¥ötf
("PTRACE_CONT=%d\n", 
r
);

770 
td
->
isPau£d
=0;

777 
	`¥ötf
("íd o‡SëBªakpoöàªached.Ñesu…=%d\n", 
ªsu…
);

784 
	`¥ötf
("SetBreakpoint from outsideÅhe debuggerthread. Waking debuggerthread\n");

786 #¥agm®
	`∑ck
(1)

789 
comm™d
;

790 
HANDLE
 
hPro˚ss
;

791 
tid
;

792 
debugªg
;

793 
uöt64_t
 
addªss
;

794 
b±y≥
;

795 
bpsize
;

796 } 
sb
;

797 #¥agm®
	`∑ck
()

799 
sb
.
comm™d
=
CMD_SETBREAKPOINT
;

800 
sb
.
hPro˚ss
=hProcess;

801 
sb
.
tid
=tid;

802 
sb
.
debugªg
=debugreg;

803 
sb
.
addªss
=(
uöçå_t
)address;

804 
sb
.
b±y≥
=bptype;

805 
sb
.
bpsize
=bpsize;

807 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

809 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

811 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
sb
, (sb), 0);

812 
	`WakeDebuggîThªad
();

813 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

815 
	`¥ötf
("Re˚ivedÑïly from debuggîÅhªad: %d\n", 
ªsu…
);

818 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

829  
ªsu…
;

831 
	}
}

833 
	$RemoveBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
,
wasW©chpoöt
)

838 
ªsu…
=
FALSE
;

840 
	`¥ötf
("RemoveBªakpoöt(%d, %d, %d, %d)\n", 
hPro˚ss
, 
tid
, 
debugªg
, 
wasW©chpoöt
);

841 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

843 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

845 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

847 
isdebugged
=
p
->
debuggedThªadEvít
.
thªadid
;

848 
wtid
;

849 
DebugEvít
 
de
;

851 
	`¥ötf
("Called fromÅhe debuggerthread itself\n");

853 i‡(
tid
==-1)

855 
i
;

856 
	`¥ötf
("Calling RemoveBreakpoint forállÅhreads\n");

857 
i
=0; i<
p
->
thªadli°pos
; i++)

859 i‡(
	`RemoveBªakpoöt
(
hPro˚ss
, 
p
->
thªadli°
[
i
].
tid
, 
debugªg
, 
wasW©chpoöt
)==
TRUE
)

860 
ªsu…
=
TRUE
;

865 
	`¥ötf
("specificÅhread\n");

867 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

868 
wasPau£d
=
td
->
isPau£d
;

870 i‡(
wasPau£d
==0)

873 
	`¥ötf
("Not currentlyÖaused\n");

874 
	`¥ötf
("GoingÅo killánd wait forÅhisÅhread\n");

876 
k
;

879 
k
=0;

880 (
td
Ë&& (td->
isPau£d
==0Ë&& (
k
<10))

882 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

883 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

885 
k
++;

888 
wtid
=
de
.
thªadid
;

891 
	`¥ötf
("----AFTER WAIT----\n");

893 
	`¥ötf
("a·î wtid=%d\n", 
wtid
);

894 
	`¥ötf
("^^^^AFTER WAIT^^^^\n");

898 
	`¥ötf
("TheÅhread I wantedÅo break wasálready broken. Yeeeh\n");

899 
wtid
=
isdebugged
;

903 
	`¥ötf
("Removög bªakpoöà‰omÅhªad %d\n", 
wtid
);

906 #ifde‡
__¨m__


907 
b¥eg
=0;

908 
i
,
i2
,
i3
;

909 *
a
=
NULL
;

911 
bpIndex
=1+(2*
debugªg
);

913 
	`¥ötf
("arm\n");

915 i‡(
wasW©chpoöt
)

917 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -
bpIndex
, &
b¥eg
);

918 
i2
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, -(
bpIndex
+1), &
b¥eg
);

922 
i
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpIndex
, &
b¥eg
);

923 
i2
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 
bpIndex
+1, &
b¥eg
);

928 
	`¥ötf
("i1=%d\n", 
i
);

930 
	`¥ötf
("i2=%d\n", 
i2
);

934 
i3
=
	`±ø˚
(
PTRACE_SETHBPREGS
, 
wtid
, 1, &
a
);

936 
ªsu…
=(
i
==0Ë&& (
i2
==0Ë&& (
i3
==0);

939 #ifde‡
__Ørch64__


940 
i
;

941 
u£r_hwdebug_°©e
 
hwd
;

942 
iovec
 
iov
;

944 
	`mem£t
(&
hwd
, 0, (hwd));

945 
	`mem£t
(&
iov
, 0, (iov));

946 
iov
.
iov_ba£
=&
hwd
;

947 
iov
.
iov_Àn
=(
hwd
);

949 
b∂i°
;

951 i‡(
wasW©chpoöt
)

952 
b∂i°
=
NT_ARM_HW_WATCH
;

954 
b∂i°
=
NT_ARM_HW_BREAK
;

956 
i
=
	`±ø˚
(
PTRACE_GETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

957 i‡(
i
!=0)

958 
	`¥ötf
("PTRACE_GETREGSET failed\n");

960 
hwd
.
dbg_ªgs
[
debugªg
].
addr
=0;

961 
hwd
.
dbg_ªgs
[
debugªg
].
˘æ
=0;

963 
i
=
	`±ø˚
(
PTRACE_SETREGSET
, 
wtid
, 
b∂i°
, &
iov
);

964 i‡(
i
!=0)

965 
	`¥ötf
("PTRACE_SETREGSET failed\n");

967 
ªsu…
=
i
;

970 #i‡
	`deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

971 
r
;

972 
uöçå_t
 
dr7
=0;

973 
	`¥ötf
("x86\n");

975 
dr7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

977 
dr7
&=~(3 << (
debugªg
*2));

978 
dr7
&=~(15 << (16+
debugªg
*4));

981 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[
debugªg
]), 0);

984 
r
=
	`±ø˚
(
PTRACE_POKEUSER
, 
wtid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 
dr7
);

985 i‡(
r
==0)

986 
ªsu…
=
TRUE
;

988 
	`¥ötf
("FaûuªÑemovög bªakpoöà‰omÅhªad %d\n", 
wtid
);

993 i‡(
wasPau£d
==0)

995 
r
;

996 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

998 
	`¥ötf
("Continue self brokenÅhread\n");

1000 i‡(
de
.
debugevít
!=
SIGSTOP
)

1002 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

1003 
	`AddDebugEvítToQueue
(
p
, &
de
);

1006 
td
->
isPau£d
=1;

1010 
r
=
	`±ø˚
(
PTRACE_CONT
, 
wtid
, 0,0);

1011 
	`¥ötf
("PTRACE_CONT=%d\n", 
r
);

1013 
td
->
isPau£d
=0;

1023 
	`¥ötf
("Called fromá secondaryÅhread\n");

1024 #¥agm®
	`∑ck
(1)

1027 
comm™d
;

1028 
HANDLE
 
hPro˚ss
;

1029 
tid
;

1030 
debugªg
;

1031 
wasW©chpoöt
;

1032 } 
rb
;

1033 #¥agm®
	`∑ck
()

1035 
rb
.
comm™d
=
CMD_REMOVEBREAKPOINT
;

1036 
rb
.
hPro˚ss
=hProcess;

1037 
rb
.
tid
=tid;

1038 
rb
.
debugªg
=debugreg;

1039 
rb
.
wasW©chpoöt
=wasWatchpoint;

1042 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1045 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

1047 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
rb
, (rb), 0);

1048 
	`WakeDebuggîThªad
();

1049 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1052 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1059 
	`¥ötf
("Invalid handle\n");

1061  
ªsu…
;

1062 
	}
}

1064 
	$GëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, 
PCONTEXT
 
C⁄ãxt
, 
ty≥
)

1071 
r
=
FALSE
;

1072 
	`¥ötf
("GëThªadC⁄ãxt(%d)\n", 
tid
);

1076 i‡(
tid
<=0)

1078 
	`¥ötf
("InvalidÅid\n");

1079  
FALSE
;

1082 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1084 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1088 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1090 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1092 
	`¥ötf
("Inside debuggerthread\n");

1094 i‡(
td
)

1096 
DebugEvít
 
de
;

1097 
wasPau£d
=
td
->
isPau£d
;

1098 
k
=0;

1101 (
td
->
isPau£d
==0Ë&& (
k
<10))

1103 
	`¥ötf
("ThisÅhread wasÇotÖaused. Pausing it\n");

1104 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

1105 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
de
, 
tid
, 100))

1108 
k
++;

1113 
k
=
	`gëRegi°îs
(
tid
, &
C⁄ãxt
->
ªgs
);

1117 
	`¥ötf
("gëRegi°îs(Ëªtu∫ed %d\n", 
k
);

1119 i‡(
k
==0)

1120 
r
=
TRUE
;

1122 
r
=
FALSE
;

1125 i‡(!
wasPau£d
)

1128 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1130 
	`¥ötf
("TheÅhread wasÇotÖaused, soÑesuming itÇow\n");

1132 i‡(
de
.
debugevít
!=
SIGSTOP
)

1134 
	`¥ötf
("Notá SIGSTOP. AddingÅo queueándÜeave suspended\n");

1135 
	`AddDebugEvítToQueue
(
p
, &
de
);

1136 
td
->
isPau£d
=1;

1140 
r
=‘ && (
	`±ø˚
(
PTRACE_CONT
, 
de
.
thªadid
, 0,0)==0));

1143 
td
->
isPau£d
=0;

1144 
	`¥ötf
("r=%d\n", 
r
);

1151 
	`¥ötf
("InvalidÅid\n");

1156 
	`¥ötf
("NotÅhe debuggerÅhread. PassÅo serverthread");

1157 #¥agm®
	`∑ck
(1)

1160 
comm™d
;

1161 
HANDLE
 
hPro˚ss
;

1162 
tid
;

1163 
ty≥
;

1164 } 
gtc
;

1165 #¥agm®
	`∑ck
()

1167 
gtc
.
comm™d
=
CMD_GETTHREADCONTEXT
;

1168 
gtc
.
hPro˚ss
=hProcess;

1169 
gtc
.
tid
=tid;

1170 
gtc
.
ty≥
=type;

1173 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1175 
	`¥ötf
("Sending messageÅoÅhe debuggerthread\n");

1177 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
gtc
, (gtc), 0);

1178 
	`WakeDebuggîThªad
();

1179 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
r
, ‘), 
MSG_WAITALL
);

1181 i‡(
r
)

1184 
uöt32_t
 
°ru˘size
;

1186 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
°ru˘size
, (°ru˘size), 
MSG_WAITALL
);

1187 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
C⁄ãxt
->
ªgs
, 
°ru˘size
, 
MSG_WAITALL
);

1191 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1197 
	`¥ötf
("invalid handle\n");

1200  
r
;

1201 
	}
}

1203 
	$SëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, *
C⁄ãxt
, 
ty≥
)

1210 
	}
}

1212 
	$Su•ídThªad
(
HANDLE
 
hPro˚ss
, 
tid
)

1221 
ªsu…
=-1;

1223 
	`¥ötf
("Su•ídThªad(%d)\n", 
tid
);

1224 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1226 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1227 
PThªadD©a
 
t
=
	`GëThªadD©a
(
p
, 
tid
);

1229 i‡(
t
==
NULL
)

1231 
	`¥ötf
("InvalidÅhread\n");

1235 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1238 
	`¥ötf
("InsideÅhe debuggerÅhread.\n");

1240 i‡(
t
->
isPau£d
)

1242 
	`¥ötf
("AlreadyÖaused\n");

1244 i‡(
t
->
su•ídCou¡
==0)

1248 i‡(
p
->
debuggedThªadEvít
.
thªadid
==
tid
)

1249 
t
->
su•ídedDevít
=
p
->
debuggedThªadEvít
;

1253 
t
->
su•ídedDevít
=*
	`FödThªadDebugEvítInQueue
(
p
,
tid
);

1254 
	`RemoveThªadDebugEvítFromQueue
(
p
, 
tid
);

1258 
t
->
su•ídCou¡
++;

1264 
	`¥ötf
("Not yetÖaused\n");

1266 
t
->
isPau£d
==0)

1268 
	`sysˇŒ
(
__NR_tkûl
, 
tid
, 
SIGSTOP
);

1269 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
t
->
su•ídedDevít
, 
tid
, 100))

1274 
t
->
su•ídCou¡
++;

1278  
t
->
su•ídCou¡
;

1285 
	`¥ötf
("Not fromÅhe debuggerÅhread. Switching...\n");

1286 #¥agm®
	`∑ck
(1)

1289 
comm™d
;

1290 
HANDLE
 
hPro˚ss
;

1291 
tid
;

1292 } 
°
;

1293 #¥agm®
	`∑ck
()

1295 
°
.
comm™d
=
CMD_SUSPENDTHREAD
;

1296 
°
.
hPro˚ss
=hProcess;

1297 
°
.
tid
=tid;

1299 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1301 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
°
, (st), 0);

1302 
	`WakeDebuggîThªad
();

1303 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1305 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1313 
	`¥ötf
("invalid handle\n");

1314 
ªsu…
=-1;

1317  
ªsu…
;

1319 
	}
}

1321 
	$ResumeThªad
(
HANDLE
 
hPro˚ss
, 
tid
)

1326 
ªsu…
;

1328 
	`¥ötf
("ResumeThªad(%d)\n", 
tid
);

1329 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1331 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1332 
PThªadD©a
 
t
=
	`GëThªadD©a
(
p
, 
tid
);

1334 i‡(
t
==
NULL
)

1336 
	`¥ötf
("InvalidÅhread\n");

1340 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1343 
	`¥ötf
("InsideÅhe debuggerÅhread.\n");

1345 i‡((
t
->
isPau£d
Ë&& (t->
su•ídCou¡
>0))

1348 
t
->
su•ídCou¡
--;

1350 
ªsu…
=
t
->
su•ídCou¡
;

1353 i‡(
t
->
su•ídCou¡
==0)

1356 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1357 
	`¥ötf
("suspeneCount==0\n");

1359 i‡(
t
->
su•ídedDevít
.
debugevít
==
SIGSTOP
)

1361 
	`¥ötf
("SIGSTOP: ContinueÅhread without queing\n");

1362 
	`±ø˚
(
PTRACE_CONT
, 
t
->
su•ídedDevít
.
thªadid
, 0,0);

1363 
td
->
isPau£d
=0;

1367 
	`¥ötf
("Notá SIGSTOP AddÅoÅheÉvent queue\n");

1368 
td
->
isPau£d
=1;

1369 
	`AddDebugEvítToQueue
(
p
, &
t
->
su•ídedDevít
);

1370 
	`WakeDebuggîThªad
();

1376 
	`¥ötf
("FailureÑesumingÅhisÅhread\n");

1385 
	`¥ötf
("Not fromÅhe debuggerÅhread. Switching...\n");

1386 #¥agm®
	`∑ck
(1)

1389 
comm™d
;

1390 
HANDLE
 
hPro˚ss
;

1391 
tid
;

1392 } 
π
;

1393 #¥agm®
	`∑ck
()

1395 
π
.
comm™d
=
CMD_RESUMETHREAD
;

1396 
π
.
hPro˚ss
=hProcess;

1397 
π
.
tid
=tid;

1399 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

1401 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
π
, (rt), 0);

1402 
	`WakeDebuggîThªad
();

1403 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

1405 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

1411 
	`¥ötf
("invalid handle\n");

1412 
ªsu…
=-1;

1415  
ªsu…
;

1416 
	}
}

1418 
	$RemoveThªadDebugEvítFromQueue
(
PPro˚ssD©a
 
p
, 
tid
)

1423 
ªsu…
=
FALSE
;

1424 
DebugEvítQueueEÀmít
 *
deqe
;

1426 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1430 
deqe
=
p
->
debugEvítQueue
.
tqh_fú°
;

1431 
deqe
)

1434 i‡(
deqe
->
de
.
thªadid
==
tid
)

1437 
	`TAILQ_REMOVE
(&
p
->
debugEvítQueue
, 
deqe
, 
íåõs
);

1439 
	`‰ì
(
deqe
);

1440 
ªsu…
=
TRUE
;

1445 
deqe
=deqe->
íåõs
.
tqe_√xt
;

1449 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1450  
ªsu…
;

1451 
	}
}

1453 
PDebugEvít
 
	$FödThªadDebugEvítInQueue
(
PPro˚ssD©a
 
p
, 
tid
)

1459 
PDebugEvít
 
ªsu…
=
NULL
;

1460 
DebugEvítQueueEÀmít
 *
deqe
;

1461 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1463 
deqe
=
p
->
debugEvítQueue
.
tqh_fú°
;

1464 
deqe
)

1466 i‡((
tid
==-1Ë|| (
deqe
->
de
.
thªadid
==tid))

1468 
ªsu…
=&
deqe
->
de
;

1472 
deqe
=deqe->
íåõs
.
tqe_√xt
;

1476 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1477  
ªsu…
;

1478 
	}
}

1480 
	$AddDebugEvítToQueue
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
)

1482 
DebugEvítQueueEÀmít
 *
deqe
;

1484 i‡(
devít
->
debugevít
==
SIGSTOP
)

1486 
	`¥ötf
("<<<<<--------------------SIGSTOP ADDED TO THE QUEUE!\n");

1489 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1491 
deqe
=
	`mÆloc
((
DebugEvítQueueEÀmít
));

1492 
deqe
->
de
=*
devít
;

1494 
	`TAILQ_INSERT_TAIL
(&
p
->
debugEvítQueue
, 
deqe
, 
íåõs
);

1496 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1497 
	}
}

1499 
	$GëSt›Sig«lFromThªad
(
tid
)

1501 
sigöfo_t
 
si
;

1502 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
tid
, 
NULL
, &
si
)==0)

1503  
si
.
si_signo
;

1506 
	}
}

1508 
	$WaôF‹DebugEvítN©ive
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
, 
tid
, 
timeout
)

1514 
cuºítTID
;

1515 
°©us
;

1516 
r
;

1526 
cuºítTID
=1;

1527 
cuºítTID
>0)

1529 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
 | 
WNOHANG
);

1533 i‡(
cuºítTID
>0)

1535 
devít
->
thªadid
=
cuºítTID
;

1536 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1538 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1539 i‡(
td
)

1540 
td
->
isPau£d
=1;

1543 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1544  
TRUE
;

1553 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1570 i‡(
timeout
>=0)

1574 i‡(
timeout
>0)

1576 
time•ec
 
ab°ime
;

1577 
timevÆ
 
cuºít
,
w™ãd
, 
diff
;

1578 
timedwaô
;

1582 
	`mem£t
(&
ab°ime
, 0, (abstime));

1583 
	`gëtimeofday
(&
cuºít
,
NULL
);

1585 
diff
.
tv_£c
=(
timeout
 / 1000);

1586 
diff
.
tv_u£c
=(
timeout
 % 1000)*1000;

1588 
	`timîadd
(&
cuºít
, &
diff
, &
w™ãd
);

1590 
ab°ime
.
tv_£c
=
w™ãd
.tv_sec;

1591 
ab°ime
.
tv_n£c
=
w™ãd
.
tv_u£c
*1000;

1593 
cuºítTID
=-1;

1594 
cuºítTID
<=0)

1596 
timedwaô
=
	`£m_timedwaô
(&
£m_DebugThªadEvít
, &
ab°ime
);

1600 i‡(
timedwaô
==0)

1607 
	`CheckF‹AndDi•©chComm™d
(
p
->
debuggîSîvî
);

1608 i‡(
Vîbo£Levñ
>10)

1609 
	`¥ötf
("CheckForAndDispatchCommandÑeturned\n");

1612 
PDebugEvít
 
e
=
	`FödThªadDebugEvítInQueue
(
p
, 
tid
);

1613 i‡(
e
)

1615 
	`¥ötf
("Thîêwa†®queuedÉvíàa·î CheckF‹AndDi•©chComm™d. TID=%ld (w™ãd %d)\n", 
e
->
thªadid
, 
tid
);

1616 
cuºítTID
=
e
->
thªadid
;

1618 
r
=
	`RemoveThªadDebugEvítFromQueue
(
p
, 
cuºítTID
);

1619 
	`¥ötf
("RemoveThªadDebugEvítFromQueuêªtu∫ed %d\n", 
r
);

1622 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
 | 
WNOHANG
);

1624 i‡(
Vîbo£Levñ
>10)

1625 
	`¥ötf
("cuºítTID = %d\n", 
cuºítTID
);

1627 i‡(
cuºítTID
>0)

1629 
devít
->
thªadid
=
cuºítTID
;

1630 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1632 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1633 i‡(
td
)

1634 
td
->
isPau£d
=1;

1636 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1637  
TRUE
;

1640 
	`¥ötf
("Stû»hîêsÿcuºítTID(%dËi†nŸÅhêßmêa†tid (%d)\n", 
cuºítTID
, 
tid
);

1641 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1643 
cuºítTID
=-1;

1648 i‡(
î∫o
==
ETIMEDOUT
)

1651  
FALSE
;

1670 
cuºítTID
=-1;

1671 
cuºítTID
<0)

1673 
cuºítTID
=
	`waôpid
(
tid
, &
°©us
, 
__WALL
);

1674 i‡(
cuºítTID
>0)

1676 
devít
->
thªadid
=
cuºítTID
;

1677 
devít
->
debugevít
=
	`GëSt›Sig«lFromThªad
(devít->
thªadid
);

1679 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
cuºítTID
);

1680 i‡(
td
)

1681 
td
->
isPau£d
=1;

1683 i‡((
tid
==-1Ë|| (
cuºítTID
==tid))

1684  
TRUE
;

1687 
	`AddDebugEvítToQueue
(
p
, 
devít
);

1690 i‡((
cuºítTID
==-1Ë&& (
î∫o
!=
EINTR
))

1692 
	`¥ötf
("WaôF‹DebugEvítN©ive: Inföôêwaô: CouldÇŸ waô f‹Åid %d (î∫o=%d)\n", 
tid
, 
î∫o
);

1693  
FALSE
;

1696 
cuºítTID
=-1;

1704  
FALSE
;

1706 
	}
}

1709 
	$WaôF‹DebugEvít
(
HANDLE
 
hPro˚ss
, 
PDebugEvít
 
devít
, 
timeout
)

1715 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1717 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1719 i‡(
p
->
debuggedThªadEvít
.
thªadid
==0)

1721 
r
=0;

1723 
°©us
;

1724 
tid
;

1725 
DebugEvítQueueEÀmít
 *
de
=
NULL
;

1728 
	`±hªad_muãx_lock
(&
p
->
debugEvítQueueMuãx
);

1729 
de
=
	`TAILQ_FIRST
(&
p
->
debugEvítQueue
);

1731 i‡(
de
)

1732 
	`TAILQ_REMOVE
(&
p
->
debugEvítQueue
, 
de
, 
íåõs
);

1735 
	`±hªad_muãx_u∆ock
(&
p
->
debugEvítQueueMuãx
);

1737 i‡(
de
)

1739 
	`¥ötf
("Rëu∫ög queuedÉvíà(sig=%d,Åhªad=%ld)\n", 
de
->de.
debugevít
, de->de.
thªadid
);

1740 i‡(
de
->de.
debugevít
==
SIGSTOP
)

1742 
	`¥ötf
("<---Something queuedá SIGSTOP--->\n");

1745 *
devít
=
de
->de;

1746 
p
->
debuggedThªadEvít
=*
devít
;

1747 
	`‰ì
(
de
);

1749 
r
=1;

1752 i‡(!
r
)

1753 
r
=
	`WaôF‹DebugEvítN©ive
(
p
, 
devít
, -1, 
timeout
);

1756 i‡(
r
)

1758 
p
->
debuggedThªadEvít
=*
devít
;

1761 i‡(
p
->
debuggedThªadEvít
.
debugevít
==
SIGTRAP
)

1763 
sigöfo_t
 
si
;

1764 
	`¥ötf
("SIGTRAP\n");

1769 #i‡(
	`deföed
(
__¨m__
Ë|| deföed(
__Ørch64__
))

1771 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
p
->
debuggedThªadEvít
.
thªadid
, 
NULL
, &
si
)==0)

1774 
p
->
debuggedThªadEvít
.
addªss
=(
uöçå_t
)
si
.
si_addr
;

1775 
	`¥ötf
("si.si_addr=%p\n", 
si
.
si_addr
);

1778 
	`¥ötf
("Failure getting siginfo forÅhisÅrap\n");

1781 #i‡
deföed
 
__i386__
 || deföed 
__x86_64__


1783 
uöçå_t
 
DR0
,
DR1
,
DR2
,
DR3
,
DR7
, 
IP
;

1784 
ªgDR6
 
DR6
;

1785 #i‡
deföed
 
__i386__


1786 
IP
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
ªgs
.
eù
), 0);

1788 
IP
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
ªgs
.
rù
), 0);

1790 
DR0
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[0]), 0);

1791 
DR1
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[1]), 0);

1792 
DR2
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[2]), 0);

1793 
DR3
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[3]), 0);

1795 
DR6
.
vÆue
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[6]), 0);

1796 
DR7
=
	`±ø˚
(
PTRACE_PEEKUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[7]), 0);

1798 
	`¥ötf
("DR0=%lx\n",
DR0
);

1799 
	`¥ötf
("DR1=%lx\n",
DR1
);

1800 
	`¥ötf
("DR2=%lx\n",
DR2
);

1801 
	`¥ötf
("DR3=%lx\n",
DR3
);

1802 
	`¥ötf
("DR6=%lx\n",
DR6
.
vÆue
);

1803 
	`¥ötf
("DR7=%lx\n",
DR7
);

1804 
	`¥ötf
("IP=%lx\n",
IP
);

1806 
p
->
debuggedThªadEvít
.
addªss
=0;

1807 i‡(
DR6
.
B0
)

1808 
p
->
debuggedThªadEvít
.
addªss
=
DR0
;

1810 i‡(
DR6
.
B1
)

1811 
p
->
debuggedThªadEvít
.
addªss
=
DR1
;

1813 i‡(
DR6
.
B2
)

1814 
p
->
debuggedThªadEvít
.
addªss
=
DR2
;

1816 i‡(
DR6
.
B3
)

1817 
p
->
debuggedThªadEvít
.
addªss
=
DR3
;

1819 i‡(
DR6
.
BS
)

1820 
p
->
debuggedThªadEvít
.
addªss
=1;

1823 
	`±ø˚
(
PTRACE_POKEUSER
, 
p
->
debuggedThªadEvít
.
thªadid
, 
	`off£tof
(
u£r
, 
u_debugªg
[6]), 0);

1826 
	`¥ötf
("p->debuggedThªadEvít.addªss=%lx\n", 
p
->
debuggedThªadEvít
.
addªss
);

1828 
devít
->
addªss
=
p
->
debuggedThªadEvít
.address;

1832  
r
;

1836 *
devít
=
p
->
debuggedThªadEvít
;

1837 
	`¥ötf
("CanÇot wait forá debugÉvent whenáÅhread is stillÖaused\n");

1838 
	`¥ötf
("tid=%d debugevít=%d\n", ()
devít
->
thªadid
, devít->
debugevít
);

1844 
	}
}

1846 
	$C⁄töueFromDebugEvít
(
HANDLE
 
hPro˚ss
, 
tid
, 
ign‹esig«l
)

1849 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1851 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1852 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
tid
);

1853 
sigöfo_t
 
si
;

1857 i‡(
p
->
debuggedThªadEvít
.
debugevít
<0)

1859 
	`¥ötf
("VirtualÉvent. Ignore\n");

1860 
p
->
debuggedThªadEvít
.
thªadid
=0;

1861 
p
->
debuggedThªadEvít
.
debugevít
=0;

1866 i‡(
td
==
NULL
)

1868 
	`¥ötf
("InvalidÅhread\n");

1869 
p
->
debuggedThªadEvít
.
thªadid
=0;

1876 i‡(
td
->
su•ídCou¡
>0)

1878 
	`¥ötf
("TrõdÅÿc⁄töuê®su•ídedÅhªad (su•ídcou¡=%d)\n", 
td
->
su•ídCou¡
);

1890 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
tid
, 
NULL
, &
si
)==0)

1892 
sig«l
=
ign‹esig«l
?0:
si
.
si_signo
;

1899 i‡((
sig«l
==19) || (signal==21))

1901 
sig«l
=0;

1906 
ªsu…
;

1907 i‡(
ign‹esig«l
==2)

1909 
	`¥ötf
("Single step\n");

1911 
ªsu…
=
	`±ø˚
(
PTRACE_SINGLESTEP
, 
tid
, 0,0);

1912 i‡(
ªsu…
!=0)

1914 
	`¥ötf
("PTRACE_SINGLESTEP faûed (%d). Shô h≠≥ns\n", 
î∫o
);

1915 
ªsu…
=
	`±ø˚
(
PTRACE_CONT
, 
tid
, 0,
sig«l
);

1921 
ªsu…
=
	`±ø˚
(
PTRACE_CONT
, 
tid
, 0,
sig«l
);

1928 i‡(
td
)

1929 
td
->
isPau£d
=0;

1932 i‡(
ªsu…
<0)

1934 
	`¥ötf
("FaûuªÅÿc⁄töuêthªad %d wôh sig«»%d\n", 
tid
, 
sig«l
);

1935 
	`RemoveThªadFromPro˚ss
(
p
, 
tid
);

1936 
p
->
debuggedThªadEvít
.
thªadid
=0;

1941 
p
->
debuggedThªadEvít
.
thªadid
=0;

1946 
	`¥ötf
("Failure getting sig info\n");

1950 
	`¥ötf
("Invalid handle\n");

1953 
	}
}

1955 
	$St›Debug
(
HANDLE
 
hPro˚ss
)

1957 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

1959 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

1960 
i
;

1961 
i
=0; i<
p
->
thªadli°pos
;i++)

1962 i‡(
	`±ø˚
(
PTRACE_DETACH
, 
p
->
thªadli°
[
i
].
tid
,0,0)<0)

1963 
	`¥ötf
("FaûedÅÿdëach from %ld\n", 
p
->
thªadli°
[
i
].
tid
);

1968 
	}
}

1970 
	$WrôePro˚ssMem‹yDebug
(
HANDLE
 
hPro˚ss
, 
PPro˚ssD©a
 
p
, *
ÕAddªss
, *
buf„r
, 
size
)

1972 
byãswrôãn
=0;

1973 
i
;

1975 
	`¥ötf
("WriteProcessMemoryDebug:");

1976 
i
=0; i<
size
; i++)

1978 
	`¥ötf
("%.2x ", ((*)
buf„r
)[
i
]);

1981 
	`¥ötf
("\n");

1986 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

1988 
isdebugged
=
	`FödPau£dThªad
(
p
);

1989 
DebugEvít
 
evít
;

1991 
evít
.
thªadid
=
isdebugged
;

1993 i‡(!
isdebugged
)

1996 
	`kûl
(
p
->
pid
, 
SIGSTOP
);

1999 
	`WaôF‹DebugEvítN©ive
(
p
, &
evít
, -1, -1);

2008 
off£t
=0;

2009 
max
=
size
-();

2011 *
addªss
=(*)
buf„r
;

2014 
off£t
<
max
)

2016 
	`¥ötf
("off£t=%d max=%d\n", 
off£t
, 
max
);

2017 
	`±ø˚
(
PTRACE_POKEDATA
, 
p
->
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)*
addªss
);

2019 
addªss
++;

2020 
off£t
+=();

2021 
byãswrôãn
+=();

2024 i‡(
off£t
<
size
)

2026 
	`¥ötf
("Stû»somêbyã†À·: %d\n", 
size
-
off£t
);

2028 
ﬁdvÆue
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
p
->
pid
, (*)(
uöçå_t
)
ÕAddªss
+
off£t
, (*)0);

2030 *
ﬁdbuf
=(*)&
ﬁdvÆue
;

2031 *
√wmem
=(*)
addªss
;

2032 
i
;

2034 
	`¥ötf
("ﬁdvÆue=%lx\n", 
ﬁdvÆue
);

2036 
i
=0; i< (
size
-
off£t
); i++)

2037 
ﬁdbuf
[
i
]=
√wmem
[i];

2039 
	`¥ötf
("√wvÆue=%lx\n", 
ﬁdvÆue
);

2042 
i
=
	`±ø˚
(
PTRACE_POKEDATA
, 
p
->
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)
ﬁdvÆue
);

2044 
	`¥ötf
("±ø˚Öokêªtu∫ed %d\n", 
i
);

2045 i‡(
i
>=0)

2046 
byãswrôãn
+=
size
-
off£t
;

2054 i‡(!
isdebugged
)

2056 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
evít
.
thªadid
);

2059 i‡(
evít
.
debugevít
==
SIGSTOP
)

2064 
	`±ø˚
(
PTRACE_CONT
, 
evít
.
thªadid
, 0,0);

2066 i‡(
td
)

2067 
td
->
isPau£d
=0;

2073 
	`¥ötf
("WrôePro˚ssMem‹yDebug: Addög u√x≥˘ed sig«»tÿevítqueuê”vít.debugevít=%dÉvít.thªadid)\n", 
evít
.
debugevít
,Évít.
thªadid
);

2075 
	`AddDebugEvítToQueue
(
p
, &
evít
);

2076 i‡(
td
)

2077 
td
->
isPau£d
=1;

2084 
	`¥ötf
("WriteProcessMemoryDebug from outsideÅhe debuggerthread. Waking debuggerthread\n");

2087 #¥agm®
	`∑ck
(1)

2090 
uöt8_t
 
comm™d
;

2091 
uöt32_t
 
pH™dÀ
;

2092 
uöt64_t
 
addªss
;

2093 
uöt32_t
 
size
;

2094 
d©a
[
size
];

2095 } 
wpm
;

2096 #¥agm®
	`∑ck
()

2099 
	`¥ötf
("sizeo‡wpm=%d\n", (
wpm
));

2100 
wpm
.
comm™d
=
CMD_WRITEPROCESSMEMORY
;

2101 
wpm
.
pH™dÀ
=
hPro˚ss
;

2102 
wpm
.
addªss
=(
uöçå_t
)
ÕAddªss
;

2103 
wpm
.
size
=size;

2104 
	`mem˝y
(
wpm
.
d©a
, 
buf„r
, 
size
);

2110 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

2112 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
wpm
, (wpm), 0);

2113 
	`WakeDebuggîThªad
();

2115 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
byãswrôãn
, (byãswrôãn), 
MSG_WAITALL
);

2117 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

2119 
	`¥ötf
("a·îÑecvÆ»byãswrôãn=%d\n", 
byãswrôãn
);

2124  
byãswrôãn
;

2125 
	}
}

2127 
	$WrôePro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
)

2129 
wrôãn
=0;

2131 
	`¥ötf
("WrôePro˚ssMem‹y(%d, %p, %p, %d\n", 
hPro˚ss
, 
ÕAddªss
, 
buf„r
, 
size
);

2133 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2135 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2137 i‡(
p
->
isDebugged
)

2141  
	`WrôePro˚ssMem‹yDebug
(
hPro˚ss
, 
p
, 
ÕAddªss
, 
buf„r
, 
size
);

2144 i‡(
	`±hªad_muãx_lock
(&
mem‹ymuãx
) == 0)

2146 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
p
->
pid
,0,0)==0)

2148 
°©us
;

2149 
pid_t
 
pid
=
	`waô
(&
°©us
);

2150 
off£t
=0;

2151 
max
=
size
-();

2153 *
addªss
=(*)
buf„r
;

2156 
off£t
<
max
)

2158 
	`¥ötf
("off£t=%d max=%d\n", 
off£t
, 
max
);

2159 
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)*
addªss
);

2161 
addªss
++;

2162 
off£t
+=();

2164 
wrôãn
+=();

2167 i‡(
off£t
<
size
)

2169 
	`¥ötf
("Stû»somêbyã†À·: %d\n", 
size
-
off£t
);

2171 
ﬁdvÆue
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
pid
, (*)(
uöçå_t
)
ÕAddªss
+
off£t
, (*)0);

2173 *
ﬁdbuf
=(*)&
ﬁdvÆue
;

2174 *
√wmem
=(*)
addªss
;

2175 
i
;

2177 
	`¥ötf
("ﬁdvÆue=%lx\n", 
ﬁdvÆue
);

2179 
i
=0; i< (
size
-
off£t
); i++)

2180 
ﬁdbuf
[
i
]=
√wmem
[i];

2182 
	`¥ötf
("√wvÆue=%lx\n", 
ﬁdvÆue
);

2185 
i
=
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, (*)((
uöçå_t
)
ÕAddªss
+
off£t
), (*)
ﬁdvÆue
);

2187 
	`¥ötf
("±ø˚Öokêªtu∫ed %d\n", 
i
);

2188 i‡(
i
>=0)

2189 
wrôãn
+=
size
-
off£t
;

2196 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

2201 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

2208  
wrôãn
;

2209 
	}
}

2211 
	$RódPro˚ssMem‹yDebug
(
HANDLE
 
hPro˚ss
, 
PPro˚ssD©a
 
p
, *
ÕAddªss
, *
buf„r
, 
size
)

2223 
byã§ód
=0;

2230 i‡(
p
->
debuggîThªadID
==
	`±hªad_£lf
())

2232 
isdebugged
=
	`FödPau£dThªad
(
p
);

2233 
DebugEvít
 
evít
;

2235 
evít
.
thªadid
=
isdebugged
;

2240 i‡(!
isdebugged
)

2243 
	`kûl
(
p
->
pid
, 
SIGSTOP
);

2246 i‡(
	`WaôF‹DebugEvítN©ive
(
p
, &
evít
, -1, -1)==
FALSE
)

2248 
	`¥ötf
("WaitForDebugEventNativeÑeturned FALSE forá wait withoutÅimeout\n");

2254 
öÊo›ã°
=0;

2256 
byã§ód
=-1;

2257 
byã§ód
==-1)

2259 
öÊo›ã°
++;

2261 i‡(
öÊo›ã°
>10)

2262 
	`¥ötf
("FUUU");

2268 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2269 
byã§ód
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2272 i‡((
byã§ód
<0Ë&& (
î∫o
!=
EINTR
))

2284 
byã§ód
=0;

2286 i‡(
isdebugged
)

2290 
f
;

2291 
mem∑th
[255];

2293 
	`•rötf
(
mem∑th
,"/¥oc/%d/èsk/%d/mem", 
p
->
pid
, ()
evít
.
thªadid
);

2295 
f
=
	`›í
(
mem∑th
, 
O_RDONLY
);

2296 
	`¥ötf
("f=%d\n", 
f
);

2297 i‡(
f
>=0)

2300 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2301 
byã§ód
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2303 i‡((
byã§ód
<0Ë&& (
î∫o
!=
EINTR
))

2306 
byã§ód
=0;

2308 
	`˛o£
(
f
);

2317 i‡(!
isdebugged
)

2319 
PThªadD©a
 
td
=
	`GëThªadD©a
(
p
, 
evít
.
thªadid
);

2322 i‡(
evít
.
debugevít
==
SIGSTOP
)

2327 
	`±ø˚
(
PTRACE_CONT
, 
evít
.
thªadid
, 0,0);

2329 i‡(
td
)

2330 
td
->
isPau£d
=0;

2336 
	`¥ötf
("RódPro˚ssMem‹yDebug: Addög u√x≥˘ed sig«»tÿevítqueuê”vít.debugevít=%dÉvít.thªadid=%d)\n", 
evít
.
debugevít
,Évít.
thªadid
);

2338 i‡(
td
)

2339 
td
->
isPau£d
=1;

2341 
	`AddDebugEvítToQueue
(
p
, &
evít
);

2343 
	`¥ötf
("Afterádd\n");

2345 
Vîbo£Levñ
=1000000000;

2355 
tid
=
p
->
pid
;

2359 #¥agm®
	`∑ck
(1)

2362 
uöt8_t
 
comm™d
;

2363 
uöt32_t
 
pH™dÀ
;

2364 
uöt64_t
 
addªss
;

2365 
uöt32_t
 
size
;

2366 
uöt8_t
 
com¥es£d
;

2367 } 
Ωm
;

2368 #¥agm®
	`∑ck
()

2371 
Ωm
.
comm™d
=
CMD_READPROCESSMEMORY
;

2372 
Ωm
.
pH™dÀ
=
hPro˚ss
;

2373 
Ωm
.
addªss
=(
uöçå_t
)
ÕAddªss
;

2374 
Ωm
.
size
=size;

2375 
Ωm
.
com¥es£d
=0;

2379 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

2383 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
Ωm
, (rpm), 0);

2388 
	`WakeDebuggîThªad
();

2390 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
byã§ód
, (byã§ód), 
MSG_WAITALL
);

2392 i‡(
Vîbo£Levñ
>10)

2393 
	`¥ötf
("A·î waôög f‹ debuggîÅhªad: byã§ód=%d\n", 
byã§ód
);

2395 i‡(
byã§ód
>0)

2396 
	`ªcvÆl
(
p
->
debuggîClõ¡
, 
buf„r
, 
byã§ód
, 
MSG_WAITALL
);

2399 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

2406 i‡(
Vîbo£Levñ
>10)

2407 
	`¥ötf
("RódPro˚ssMem‹yDebugÑëu∫†%d\n", 
byã§ód
);

2409  
byã§ód
;

2410 
	}
}

2412 
	$RódPro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
)

2424 
bªad
=0;

2427 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2429 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2433 i‡(
p
->
isDebugged
)

2437  
	`RódPro˚ssMem‹yDebug
(
hPro˚ss
, 
p
, 
ÕAddªss
, 
buf„r
, 
size
);

2442 i‡(
	`±hªad_muãx_lock
(&
mem‹ymuãx
) == 0)

2446 i‡(
	`±ø˚
(
PTRACE_ATTACH
, 
p
->
pid
,0,0)==0)

2448 
°©us
;

2450 
pid_t
 
pid
=
	`waô
(&
°©us
);

2452 
	`l£ek64
(
p
->
mem
, (
uöçå_t
)
ÕAddªss
, 
SEEK_SET
);

2454 
bªad
=
	`ªad
(
p
->
mem
, 
buf„r
, 
size
);

2456 i‡(
bªad
==-1)

2458 
bªad
=0;

2466 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

2469 
	`¥ötf
("±ø˚áâach faûed (pid=%d). Thi†sy°em mighànŸ bê¥›îlyÑoŸed\n", 
p
->
pid
);

2472 
	`±hªad_muãx_u∆ock
(&
mem‹ymuãx
);

2475 
	`¥ötf
("For someÑeason I failedÅo obtaináÜock\n");

2482 
	`fÊush
(
°dout
);

2484  
bªad
;

2485 
	}
}

2487 #ifde‡
__Ørch64__


2488 *
	$ödex
(c⁄° *
s
, 
c
)

2490 
i
=0;

2491 
i
=0; 
s
[i]!=0; i++)

2493 i‡(
s
[
i
]==
c
)

2494  &
s
[
i
];

2497  
NULL
;

2498 
	}
}

2501 
DWORD
 
	$PrŸe˘i⁄SåögToTy≥
(*
¥Ÿe˘i⁄°rög
)

2503 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 's'))

2504  
MEM_MAPPED
;

2506  
MEM_PRIVATE
;

2507 
	}
}

2509 
uöt32_t
 
	$PrŸe˘i⁄SåögToPrŸe˘i⁄
(*
¥Ÿe˘i⁄°rög
)

2511 
w
,
x
;

2513 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 'x'))

2514 
x
=1;

2516 
x
=0;

2518 i‡(
	`ödex
(
¥Ÿe˘i⁄°rög
, 'w'))

2519 
w
=1;

2521 
w
=0;

2523 i‡(
x
)

2526 i‡(
w
)

2527  
PAGE_EXECUTE_READWRITE
;

2529  
PAGE_EXECUTE_READ
;

2534 i‡(
w
)

2535  
PAGE_READWRITE
;

2537  
PAGE_READONLY
;

2539 
	}
}

2541 
	$AddToRegi⁄Li°
(
uöt64_t
 
ba£
, uöt64_à
size
, 
uöt32_t
 
ty≥
, uöt32_à
¥Ÿe˘i⁄
, 
Regi⁄Info
 **
li°
, *
pos
, *
max
)

2546 
	`¥ötf
("++>%Œx->%Œx : (%ŒxË - %d\n", ()
ba£
, ()ba£+
size
, ()size, 
ty≥
);

2548 (*
li°
)[*
pos
].
ba£addªss
=
ba£
;

2549 (*
li°
)[*
pos
].
size
=size;

2550 (*
li°
)[*
pos
].
ty≥
=type;

2551 (*
li°
)[*
pos
].
¥Ÿe˘i⁄
=protection;

2553 (*
pos
)++;

2555 i‡(*
pos
>=*
max
)

2557 
	`¥ötf
("resizeÜist\n");

2558 *
max
=(*max)*2;

2559 *
li°
=(
Regi⁄Info
 *)
	`ªÆloc
(*li°, (Regi⁄Info)*(*
max
));

2563 
	}
}

2565 
	$VútuÆQuîyExFuŒ
(
HANDLE
 
hPro˚ss
, 
uöt32_t
 
Êags
, 
Regi⁄Info
 **
röfo
, uöt32_à*
cou¡
)

2570 
∑ged⁄ly
=
Êags
 & 
VQE_PAGEDONLY
;

2571 
dúty⁄ly
=
Êags
 & 
VQE_DIRTYONLY
;

2572 
nosh¨ed
=
Êags
 & 
VQE_NOSHARED
;

2574 
	`¥ötf
("VirtualQueryExFull:\n");

2576 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2578 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2580 
sm≠s_«me
[64];

2581 
∑gem≠_«me
[64];

2583 
	`•rötf
(
sm≠s_«me
,"/¥oc/%d/sm≠s", 
p
->
pid
);

2584 
	`•rötf
(
∑gem≠_«me
,"/¥oc/%d/∑gem≠", 
p
->
pid
);

2586 
FILE
 *
m≠s
=
	`f›í
(
sm≠s_«me
, "r");

2587 
∑gem≠
=-1;

2589 
uöt64_t
 *
∑gem≠_íåõs
=
NULL
;

2591 i‡(
∑ged⁄ly
)

2593 
	`¥ötf
("pagedonly\n");

2594 
∑gem≠
=
	`›í
(
∑gem≠_«me
, 
O_RDONLY
);

2599 
∑gem≠_íåõs
=(
uöt64_t
 *)
	`mÆloc
(512*8);

2601 
	`¥ötf
("ÆloˇãdÖagem≠_íåõ†© %p\n", 
∑gem≠_íåõs
);

2605 i‡(
m≠s
 && (!
∑ged⁄ly
 || (
∑gem≠
>=0)))

2609 
°¨t
=0, 
°›
=0;

2610 
¥Ÿe˘i⁄°rög
[25];

2611 
x
[200];

2612 
pos
=0, 
max
=
∑ged⁄ly
?64:128;

2613 
Regi⁄Info
 *
r
;

2615 
	`¥ötf
("goingÅoállocateÑ\n");

2616 
r
=(
Regi⁄Info
 *)
	`mÆloc
((Regi⁄Info)*
max
);

2618 
	`¥ötf
("AŒoˇãdÑáà%p\n", 
r
);

2620 
isdúty
=0;

2621 
íd
=0;

2624 !
íd
)

2626 
_°¨t
, 
_°›
;

2627 
ãmp
[25];

2629 
íd
=
	`fgës
(
x
, 200, 
m≠s
)==0;

2636 i‡(
x
[
	`°æí
(x)-1]!='\n')

2640 
disˇrd
[100];

2644 
disˇrd
[99]=0;

2645 
	`fgës
(
disˇrd
, 99, 
m≠s
);

2646 } 
disˇrd
[99]!=0);

2649 
ãmp
[0]=0;

2650 
	`ssˇnf
(
x
, "%Œx-%Œx %24s", &
_°¨t
, &
_°›
, 
ãmp
);

2652 i‡((
íd
Ë|| (
ãmp
[0]!=0))

2655 i‡(
°¨t
)

2657 
∑s£d
=1;

2658 
DWORD
 
ty≥
=
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
);

2659 
DWORD
 
¥Ÿe˘i⁄
=
	`PrŸe˘i⁄SåögToPrŸe˘i⁄
(
¥Ÿe˘i⁄°rög
);

2665 i‡(
nosh¨ed
 && (
ty≥
==
MEM_MAPPED
))

2666 
∑s£d
=0;

2668 i‡(
dúty⁄ly
 && !
isdúty
)

2669 
∑s£d
=0;

2673 i‡(
∑s£d
)

2676 i‡(
∑ged⁄ly
)

2680 
uöt64_t
 
cuºít
=
°¨t
;

2681 
∑gesize
;

2682 #i‚de‡
PAGESIZE


2683 
∑gesize
=
	`gë∑gesize
();

2685 
∑gesize
=
PAGESIZE
;

2687 
cuºít
<
°›
)

2689 
i
;

2690 
cuºít°¨t
=-1;

2691 
off_t
 
off£t
=(
cuºít
 / 
∑gesize
)*8;

2692 
size_t
 
∑gecou¡
=(
°›
-
cuºít
Ë/ 
∑gesize
;

2693 i‡(
∑gecou¡
>512)

2694 
∑gecou¡
=512;

2696 
	`¥ötf
("-->%Œx->%Œx : %†(%Œx)\n", 
°¨t
, 
°›
, 
¥Ÿe˘i⁄°rög
, stop-start);

2698 
i
=
	`¥ód
(
∑gem≠
, 
∑gem≠_íåõs
, 
∑gecou¡
*8, 
off£t
);

2699 i‡(
i
==-1)

2701 
	`¥ötf
("off£t=%Œx,Öagecou¡=%dÑód=%d (%dË\n", ()
off£t
, ()
∑gecou¡
, 
i
/8, i);

2706 
i
=0; i<
∑gecou¡
; i++)

2708 i‡(
∑gem≠_íåõs
[
i
] >> 63)

2710 i‡(
cuºít°¨t
==-1)

2711 
cuºít°¨t
=
i
;

2717 i‡(
cuºít°¨t
!=-1)

2720 
	`AddToRegi⁄Li°
((
uöt64_t
)(
cuºít
+
cuºít°¨t
*
∑gesize
), (
i
-cuºít°¨t)*∑gesize, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2723 
cuºít°¨t
=-1;

2727 i‡(
cuºít°¨t
!=-1)

2730 
cou¡
=
∑gecou¡
-
cuºít°¨t
;

2731 
	`AddToRegi⁄Li°
((
uöt64_t
)(
cuºít
+
cuºít°¨t
*
∑gesize
), 
cou¡
*∑gesize, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2734 
cuºít
+=
∑gecou¡
*
∑gesize
;

2742 
	`AddToRegi⁄Li°
(
°¨t
, 
°›
-°¨t, 
ty≥
, 
¥Ÿe˘i⁄
, &
r
, &
pos
, &
max
);

2751 
isdúty
=0;

2752 
	`°r˝y
(
¥Ÿe˘i⁄°rög
, 
ãmp
);

2753 
°¨t
=
_°¨t
;

2754 
°›
=
_°›
;

2760 i‡(
dúty⁄ly
 && (
°¨t
!=0))

2763 
i
;

2764 
numbî
;

2765 
«me
[32];

2766 
i
=
	`ssˇnf
(
x
, "%31[^:]: %d", 
«me
, &
numbî
);

2767 i‡(
i
==2)

2769 i‡((
numbî
>0Ë&& ((
	`°rcmp
(
«me
,"Shared_Dirty")==0) || (strcmp(name,"Private_Dirty")==0)))

2770 
isdúty
=1;

2783 i‡(
m≠s
)

2784 
	`f˛o£
(
m≠s
);

2786 i‡(
∑gem≠
>=0)

2787 
	`˛o£
(
∑gem≠
);

2790 *
cou¡
=
pos
;

2791 *
röfo
=
r
;

2793 i‡(
∑gem≠_íåõs
)

2794 
	`‰ì
(
∑gem≠_íåõs
);

2796 
	`fÊush
(
°dout
);

2802 
	`¥ötf
("Faûuª m≠s=%∞∑gem≠=%d\n", 
m≠s
, 
∑gem≠
);

2805 i‡(
m≠s
)

2806 
	`f˛o£
(
m≠s
);

2808 
	`¥ötf
("Faûuª o≥nög /¥oc/%d/sm≠s", 
p
->
pid
);

2810 i‡(
∑gem≠
>=0)

2811 
	`˛o£
(
∑gem≠
);

2813 
	`¥ötf
("Faûuª o≥nög /¥oc/%d/∑gem≠", 
p
->
pid
);

2815 
	`fÊush
(
°dout
);

2824 
	}
}

2826 
	$VútuÆQuîyEx
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, 
PRegi⁄Info
 
röfo
, *
m≠¶öe
)

2833 
found
=0;

2837 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

2839 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

2840 
FILE
 *
m≠s
=
	`f›í
(
p
->maps, "r");

2841 i‡(
m≠s
)

2843 
x
[200];

2847 
röfo
->
¥Ÿe˘i⁄
=0;

2848 
röfo
->
ba£addªss
=(
uöçå_t
)
ÕAddªss
 & ~0xfff;

2849 
ÕAddªss
=(*)(
uöçå_t
)(
röfo
->
ba£addªss
);

2851 
	`fgës
(
x
, 200, 
m≠s
) )

2853 
°¨t
=0, 
°›
=0;

2854 
¥Ÿe˘i⁄°rög
[25];

2856 
x
[199]=0;

2858 i‡(
x
[
	`°æí
(x)-1]!='\n')

2860 
disˇrd
[100];

2864 
disˇrd
[99]=0;

2865 
	`fgës
(
disˇrd
, 99, 
m≠s
);

2866 } 
disˇrd
[99]!=0);

2872 
	`ssˇnf
(
x
, "%Œx-%Œx %s", &
°¨t
, &
°›
, 
¥Ÿe˘i⁄°rög
);

2875 i‡(
°›
 > ((
uöçå_t
)
ÕAddªss
) )

2877 
found
=1;

2879 i‡(((
uöçå_t
)
ÕAddªss
Ë>
°¨t
 )

2883 
röfo
->
¥Ÿe˘i⁄
=
	`PrŸe˘i⁄SåögToPrŸe˘i⁄
(
¥Ÿe˘i⁄°rög
);

2884 
röfo
->
ty≥
=
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
);

2885 
röfo
->
size
=
°›
-röfo->
ba£addªss
;

2889 
röfo
->
size
=
°¨t
-röfo->
ba£addªss
;

2890 
röfo
->
¥Ÿe˘i⁄
=
PAGE_NOACCESS
;

2891 
röfo
->
ty≥
=0;

2894 i‡(
m≠¶öe
!=
NULL
)

2895 
	`°r˝y
(
m≠¶öe
, 
x
);

2901 
	`f˛o£
(
m≠s
);

2903  
found
;

2907 
	`¥ötf
("Áûed o≥nög %s\n", 
p
->
m≠s
);

2912 
	}
}

2914 
	$SórchH™dÀLi°Pro˚ssCÆlback
(
PPro˚ssD©a
 
d©a
, *
pid
)

2920  (
d©a
->
pid
==*pid);

2921 
	}
}

2923 
HANDLE
 
	$O≥nPro˚ss
(
DWORD
 
pid
)

2926 
¥o˚s•©h
[100];

2927 
h™dÀ
;

2928 
	`•rötf
(
¥o˚s•©h
, "/¥oc/%d/", 
pid
);

2932 
h™dÀ
=
	`SórchH™dÀLi°
(
htPro˚sH™dÀ
, 
SórchH™dÀLi°Pro˚ssCÆlback
, &
pid
);

2933 i‡(
h™dÀ
)

2935 
	`¥ötf
("Already opened. Returning same handle\n");

2936 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
h™dÀ
);

2937 
p
->
Re„ªn˚Cou¡
++;

2938  
h™dÀ
;

2944 i‡(
	`chdú
(
¥o˚s•©h
)==0)

2949 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`mÆloc
((
Pro˚ssD©a
));

2951 
	`mem£t
(
p
, 0, (
Pro˚ssD©a
));

2953 
p
->
Re„ªn˚Cou¡
=1;

2954 
p
->
pid
=pid;

2955 
p
->
∑th
=
	`°rdup
(
¥o˚s•©h
);

2957 
	`•rötf
(
¥o˚s•©h
,"/¥oc/%d/m≠s", 
pid
);

2958 
p
->
m≠s
=
	`°rdup
(
¥o˚s•©h
);

2960 
	`•rötf
(
¥o˚s•©h
,"/¥oc/%d/mem", 
pid
);

2961 
p
->
mem
=
	`›í
(
¥o˚s•©h
, 
O_RDONLY
);

2964 
	`±hªad_muãx_öô
(&
p
->
exãnsi⁄Muãx
, 
NULL
);

2965 
p
->
hasLﬂdedExãnsi⁄
=0;

2966 
p
->
exãnsi⁄FD
=0;

2969 
p
->
isDebugged
=0;

2971 
p
->
thªadli°max
=0;

2972 
p
->
thªadli°pos
=0;

2973 
p
->
thªadli°
=
NULL
;

2975 
p
->
debuggedThªadEvít
.
thªadid
=0;

2977 
	`±hªad_muãx_öô
(&
p
->
debugEvítQueueMuãx
, 
NULL
);

2985 
	`TAILQ_INIT
(&
p
->
debugEvítQueue
);

2992  
	`Cª©eH™dÀFromPoöãr
(
p
, 
htPro˚sH™dÀ
);

2999 
	}
}

3002 
BOOL
 
	$Pro˚ss32Next
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
)

3007 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSPro˚ss
)

3009 
PPro˚ssLi°
 
∂
=(PPro˚ssLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3011 i‡(
∂
->
¥o˚ssLi°Iãøt‹
<∂->
¥o˚ssCou¡
)

3013 
¥o˚s£¡ry
->
PID
=
∂
->
¥o˚ssLi°
[∂->
¥o˚ssLi°Iãøt‹
].PID;

3014 
¥o˚s£¡ry
->
Pro˚ssName
=
∂
->
¥o˚ssLi°
[∂->
¥o˚ssLi°Iãøt‹
].ProcessName;

3015 
∂
->
¥o˚ssLi°Iãøt‹
++;

3017  
TRUE
;

3020  
FALSE
;

3023  
FALSE
;

3024 
	}
}

3029 
BOOL
 
	$Pro˚ss32Fú°
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
)

3034 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSPro˚ss
)

3036 
PPro˚ssLi°
 
∂
=(PPro˚ssLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3037 
∂
->
¥o˚ssLi°Iãøt‹
=0;

3038  
	`Pro˚ss32Next
(
hS«pshŸ
, 
¥o˚s£¡ry
);

3041  
FALSE
;

3042 
	}
}

3045 
BOOL
 
	$ModuÀ32Next
(
HANDLE
 
hS«pshŸ
, 
PModuÀLi°E¡ry
 
moduÀíåy
)

3048 
	`¥ötf
("ModuÀ32Fú°/Next(%d)\n", 
hS«pshŸ
);

3050 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSModuÀ
)

3052 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3054 i‡(
ml
->
moduÀLi°Iãøt‹
<ml->
moduÀCou¡
)

3056 
moduÀíåy
->
ba£Addªss
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].baseAddress;

3057 
moduÀíåy
->
moduÀName
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].moduleName;

3058 
moduÀíåy
->
moduÀSize
=
ml
->
moduÀLi°
[ml->
moduÀLi°Iãøt‹
].moduleSize;

3060 
ml
->
moduÀLi°Iãøt‹
++;

3064  
TRUE
;

3068 
	`¥ötf
("ModuÀ32Fú°/Next: Rëu∫ög fÆ£ beˇu£ ml->moduÀLi°Iãøt‹=%dánd ml->moduÀCou¡=%d\n", 
ml
->
moduÀLi°Iãøt‹
, ml->
moduÀCou¡
);

3069  
FALSE
;

3074 
	`¥ötf
("ModuÀ32Fú°/Next: GëH™dÀTy≥(hS«pshŸ)=%d\n",
	`GëH™dÀTy≥
(
hS«pshŸ
));

3075  
FALSE
;

3077 
	}
}

3080 
BOOL
 
	$ModuÀ32Fú°
(
HANDLE
 
hS«pshŸ
, 
PModuÀLi°E¡ry
 
moduÀíåy
)

3084 i‡(
	`GëH™dÀTy≥
(
hS«pshŸ
Ë=
htTHSModuÀ
)

3086 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`GëPoöãrFromH™dÀ
(
hS«pshŸ
);

3087 
ml
->
moduÀLi°Iãøt‹
=0;

3088  
	`ModuÀ32Next
(
hS«pshŸ
, 
moduÀíåy
);

3091  
FALSE
;

3092 
	}
}

3095 
HANDLE
 
	$Cª©eToﬁhñp32S«pshŸ
(
DWORD
 
dwFœgs
, DWORD 
th32Pro˚ssID
)

3098 i‡(
dwFœgs
 & 
TH32CS_SNAPPROCESS
)

3101 
max
=2048;

3102 
PPro˚ssLi°
 
∂
=(PPro˚ssLi°)
	`mÆloc
((
Pro˚ssLi°
));

3106 
∂
->
Re„ªn˚Cou¡
=1;

3107 
∂
->
¥o˚ssCou¡
=0;

3108 
∂
->
¥o˚ssLi°
=(
PPro˚ssLi°E¡ry
)
	`mÆloc
((
Pro˚ssLi°E¡ry
)* 
max
);

3110 
DIR
 *
¥ocfﬁdî
=
	`›ídú
("/proc/");

3112 
dúít
 *
cuºítfûe
;

3114 (
cuºítfûe
=
	`ªaddú
(
¥ocfﬁdî
)Ë!
NULL
)

3117 i‡(
	`°r•n
(
cuºítfûe
->
d_«me
, "1234567890")==
	`°æí
(currentfile->d_name))

3119 
pid
;

3120 
exï©h
[200];

3121 
¥o˚s•©h
[512];

3122 
	`¢¥ötf
(
exï©h
, 200, "/¥oc/%s/exe", 
cuºítfûe
->
d_«me
);

3123 
exï©h
[199]=0;

3125 
i
=
	`ªadlök
(
exï©h
, 
¥o˚s•©h
, 254);

3126 i‡(
i
 != -1)

3128 
exåafûe
[255];

3129 
f
;

3131 i‡(
i
>254)

3132 
i
=254;

3134 
¥o˚s•©h
[
i
]=0;

3136 
	`¢¥ötf
(
exåafûe
, 255, "/¥oc/%s/cmdlöe", 
cuºítfûe
->
d_«me
);

3137 
exåafûe
[254]=0;

3139 
f
=
	`›í
(
exåafûe
, 
O_RDONLY
);

3140 i‡(
i
!=-1)

3142 
i
=
	`ªad
(
f
, 
exåafûe
, 255);

3143 i‡(
i
>=0)

3144 
exåafûe
[
i
]=0;

3146 
exåafûe
[0]=0;

3148 
	`°rˇt
(
¥o˚s•©h
," ");

3149 
	`°rˇt
(
¥o˚s•©h
,
exåafûe
);

3151 
	`˛o£
(
f
);

3155 
	`ssˇnf
(
cuºítfûe
->
d_«me
, "%d", &
pid
);

3159 
∂
->
¥o˚ssLi°
[∂->
¥o˚ssCou¡
].
PID
=
pid
;

3160 
∂
->
¥o˚ssLi°
[∂->
¥o˚ssCou¡
].
Pro˚ssName
=
	`°rdup
(
¥o˚s•©h
);

3162 
∂
->
¥o˚ssCou¡
++;

3164 i‡(
∂
->
¥o˚ssCou¡
>=
max
)

3166 
max
=max*2;

3167 
∂
->
¥o˚ssLi°
=(
PPro˚ssLi°E¡ry
)
	`ªÆloc
’l->¥o˚ssLi°, 
max
*(
Pro˚ssLi°E¡ry
));

3176 
	`˛o£dú
(
¥ocfﬁdî
);

3178  
	`Cª©eH™dÀFromPoöãr
(
∂
, 
htTHSPro˚ss
);

3181 i‡(
dwFœgs
 & 
TH32CS_SNAPMODULE
)

3185 
max
=64;

3186 
m≠fûe
[255];

3187 
FILE
 *
f
=
NULL
;

3188 
	`¢¥ötf
(
m≠fûe
, 255, "/¥oc/%d/m≠s", 
th32Pro˚ssID
);

3190 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`mÆloc
((
ModuÀLi°
));

3192 
	`¥ötf
("Cª©ög moduÀÜi° f‹Öro˚s†%d\n", 
th32Pro˚ssID
);

3194 
ml
->
Re„ªn˚Cou¡
=1;

3195 
ml
->
moduÀCou¡
=0;

3196 
ml
->
moduÀLi°
=(
PModuÀLi°E¡ry
)
	`mÆloc
((
ModuÀLi°E¡ry
)*
max
);

3199 
f
=
	`f›í
(
m≠fûe
, "r");

3202 i‡(
f
)

3204 
s
[512];

3205 
	`mem£t
(
s
, 0, 512);

3207 
PModuÀLi°E¡ry
 
mÀ
=
NULL
;

3208 
ph™dÀ
=
	`O≥nPro˚ss
(
th32Pro˚ssID
);

3209 
hasVÆidModuÀSize
=0;

3213 
	`fgës
(
s
, 511, 
f
))

3215 
°¨t
, 
°›
;

3216 
mem‹yønge
[64],
¥Ÿe˘i⁄°rög
[32],
moduÀ∑th
[511];

3217 
uöt32_t
 
magic
;

3219 
moduÀ∑th
[0]='\0';

3220 
	`mem£t
(
moduÀ∑th
, 0, 255);

3223 
	`ssˇnf
(
s
, "%Œx-%Œx %†%*†%*†%*†%[^\t\n]\n", &
°¨t
, &
°›
, 
¥Ÿe˘i⁄°rög
, 
moduÀ∑th
);

3225 i‡(
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
)==
MEM_MAPPED
)

3228 i‡(
moduÀ∑th
[0])

3230 
i
;

3231 i‡(
	`°rcmp
(
moduÀ∑th
, "[heap]")==0)

3234 
	`¥ötf
("%s\n", 
moduÀ∑th
);

3236 i‡(
	`°rcmp
(
moduÀ∑th
, "[vdso]")!=0)

3238 
i
=0; 
moduÀ∑th
[i]; i++)

3240 i‡((
moduÀ∑th
[
i
]=='[') || (modulepath[i]==']'))

3241 
moduÀ∑th
[
i
]='_';

3245 i‡((
mÀ
Ë&& (
	`°rcmp
(
moduÀ∑th
, mÀ->
moduÀName
)==0))

3248 i‡(
hasVÆidModuÀSize
==0)

3249 
mÀ
->
moduÀSize
=
°›
-(mÀ->
ba£Addªss
);

3260 
i
=
	`RódPro˚ssMem‹y
(
ph™dÀ
, (*)
°¨t
, &
magic
, 4);

3261 i‡(
i
==0)

3269 i‡(
magic
!=0x464c457f)

3277 
mÀ
=&
ml
->
moduÀLi°
[ml->
moduÀCou¡
];

3278 
mÀ
->
moduÀName
=
	`°rdup
(
moduÀ∑th
);

3279 
mÀ
->
ba£Addªss
=
°¨t
;

3280 
mÀ
->
moduÀSize
=
	`GëModuÀSize
(
moduÀ∑th
, 0);

3282 
hasVÆidModuÀSize
=
mÀ
->
moduÀSize
!=0;

3286 
ml
->
moduÀCou¡
++;

3288 i‡(
ml
->
moduÀCou¡
>=
max
)

3291 
max
=max*2;

3292 
ml
->
moduÀLi°
=(
PModuÀLi°E¡ry
)
	`ªÆloc
(ml->moduÀLi°, 
max
* (
ModuÀLi°E¡ry
));

3298 
mÀ
=
NULL
;

3304 
	`Clo£H™dÀ
(
ph™dÀ
);

3306 
	`f˛o£
(
f
);

3308  
	`Cª©eH™dÀFromPoöãr
(
ml
, 
htTHSModuÀ
);

3312 
	`¥ötf
("Faûed o≥nög %s\n", 
m≠fûe
);

3322 
	}
}

3324 
	$Clo£H™dÀ
(
HANDLE
 
h
)

3326 
i
;

3327 
h™dÀTy≥
 
ht
=
	`GëH™dÀTy≥
(
h
);

3330 i‡(
ht
==
htTHSModuÀ
)

3332 
ModuÀLi°
 *
ml
=(
PModuÀLi°
)
	`GëPoöãrFromH™dÀ
(
h
);

3333 
ml
->
Re„ªn˚Cou¡
--;

3334 i‡(
ml
->
Re„ªn˚Cou¡
<=0)

3337 
i
=0; i<
ml
->
moduÀCou¡
; i++)

3338 
	`‰ì
(
ml
->
moduÀLi°
[
i
].
moduÀName
);

3340 
	`‰ì
(
ml
->
moduÀLi°
);

3341 
	`‰ì
(
ml
);

3343 
	`RemoveH™dÀ
(
h
);

3347 i‡(
ht
==
htTHSPro˚ss
)

3349 
Pro˚ssLi°
 *
∂
=(
PPro˚ssLi°
)
	`GëPoöãrFromH™dÀ
(
h
);

3352 
∂
->
Re„ªn˚Cou¡
--;

3354 i‡(
∂
->
Re„ªn˚Cou¡
<=0)

3357 
i
=0; i<
∂
->
¥o˚ssCou¡
; i++)

3358 
	`‰ì
(
∂
->
¥o˚ssLi°
[
i
].
Pro˚ssName
);

3360 
	`‰ì
(
∂
->
¥o˚ssLi°
);

3361 
	`‰ì
(
∂
);

3363 
	`RemoveH™dÀ
(
h
);

3367 i‡(
ht
==
htPro˚sH™dÀ
)

3369 
PPro˚ssD©a
 
pd
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
h
);

3371 
pd
->
Re„ªn˚Cou¡
--;

3372 i‡(
pd
->
Re„ªn˚Cou¡
<=0)

3374 
	`‰ì
(
pd
->
m≠s
);

3375 
	`‰ì
(
pd
->
∑th
);

3376 
	`˛o£
(
pd
->
mem
);

3377 
	`‰ì
(
pd
);

3379 
	`RemoveH™dÀ
(
h
);

3383 i‡(
ht
==
htN©iveThªadH™dÀ
)

3385 
uöt64_t
 *
th
=
	`GëPoöãrFromH™dÀ
(
h
);

3386 
	`¥ötf
("ClosingÅhread handle\n");

3388 
	`‰ì
(
th
);

3389 
	`RemoveH™dÀ
(
h
);

3392 
	`RemoveH™dÀ
(
h
);

3395 
	}
}

3397 
	$öôAPI
()

3399 
	}
}

	@api.h

8 #i‚de‡
API_H_


9 
	#API_H_


	)

11 
	~<°döt.h
>

13 
	~"p‹thñp.h
"

14 
	~"c⁄ãxt.h
"

26 #ifde‡
HAS_LINUX_USER_H


32 
	#VQE_PAGEDONLY
 1

	)

33 
	#VQE_DIRTYONLY
 2

	)

34 
	#VQE_NOSHARED
 4

	)

39 
	mba£Addªss
;

40 
	mmoduÀSize
;

41 *
	mmoduÀName
;

43 } 
	tModuÀLi°E¡ry
, *
	tPModuÀLi°E¡ry
;

47 
	mPID
;

48 *
	mPro˚ssName
;

50 } 
	tPro˚ssLi°E¡ry
, *
	tPPro˚ssLi°E¡ry
;

52 #¥agm®
∑ck
(1)

56 
uöt8_t
 
	mnum_bΩs
;

57 
uöt8_t
 
	mnum_wΩs
;

58 
uöt8_t
 
	mwp_Àn
;

59 
uöt8_t
 
	mdebug_¨ch
;

61 } 
	tHBP_RESOURCE_INFO
, *
	tPHBP_RESOURCE_INFO
;

63 #ifde‡
__¨m__


85 
	mdebugevít
;

86 
öt64_t
 
	mthªadid
;

89 
uöt64_t
 
	maddªss
;

91 
uöt8_t
 
	mmaxBªakpoötCou¡
;

92 
uöt8_t
 
	mmaxW©chpoötCou¡
;

93 
uöt8_t
 
	mmaxSh¨edBªakpoöts
;

97 } 
	tDebugEvít
, *
	tPDebugEvít
;

99 
	sDebugEvítQueueEÀmít
 {

101 
DebugEvít
 
	mde
;

104 #¥agm®
∑ck
()

106 
TAILQ_HEAD
(
debugEvítQueueHód
, 
DebugEvítQueueEÀmít
);

110 
	mtid
;

111 
	misPau£d
;

112 
	msu•ídCou¡
;

113 
DebugEvít
 
	msu•ídedDevít
;

114 } 
	tThªadD©a
, *
	tPThªadD©a
;

117 
	mRe„ªn˚Cou¡
;

118 
	mpid
;

119 
	mm≠fd
;

120 *
	m∑th
;

121 *
	mm≠s
;

122 
	mmem
;

123 
	mhasLﬂdedExãnsi⁄
;

124 
	m√vîF‹˚LﬂdExãnsi⁄
;

125 
±hªad_muãx_t
 
	mexãnsi⁄Muãx
;

126 
	mexãnsi⁄FD
;

128 
	misDebugged
;

129 
±hªad_t
 
	mdebuggîThªadID
;

131 
PThªadD©a
 
	mthªadli°
;

132 
	mthªadli°max
;

133 
	mthªadli°pos
;

135 
DebugEvít
 
	mdebuggedThªadEvít
;

137 
	mdebuggîSîvî
;

138 
	mdebuggîClõ¡
;

143 
±hªad_muãx_t
 
	mdebugEvítQueueMuãx
;

145 
debugEvítQueueHód
 
	mdebugEvítQueue
;

146 } 
	tPro˚ssD©a
, *
	tPPro˚ssD©a
;

150 #¥agm®
∑ck
(1)

152 
uöt64_t
 
	mba£addªss
;

153 
uöt64_t
 
	msize
;

154 
uöt32_t
 
	m¥Ÿe˘i⁄
;

155 
uöt32_t
 
	mty≥
;

156 } 
	tRegi⁄Info
, *
	tPRegi⁄Info
;

157 #¥agm®
∑ck
()

159 #i‡
deföed
 
__i386__
 || deföed 
__x86_64__


160 
	s_ªgDR6


163 
uöçå_t
 
	mvÆue
;

165 
	mB0
 :1;

166 
	mB1
 :1;

167 
	mB2
 :1;

168 
	mB3
 :1;

169 
	mRe£rved
 :9;

170 
	mBD
 :1;

171 
	mBS
 :1;

172 
	mBT
 :1;

175 } 
	t__©åibuã__
((
	t__∑cked__
)Ë
	tªgDR6
,*
	tPªgDR6
;

182 
Clo£H™dÀ
(
HANDLE
 
h
);

183 
BOOL
 
Pro˚ss32Next
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
);

184 
BOOL
 
Pro˚ss32Fú°
(
HANDLE
 
hS«pshŸ
, 
PPro˚ssLi°E¡ry
 
¥o˚s£¡ry
);

185 
HANDLE
 
Cª©eToﬁhñp32S«pshŸ
(
DWORD
 
dwFœgs
, DWORD 
th32Pro˚ssID
);

186 
HANDLE
 
O≥nPro˚ss
(
DWORD
 
pid
);

187 
VútuÆQuîyEx
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, 
PRegi⁄Info
 
röfo
, *
m≠¶öe
);

188 
VútuÆQuîyExFuŒ
(
HANDLE
 
hPro˚ss
, 
uöt32_t
 
Êags
, 
Regi⁄Info
 **
röfo
, uöt32_à*
cou¡
);

189 
RódPro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
);

190 
WrôePro˚ssMem‹y
(
HANDLE
 
hPro˚ss
, *
ÕAddªss
, *
buf„r
, 
size
);

192 
SèπDebug
(
HANDLE
 
hPro˚ss
);

193 
St›Debug
(
HANDLE
 
hPro˚ss
);

195 
WaôF‹DebugEvítN©ive
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
, 
tid
, 
timeout
);

196 
WaôF‹DebugEvít
(
HANDLE
 
hPro˚ss
, 
PDebugEvít
 
devít
, 
timeout
);

197 
C⁄töueFromDebugEvít
(
HANDLE
 
hPro˚ss
, 
tid
, 
ign‹esig«l
);

198 
GëDebugP‹t
(
HANDLE
 
hPro˚ss
);

200 
SëBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, *
addªss
, 
b±y≥
, 
bpsize
);

201 
RemoveBªakpoöt
(
HANDLE
 
hPro˚ss
, 
tid
, 
debugªg
, 
wasW©chpoöt
);

203 
Su•ídThªad
(
HANDLE
 
hPro˚ss
, 
tid
);

204 
ResumeThªad
(
HANDLE
 
hPro˚ss
, 
tid
);

206 
GëThªadC⁄ãxt
(
HANDLE
 
hPro˚ss
, 
tid
, 
PCONTEXT
 
C⁄ãxt
, 
ty≥
);

209 
PDebugEvít
 
FödThªadDebugEvítInQueue
(
PPro˚ssD©a
 
p
, 
tid
);

210 
AddDebugEvítToQueue
(
PPro˚ssD©a
 
p
, 
PDebugEvít
 
devít
);

211 
RemoveThªadDebugEvítFromQueue
(
PPro˚ssD©a
 
p
, 
tid
);

213 
öôAPI
();

215 
±hªad_muãx_t
 
debugsockëmuãx
;

	@ceserver.c

1 
	~"embedded.h
"

2 
	~<°dio.h
>

3 
	~"˚£rvî.h
"

5 
	#CE_SERVER__RECEIVE_BUFFER_SIZE
 (1000)

	)

12 
	$mylog
(*
b
, 
uöt32_t
 
s
)

14 
uöt32_t
 
i
 = 0; i < 
s
; i++)

15 
	`¥ötf
("%02X ", 
b
[
i
]);

16 
	`¥ötf
("\n");

17 
	}
}

19 
EMBEDDED__rc_t
 
	$CE_SERVER__ªcv_Æl
(*
buf„r
, 
uöt32_t
 
size
)

21 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

22 
uöt32_t
 
tŸÆ_ª˚ived
 = 0;

23 
uöt32_t
 
cuºít_ª˚ived
 = 0;

25 
tŸÆ_ª˚ived
 < 
size
) {

26 
rc
 = 
	`EMBEDDED__ªcv
(&
buf„r
[
tŸÆ_ª˚ived
], (
size
 -ÅŸÆ_ª˚ived), &
cuºít_ª˚ived
);

27 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

29 
tŸÆ_ª˚ived
 +
cuºít_ª˚ived
;

32 
	`mylog
((*)
buf„r
, 
tŸÆ_ª˚ived
);

33 
Exô
:

34  
rc
;

35 
	}
}

37 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
()

39 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

40 
CeCª©eToﬁhñp32S«pshŸ
 
∑øms
 = {0};

42 
rc
 = 
	`CE_SERVER__ªcv_Æl
(&
∑øms
, (params));

43 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

45 
rc
 = 
	`EMBEDDED__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
(
∑øms
);

46 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

48 
rc
 = 
EMBEDDED_SUCCESS
;

49 
Exô
:

50  
rc
;

51 
	}
}

53 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_comm™d
(
uöt8_t
 
comm™d_id
)

55 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

57 
comm™d_id
) {

58 
CMD_CREATETOOLHELP32SNAPSHOT
:

59 
	`EMBEDDED__log
("Handling CMD_CREATETOOLHELP32SNAPSHOT");

60 
rc
 = 
	`CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
();

63 
rc
 = 
EMBEDDED_BAD_COMMAND_ID
;

66  
rc
;

67 
	}
}

69 
EMBEDDED__rc_t
 
	$CE_SERVER__h™dÀ_c⁄√˘i⁄
()

71 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

72 
uöt8_t
 
comm™d_id
 = 0;

74 
TRUE
) {

75 
rc
 = 
	`CE_SERVER__ªcv_Æl
(&
comm™d_id
, 1);

76 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

78 
rc
 = 
	`CE_SERVER__h™dÀ_comm™d
(
comm™d_id
);

79 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
Exô
);

82 
Exô
:

83  
rc
;

84 
	}
}

	@ceserver.h

8 #i‚de‡
CESERVER_H_


9 
	#CESERVER_H_


	)

11 
	~<°döt.h
>

12 
	~<sys/ty≥s.h
>

13 
	~"p‹thñp.h
"

15 
	#CMD_GETVERSION
 0

	)

16 
	#CMD_CLOSECONNECTION
 1

	)

17 
	#CMD_TERMINATESERVER
 2

	)

18 
	#CMD_OPENPROCESS
 3

	)

19 
	#CMD_CREATETOOLHELP32SNAPSHOT
 4

	)

20 
	#CMD_PROCESS32FIRST
 5

	)

21 
	#CMD_PROCESS32NEXT
 6

	)

22 
	#CMD_CLOSEHANDLE
 7

	)

23 
	#CMD_VIRTUALQUERYEX
 8

	)

24 
	#CMD_READPROCESSMEMORY
 9

	)

25 
	#CMD_WRITEPROCESSMEMORY
 10

	)

26 
	#CMD_STARTDEBUG
 11

	)

27 
	#CMD_STOPDEBUG
 12

	)

28 
	#CMD_WAITFORDEBUGEVENT
 13

	)

29 
	#CMD_CONTINUEFROMDEBUGEVENT
 14

	)

30 
	#CMD_SETBREAKPOINT
 15

	)

31 
	#CMD_REMOVEBREAKPOINT
 16

	)

32 
	#CMD_SUSPENDTHREAD
 17

	)

33 
	#CMD_RESUMETHREAD
 18

	)

34 
	#CMD_GETTHREADCONTEXT
 19

	)

35 
	#CMD_SETTHREADCONTEXT
 20

	)

36 
	#CMD_GETARCHITECTURE
 21

	)

37 
	#CMD_MODULE32FIRST
 22

	)

38 
	#CMD_MODULE32NEXT
 23

	)

40 
	#CMD_GETSYMBOLLISTFROMFILE
 24

	)

41 
	#CMD_LOADEXTENSION
 25

	)

43 
	#CMD_ALLOC
 26

	)

44 
	#CMD_FREE
 27

	)

45 
	#CMD_CREATETHREAD
 28

	)

46 
	#CMD_LOADMODULE
 29

	)

47 
	#CMD_SPEEDHACK_SETSPEED
 30

	)

49 
	#CMD_VIRTUALQUERYEXFULL
 31

	)

50 
	#CMD_GETREGIONINFO
 32

	)

53 
	#CMD_COMMANDLIST2
 255

	)

61 #¥agm®
∑ck
(1)

63 
	mvîsi⁄
;

64 
	m°rögsize
;

66 } 
	tCeVîsi⁄
, *
	tPCeVîsi⁄
;

69 
DWORD
 
	mdwFœgs
;

70 
DWORD
 
	mth32Pro˚ssID
;

71 } 
	tCeCª©eToﬁhñp32S«pshŸ
, *
	tPCeCª©eToﬁhñp32S«pshŸ
;

74 
	mªsu…
;

75 
	mpid
;

76 
	m¥o˚s¢amesize
;

78 } 
	tCePro˚ssE¡ry
, *
	tPCePro˚ssE¡ry
;

81 
	mªsu…
;

82 
öt64_t
 
	mmoduÀba£
;

83 
	mmoduÀsize
;

84 
	mmoduÀ«mesize
;

87 } 
	tCeModuÀE¡ry
, *
	tPCeModuÀE¡ry
;

90 
	mh™dÀ
;

91 
uöt64_t
 
	mba£addªss
;

92 } 
	tCeVútuÆQuîyExI≈ut
, *
	tPCeVútuÆQuîyExI≈ut
;

95 
uöt8_t
 
	mªsu…
;

96 
uöt32_t
 
	m¥Ÿe˘i⁄
;

97 
uöt32_t
 
	mty≥
;

98 
uöt64_t
 
	mba£addªss
;

99 
uöt64_t
 
	msize
;

100 } 
	tCeVútuÆQuîyExOuçut
, *
	tPCeVútuÆQuîyExOuçut
;

103 
	mh™dÀ
;

104 
uöt8_t
 
	mÊags
;

105 } 
	tCeVútuÆQuîyExFuŒI≈ut
, *
	tPCeVútuÆQuîyExFuŒI≈ut
;

108 
uöt32_t
 
	m¥Ÿe˘i⁄
;

109 
uöt32_t
 
	mty≥
;

110 
uöt64_t
 
	mba£addªss
;

111 
uöt64_t
 
	msize
;

112 } 
	tCeVútuÆQuîyExFuŒOuçut
, *
	tPCeVútuÆQuîyExFuŒOuçut
;

115 
uöt32_t
 
	mh™dÀ
;

116 
uöt64_t
 
	maddªss
;

117 
uöt32_t
 
	msize
;

118 
uöt8_t
 
	mcom¥ess
;

119 } 
	tCeRódPro˚ssMem‹yI≈ut
, *
	tPCeRódPro˚ssMem‹yI≈ut
;

122 
	mªad
;

123 } 
	tCeRódPro˚ssMem‹yOuçut
, *
	tPCeRódPro˚ssMem‹yOuçut
;

126 
öt32_t
 
	mh™dÀ
;

127 
öt64_t
 
	maddªss
;

128 
öt32_t
 
	msize
;

129 } 
	tCeWrôePro˚ssMem‹yI≈ut
, *
	tPCeWrôePro˚ssMem‹yI≈ut
;

133 
öt32_t
 
	mwrôãn
;

134 } 
	tCeWrôePro˚ssMem‹yOuçut
, *
	tPCeWrôePro˚ssMem‹yOuçut
;

138 
HANDLE
 
	mhPro˚ss
;

139 
	mtid
;

140 
	mdebugªg
;

141 
uöt64_t
 
	mAddªss
;

142 
	mb±y≥
;

143 
	mbpsize
;

144 } 
	tCeSëBª≠oötI≈ut
, *
	tPCeSëBªakpoötI≈ut
;

148 
	mªsu…
;

149 } 
	tCeSëBª≠oötOuçut
, *
	tPCeSëBªakpoötOuçut
;

152 
HANDLE
 
	mhPro˚ss
;

153 
uöt32_t
 
	mtid
;

154 
uöt32_t
 
	mdebugªg
;

155 
uöt32_t
 
	mwasW©chpoöt
;

156 } 
	tCeRemoveBª≠oötI≈ut
, *
	tPCeRemoveBªakpoötI≈ut
;

160 
	mªsu…
;

161 } 
	tCeRemoveBª≠oötOuçut
, *
	tPCeRemoveBªakpoötOuçut
;

164 
HANDLE
 
	mhPro˚ss
;

165 
	mtid
;

166 } 
	tCeSu•ídThªadI≈ut
, *
	tPCeSu•ídThªadI≈ut
;

170 
	mªsu…
;

171 } 
	tCeSu•ídThªadOuçut
, *
	tPCeSu•ídThªadOuçut
;

174 
HANDLE
 
	mhPro˚ss
;

175 
	mtid
;

176 } 
	tCeResumeThªadI≈ut
, *
	tPCeResumeThªadI≈ut
;

180 
	mªsu…
;

181 } 
	tCeResumeThªadOuçut
, *
	tPCeResumeThªadOuçut
;

184 
HANDLE
 
	mhPro˚ss
;

185 
uöt64_t
 
	m¥e„ªdBa£
;

186 
uöt32_t
 
	msize
;

187 } 
	tCeAŒocI≈ut
, *
	tPCeAŒocI≈ut
;

191 
uöt64_t
 
	maddªss
;

192 } 
	tCeAŒocOuçut
, *
	tPCeAŒocOuçut
;

195 
HANDLE
 
	mhPro˚ss
;

196 
uöt64_t
 
	maddªss
;

197 
uöt32_t
 
	msize
;

198 } 
	tCeFªeI≈ut
, *
	tPCeFªeI≈ut
;

202 
uöt32_t
 
	mªsu…
;

203 } 
	tCeFªeOuçut
, *
	tPCeFªeOuçut
;

206 
HANDLE
 
	mhPro˚ss
;

207 
uöt64_t
 
	m°¨èddªss
;

208 
uöt64_t
 
	m∑ømëî
;

209 } 
	tCeCª©eThªadI≈ut
, *
	tPCeCª©eThªadI≈ut
;

213 
HANDLE
 
	mthªadh™dÀ
;

214 } 
	tCeCª©eThªadOuçut
, *
	tPCeCª©eThªadOuçut
;

217 
HANDLE
 
	mhPro˚ss
;

218 
uöt32_t
 
	mmoduÀ∑thÀngth
;

220 } 
	tCeLﬂdModuÀI≈ut
, *
	tPCeLﬂdModuÀI≈ut
;

224 
uöt32_t
 
	mªsu…
;

225 } 
	tCeLﬂdModuÀOuçut
, *
	tPCeLﬂdModuÀOuçut
;

229 
HANDLE
 
	mhPro˚ss
;

230 
	m•ìd
;

231 } 
	tCeS≥edhackSëS≥edI≈ut
, *
	tPCeS≥edhackSëS≥edI≈ut
;

235 
uöt32_t
 
	mªsu…
;

236 } 
	tCeS≥edhackSëS≥edOuçut
, *
	tPCeS≥edhackSëS≥edOuçut
;

240 #¥agm®
∑ck
()

242 
ssize_t
 
£ndÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
);

243 
ssize_t
 
ªcvÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
);

244 
Di•©chComm™d
(
cuºítsockë
, 
comm™d
);

245 
CheckF‹AndDi•©chComm™d
(
cuºítsockë
);

247 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_comm™d
(
uöt8_t
 
comm™d_id
);

248 
EMBEDDED__rc_t
 
CE_SERVER__ªcv_Æl
(*
buf„r
, 
uöt32_t
 
size
);

249 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_c⁄√˘i⁄
();

252 
EMBEDDED__rc_t
 
CE_SERVER__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
();

	@ceservertest.c

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<uni°d.h
>

13 
	~<±hªad.h
>

14 
	~<°dlib.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<√töë/ö.h
>

18 
	~"˚£rvî.h
"

19 
	~"≠i.h
"

21 
	gpH™dÀ
;

23 
	$˚√t_c⁄√˘
()

25 
fd
;

26 
i
;

27 
PORT
=52736;

29 
sockaddr_ö
 
addr
;

31 
fd
=
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

34 
	`mem£t
(&
addr
, 0, (addr));

35 
addr
.
sö_Ámûy
=
AF_INET
;

36 
addr
.
sö_p‹t
=
	`ht⁄s
(
PORT
);

37 
addr
.
sö_addr
.
s_addr
=
	`ht⁄l
(
INADDR_LOOPBACK
);

39 
	`¥ötf
("calling connect...\n");

40 
i
=
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, (addr));

42 
	`¥ötf
("a·î c⁄√˘. %d\n", 
i
);

45  
fd
;

46 
	}
}

48 
	$˚√t_O≥nPro˚ss
(
fd
, 
pid
)

50 #¥agm®
	`∑ck
(1)

53 
comm™d
;

54 
pid
;

55 } 
›
;

56 #¥agm®
	`∑ck
()

58 
pH™dÀ
;

60 
	`¥ötf
("˚√t_O≥nPro˚ss(%d,%d)\n", 
fd
, 
pid
);

64 
›
.
comm™d
=
CMD_OPENPROCESS
;

65 
›
.
pid
=pid;

67 
pH™dÀ
=0;

69 
	`£ndÆl
(
fd
, &
›
, (op), 0);

70 
	`ªcv
(
fd
, &
pH™dÀ
, ’H™dÀ),
MSG_WAITALL
);

72  
pH™dÀ
;

73 
	}
}

75 
	$˚√t_°¨tDebuggî
(
fd
, 
pH™dÀ
)

77 #¥agm®
	`∑ck
(1)

80 
comm™d
;

81 
HANDLE
 
pH™dÀ
;

82 } 
sd
;

83 #¥agm®
	`∑ck
()

85 
ªsu…
;

88 
sd
.
comm™d
=
CMD_STARTDEBUG
;

89 
sd
.
pH™dÀ
=pHandle;

91 
	`£ndÆl
(
fd
, &
sd
, (sd), 0);

92 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

94  
ªsu…
;

96 
	}
}

98 
	$˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, 
DebugEvít
* 
devít
, 
timeout
)

100 #¥agm®
	`∑ck
(1)

103 
comm™d
;

104 
HANDLE
 
pH™dÀ
;

105 
timeout
;

106 } 
wfd
;

107 #¥agm®
	`∑ck
()

110 
ªsu…
;

115 
wfd
.
comm™d
=
CMD_WAITFORDEBUGEVENT
;

116 
wfd
.
pH™dÀ
=pHandle;

117 
wfd
.
timeout
=timeout;

119 
	`£ndÆl
(
fd
, &
wfd
, (wfd), 0);

120 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

121 i‡(
ªsu…
)

122 
	`ªcv
(
fd
, 
devít
, (
DebugEvít
), 
MSG_WAITALL
);

124 
	`¥ötf
(">>>>>>>>>>>>>>>>>>cenet_waitForDebugEventÑeturned<<<<<<<<<<<<<<<<\n");

126  
ªsu…
;

128 
	}
}

130 
	$˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
tid
, 
ign‹e
)

132 #¥agm®
	`∑ck
(1)

135 
comm™d
;

136 
HANDLE
 
pH™dÀ
;

137 
tid
;

138 
ign‹e
;

139 } 
cfd
;

140 #¥agm®
	`∑ck
()

142 
ªsu…
;

145 
cfd
.
comm™d
=
CMD_CONTINUEFROMDEBUGEVENT
;

146 
cfd
.
pH™dÀ
=pHandle;

147 
cfd
.
tid
=tid;

148 
cfd
.
ign‹e
=ignore;

150 
	`£ndÆl
(
fd
, &
cfd
, (cfd), 0);

151 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

153  
ªsu…
;

154 
	}
}

156 
	$˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 
addªss
, *
de°
, 
size
)

158 #¥agm®
	`∑ck
(1)

161 
comm™d
;

162 
pH™dÀ
;

163 
addªss
;

164 
size
;

165 } 
Ωm
;

166 #¥agm®
	`∑ck
()

168 
ªsu…
;

170 
	`¥ötf
("˚√t_ªadPro˚ssMem‹y(%d, %d, %Œx, %p, %d)", 
fd
, 
pH™dÀ
, 
addªss
, 
de°
, 
size
);

172 
Ωm
.
comm™d
=
CMD_READPROCESSMEMORY
;

173 
Ωm
.
pH™dÀ
=pHandle;

174 
Ωm
.
addªss
=address;

175 
Ωm
.
size
=size;

177 
	`£ndÆl
(
fd
, &
Ωm
, (rpm), 0);

178 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

180 
	`¥ötf
("ªsu…=%d\n", 
ªsu…
);

181 
	`ªcv
(
fd
, 
de°
, 
ªsu…
, 
MSG_WAITALL
);

184  
ªsu…
;

186 
	}
}

188 
	$˚√t_£tBªakpoöt
(
fd
, 
pH™dÀ
, 
tid
, *
Addªss
, 
b±y≥
, 
bpsize
, 
debugªg
)

190 #¥agm®
	`∑ck
(1)

193 
comm™d
;

194 
HANDLE
 
hPro˚ss
;

195 
tid
;

196 
debugªg
;

197 
uöt64_t
 
Addªss
;

198 
b±y≥
;

199 
bpsize
;

200 } 
sb
;

201 #¥agm®
	`∑ck
()

202 
ªsu…
;

204 
	`¥ötf
("˚√t_£tBªakpoöàsizeof(sb)=%d\n", (
sb
));

205 
sb
.
comm™d
=
CMD_SETBREAKPOINT
;

206 
sb
.
hPro˚ss
=
pH™dÀ
;

207 
sb
.
tid
=tid;

208 
sb
.
debugªg
=debugreg;

209 
sb
.
Addªss
=(
uöçå_t
)Address;

210 
sb
.
b±y≥
=bptype;

211 
sb
.
bpsize
=bpsize;

213 
	`£ndÆl
(
fd
, &
sb
, (sb), 0);

216 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

218  
ªsu…
;

219 
	}
}

221 
	$˚√t_ªmoveBªakpoöt
(
fd
, 
pH™dÀ
, 
tid
, 
debugªg
, 
wasw©chpoöt
)

223 #¥agm®
	`∑ck
(1)

226 
comm™d
;

227 
HANDLE
 
hPro˚ss
;

228 
uöt32_t
 
tid
;

229 
uöt32_t
 
debugªg
;

230 
uöt32_t
 
wasw©chpoöt
;

231 } 
rb
;

232 #¥agm®
	`∑ck
()

233 
ªsu…
;

235 
	`¥ötf
("cenet_removeBreakpoint\n");

236 
rb
.
comm™d
=
CMD_REMOVEBREAKPOINT
;

237 
rb
.
hPro˚ss
=
pH™dÀ
;

238 
rb
.
tid
=tid;

239 
rb
.
debugªg
=debugreg;

240 
rb
.
wasw©chpoöt
=waswatchpoint;

242 
	`£ndÆl
(
fd
, &
rb
, (rb), 0);

243 
	`ªcv
(
fd
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

245  
ªsu…
;

246 
	}
}

248 
	#ARM_DBG_READ
(
N
, 
M
, 
OP2
, 
VAL
) do {\

249 
asm
 vﬁ©ûe("mr¯p14, 0, %0, " #N "," #M ", " #OP2 : "Ù" (
VAL
));\

250 } 0)

	)

253 
	$˚√t_VútuÆQuîyExFuŒ
(
fd
, 
pH™dÀ
, 
DWORD
 
Êags
)

255 #¥agm®
	`∑ck
(1)

258 
comm™d
;

259 
HANDLE
 
hPro˚ss
;

260 
uöt8_t
 
Êags
;

261 } 
vqef
;

262 #¥agm®
	`∑ck
()

264 
vqef
.
comm™d
=
CMD_VIRTUALQUERYEXFULL
;

265 
vqef
.
hPro˚ss
=
pH™dÀ
;

266 
vqef
.
Êags
=flags;

268 
	`£ndÆl
(
fd
, &
vqef
, (vqef),0);

272 
	}
}

274 *
	$CESERVERTEST_DEBUGGERTHREAD
(*
¨g
)

276 
cou¡
=0;

277 
fd
=
	`˚√t_c⁄√˘
();

279 
ds¸
=0;

280 #ifde‡
__¨m__


281 
	`ARM_DBG_READ
(
c0
, 
c1
, 0, 
ds¸
);

282 
	`¥ötf
("a·î: %x\n", 
ds¸
);

287 i‡(
	`˚√t_°¨tDebuggî
(
fd
, 
pH™dÀ
))

289 
i
;

290 
DebugEvít
 
devít
;

292 
	`¥ötf
("cenet_startDebugger=true\n");

296 
cou¡
++;

297 
	`¥ötf
("cou¡=%d\n", 
cou¡
);

299 i‡(
cou¡
==4)

301 
	`¥ötf
("goingÅo set breakpoint\n");

303 
i
=
	`˚√t_£tBªakpoöt
(
fd
, 
pH™dÀ
, -1, 0x00ce0000, 3, 4,0);

311 
	`¥ötf
("˚√t_£tBªakpoöàªtu∫ed %d\n",
i
);

314 
i
=
	`˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, &
devít
, 2000);

315 i‡(
i
)

318 i‡(
devít
.
debugevít
==5)

320 
	`¥ötf
("TRAP (thªad %d)\n", 
devít
.
thªadid
);

326 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 2);

328 
i
=
	`˚√t_waôF‹DebugEvít
(
fd
, 
pH™dÀ
, &
devít
, 2000);

329 
	`¥ötf
("a·î sögÀ sãp. i=%d\n",
i
);

330 
	`¥ötf
("devít.debugevít=%d (thªad %d)\n", 
devít
.
debugevít
, devít.
thªadid
);

338 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 1);

341 
	`˚√t_c⁄töueFromDebugEvít
(
fd
, 
pH™dÀ
, 
devít
.
thªadid
, 0);

348 
	`¥ötf
("FailedÅo startÅhe debugger\n");

351  
NULL
;

353 
	}
}

355 *
	$CESERVERTEST_RPMTHREAD
(*
¨g
)

357 
fd
=
	`˚√t_c⁄√˘
();

358 
i
;

359 
hp
;

364 #ifde‡
__¨m__


365 
i
=
	`˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 0xa000, &
hp
, 4);

367 
i
=
	`˚√t_ªadPro˚ssMem‹y
(
fd
, 
pH™dÀ
, 0x601068, &
hp
, 4);

369 
	`¥ötf
("CESERVERTEST_RPMTHREAD:");

371 
	`¥ötf
("i=%d\n", 
i
);

372 
	`¥ötf
("hp=%d\n", 
hp
);

373 
	`¶ìp
(1);

375 
	}
}

377 *
	$CESERVERTEST
(*
¨gv
[])

379 
fd
;

381 
pid
=
	`©oi
(
¨gv
[2]);

382 
±hªad_t
 
±h
;

383 
	`¥ötf
("CESERVERTEST:Ñunning\n");

386 
	`¥ötf
("connecting...\n");

388 
fd
=
	`˚√t_c⁄√˘
();

389 
	`¥ötf
("fd=%d\n", 
fd
);

390 
	`¥ötf
("pid=%d\n", 
pid
);

392 
pH™dÀ
=
	`˚√t_O≥nPro˚ss
(
fd
, 
pid
);

394 
	`¥ötf
("pH™dÀ=%d\n", 
pH™dÀ
);

404 
	`CESERVERTEST_DEBUGGERTHREAD
(
NULL
);

413 
	`fÊush
(
°dout
);

415  
NULL
;

417 
	}
}

	@ceservertest.h

8 #i‚de‡
CESERVERTEST_H_


9 
	#CESERVERTEST_H_


	)

11 *
CESERVERTEST
(*
¨gv
[]);

	@context.c

9 
	~"c⁄ãxt.h
"

11 
	$gëRegi°îs
(
tid
, 
CONTEXT_REGS
 *
ªgi°î°‹e
)

14 #i‚de‡
NT_PRSTATUS


15  
	`±ø˚
(
PTRACE_GETREGS
, 
tid
, 0, 
ªgi°î°‹e
);

17 
iovec
 
iov
;

18 
iov
.
iov_ba£
=
ªgi°î°‹e
;

19 
iov
.
iov_Àn
=(
CONTEXT_REGS
);

20  
	`±ø˚
(
PTRACE_GETREGSET
, 
tid
, (*)
NT_PRSTATUS
, &
iov
);

22 
	}
}

	@context.h

8 #i‚de‡
CONTEXT_H_


9 
	#CONTEXT_H_


	)

11 #ifde‡
HAS_LINUX_USER_H


16 #ifde‡
__Ørch64__


17 
	~<ñf.h
>

24 #ifde‡
__i386__


25 
±_ªgs
 
	tCONTEXT_REGS
;

28 #ifde‡
__x86_64__


29 
u£r_ªgs_°ru˘
 
	tCONTEXT_REGS
;

33 #ifde‡
__¨m__


34 
±_ªgs
 
	tCONTEXT_REGS
;

38 #ifde‡
__Ørch64__


39 
u£r_±_ªgs
 
	tCONTEXT_REGS
;

42 #ifde‡
__mùs__


44 
	su£r_±_ªgs


46 
	mªgs
[18];

49 
	su£r_hwdebug_°©e
 {

50 
uöt32_t
 
	mdbg_öfo
;

52 
uöt32_t
 
	maddr
;

53 
uöt32_t
 
	m˘æ
;

54 } 
	mdbg_ªgs
[16];

57 
	#NT_ARM_HW_WATCH
 0x403

	)

58 
	#PTRACE_GETREGSET
 0x4204

	)

59 
	#PTRACE_SETREGSET
 0x4205

	)

63 #ifde‡
__mùs__


64 
u£r_±_ªgs
 
	tCONTEXT_REGS
;

69 
CONTEXT_REGS
 
	mªgs
;

70 } 
	tCONTEXT
, *
	tPCONTEXT
;

73 
gëRegi°îs
(
tid
, 
CONTEXT_REGS
 *
ªgi°î°‹e
);

	@embedded-linux.c

1 
	~<°dio.h
>

2 
	~<°dboﬁ.h
>

3 
	~<sys/sockë.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<¨∑/öë.h
>

6 
	~<√töë/t˝.h
>

7 
	~<uni°d.h
>

9 
	~"p‹thñp.h
"

10 
	~"embedded.h
"

11 
	~"˚£rvî.h
"

13 
	gembedded__£rvî_sockë_g
 = -1;

14 
	gembedded__˛õ¡_sockë_g
 = -1;

16 
	$EMBEDDED__log
(*
mesßge
)

18 
	`¥ötf
("%s\n", 
mesßge
);

19 
	}
}

21 
EMBEDDED__rc_t
 
	$EMBEDDED__ªcv
(*
buf„r
, 
uöt32_t
 
max_buf„r_size
, uöt32_à*
ª˚ived_size
)

23 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

24 
ssize_t
 
ªcv_rc
 = -1;

26 
ªcv_rc
 = 
	`ªcv
(
embedded__˛õ¡_sockë_g
, 
buf„r
, 
max_buf„r_size
, 
MSG_WAITALL
);

27 i‡(-1 =
ªcv_rc
) {

28 
rc
 = 
EMBEDDED_RECV_FAILED
;

29 
Exô
;

32 *
ª˚ived_size
 = 
ªcv_rc
;

33 
rc
 = 
EMBEDDED_SUCCESS
;

35 
Exô
:

36  
rc
;

37 
	}
}

39 
EMBEDDED__rc_t
 
	$EMBEDDED__maö
()

41 
EMBEDDED__rc_t
 
rc
 = 
EMBEDDED_UNINITIALIZED
;

42 
sockaddr_ö
 
addr
 = {0};

43 
sockaddr_ö
 
˛õ¡_addr
 = {0};

44 
commîcül_rc
 = -1;

45 
ªu£addr_vÆue
 = 1;

46 
no_dñay_vÆue
 = 0;

47 
sockÀn_t
 
˛õ¡_size
 = 0;

49 
	`¥ötf
("CE Server forÜinux\n");

50 
embedded__£rvî_sockë_g
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

51 i‡(-1 =
embedded__£rvî_sockë_g
) {

52 
rc
 = 
EMBEDDED_CREATE_SOCKET_FAILED
;

53 
Exô
;

56 
commîcül_rc
 = 
	`£tsock›t
(
embedded__£rvî_sockë_g
,

57 
SOL_SOCKET
,

58 
SO_REUSEADDR
,

59 &
ªu£addr_vÆue
,

60 (
ªu£addr_vÆue
));

61 i‡(-1 =
commîcül_rc
) {

62 
rc
 = 
EMBEDDED_SETSOCKOPT_FAILED
;

63 
CÀ™up
;

66 
addr
.
sö_Ámûy
 = 
AF_INET
;

68 
addr
.
sö_p‹t
 = 
	`ht⁄s
(1337);

69 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

71 
commîcül_rc
 = 
	`böd
(
embedded__£rvî_sockë_g
, (c⁄° 
sockaddr
 *)&
addr
, (addr));

72 i‡(-1 =
commîcül_rc
) {

73 
rc
 = 
EMBEDDED_BIND_FAILED
;

74 
CÀ™up
;

77 
commîcül_rc
 = 
	`li°í
(
embedded__£rvî_sockë_g
, 32);

78 i‡(-1 =
commîcül_rc
) {

79 
rc
 = 
EMBEDDED_LISTEN_FAILED
;

80 
CÀ™up
;

83 
	`¥ötf
("Waiting for connections...\n");

84 
TRUE
) {

85 
embedded__˛õ¡_sockë_g
 = 
	`ac˚±
(
embedded__£rvî_sockë_g
,

86 (
sockaddr
 * 
ª°ri˘
)&
˛õ¡_addr
,

87 &
˛õ¡_size
);

88 i‡(-1 =
embedded__˛õ¡_sockë_g
) {

89 
rc
 = 
EMBEDDED_ACCEPT_FAILED
;

90 
CÀ™up
;

93 
	`¥ötf
("Connection has beenáccepted.\n");

94 
commîcül_rc
 = 
	`£tsock›t
(
embedded__˛õ¡_sockë_g
,

95 
IPPROTO_TCP
,

96 
TCP_NODELAY
,

97 &
no_dñay_vÆue
,

98 (
no_dñay_vÆue
));

99 i‡(-1 =
commîcül_rc
) {

100 
rc
 = 
EMBEDDED_SETSOCKOPT_CLIENT_FAILED
;

101 
CÀ™up
;

104 
rc
 = 
	`CE_SERVER__h™dÀ_c⁄√˘i⁄
();

105 
	`ON_EMBEDDED_ERROR_GOTO
(
rc
, 
CÀ™up
);

108 
CÀ™up
:

110 
	`˛o£
(
embedded__£rvî_sockë_g
);

112 
Exô
:

113  
rc
;

114 
	}
}

116 
	$maö
(
¨gc
, **
¨gv
)

120  
	`EMBEDDED__maö
();

121 
	}
}

123 
EMBEDDED__rc_t
 
	$EMBEDDED__h™dÀ_¸óã_toﬁhñp32_¢≠shŸ
(
DWORD
 
dwFœgs
, DWORD 
th32Pro˚ssID
)

125 i‡(
dwFœgs
 & 
TH32CS_SNAPPROCESS
)

127 
max
 = 2048;

128 
PPro˚ssLi°
 
∂
 = (PPro˚ssLi°)
	`mÆloc
((
Pro˚ssLi°
));

130 
∂
->
Re„ªn˚Cou¡
=1;

131 
∂
->
¥o˚ssCou¡
=0;

132 
∂
->
¥o˚ssLi°
=(
PPro˚ssLi°E¡ry
)
	`mÆloc
((
Pro˚ssLi°E¡ry
)* 
max
);

134 
DIR
 *
¥ocfﬁdî
=
	`›ídú
("/proc/");

136 
dúít
 *
cuºítfûe
;

138 (
cuºítfûe
=
	`ªaddú
(
¥ocfﬁdî
)Ë!
NULL
)

141 i‡(
	`°r•n
(
cuºítfûe
->
d_«me
, "1234567890")==
	`°æí
(currentfile->d_name))

143 
pid
;

144 
exï©h
[200];

145 
¥o˚s•©h
[512];

146 
	`¢¥ötf
(
exï©h
, 200, "/¥oc/%s/exe", 
cuºítfûe
->
d_«me
);

147 
exï©h
[199]=0;

149 
i
=
	`ªadlök
(
exï©h
, 
¥o˚s•©h
, 254);

150 i‡(
i
 != -1)

152 
exåafûe
[255];

153 
f
;

155 i‡(
i
>254)

156 
i
=254;

158 
¥o˚s•©h
[
i
]=0;

160 
	`¢¥ötf
(
exåafûe
, 255, "/¥oc/%s/cmdlöe", 
cuºítfûe
->
d_«me
);

161 
exåafûe
[254]=0;

163 
f
=
	`›í
(
exåafûe
, 
O_RDONLY
);

164 i‡(
i
!=-1)

166 
i
=
	`ªad
(
f
, 
exåafûe
, 255);

167 i‡(
i
>=0)

168 
exåafûe
[
i
]=0;

170 
exåafûe
[0]=0;

172 
	`°rˇt
(
¥o˚s•©h
," ");

173 
	`°rˇt
(
¥o˚s•©h
,
exåafûe
);

175 
	`˛o£
(
f
);

179 
	`ssˇnf
(
cuºítfûe
->
d_«me
, "%d", &
pid
);

183 
∂
->
¥o˚ssLi°
[∂->
¥o˚ssCou¡
].
PID
=
pid
;

184 
∂
->
¥o˚ssLi°
[∂->
¥o˚ssCou¡
].
Pro˚ssName
=
	`°rdup
(
¥o˚s•©h
);

186 
∂
->
¥o˚ssCou¡
++;

188 i‡(
∂
->
¥o˚ssCou¡
>=
max
)

190 
max
=max*2;

191 
∂
->
¥o˚ssLi°
=(
PPro˚ssLi°E¡ry
)
	`ªÆloc
’l->¥o˚ssLi°, 
max
*(
Pro˚ssLi°E¡ry
));

199 
	`˛o£dú
(
¥ocfﬁdî
);

200  
	`Cª©eH™dÀFromPoöãr
(
∂
, 
htTHSPro˚ss
);

203 i‡(
dwFœgs
 & 
TH32CS_SNAPMODULE
)

207 
max
=64;

208 
m≠fûe
[255];

209 
FILE
 *
f
=
NULL
;

210 
	`¢¥ötf
(
m≠fûe
, 255, "/¥oc/%d/m≠s", 
th32Pro˚ssID
);

212 
PModuÀLi°
 
ml
=(PModuÀLi°)
	`mÆloc
((
ModuÀLi°
));

214 
	`¥ötf
("Cª©ög moduÀÜi° f‹Öro˚s†%d\n", 
th32Pro˚ssID
);

216 
ml
->
Re„ªn˚Cou¡
=1;

217 
ml
->
moduÀCou¡
=0;

218 
ml
->
moduÀLi°
=(
PModuÀLi°E¡ry
)
	`mÆloc
((
ModuÀLi°E¡ry
)*
max
);

221 
f
=
	`f›í
(
m≠fûe
, "r");

224 i‡(
f
)

226 
s
[512];

227 
	`mem£t
(
s
, 0, 512);

229 
PModuÀLi°E¡ry
 
mÀ
=
NULL
;

230 
ph™dÀ
=
	`O≥nPro˚ss
(
th32Pro˚ssID
);

231 
hasVÆidModuÀSize
=0;

235 
	`fgës
(
s
, 511, 
f
))

237 
°¨t
, 
°›
;

238 
mem‹yønge
[64],
¥Ÿe˘i⁄°rög
[32],
moduÀ∑th
[511];

239 
uöt32_t
 
magic
;

241 
moduÀ∑th
[0]='\0';

242 
	`mem£t
(
moduÀ∑th
, 0, 255);

245 
	`ssˇnf
(
s
, "%Œx-%Œx %†%*†%*†%*†%[^\t\n]\n", &
°¨t
, &
°›
, 
¥Ÿe˘i⁄°rög
, 
moduÀ∑th
);

247 i‡(
	`PrŸe˘i⁄SåögToTy≥
(
¥Ÿe˘i⁄°rög
)==
MEM_MAPPED
)

250 i‡(
moduÀ∑th
[0])

252 
i
;

253 i‡(
	`°rcmp
(
moduÀ∑th
, "[heap]")==0)

256 
	`¥ötf
("%s\n", 
moduÀ∑th
);

258 i‡(
	`°rcmp
(
moduÀ∑th
, "[vdso]")!=0)

260 
i
=0; 
moduÀ∑th
[i]; i++)

262 i‡((
moduÀ∑th
[
i
]=='[') || (modulepath[i]==']'))

263 
moduÀ∑th
[
i
]='_';

266 i‡((
mÀ
Ë&& (
	`°rcmp
(
moduÀ∑th
, mÀ->
moduÀName
)==0))

269 i‡(
hasVÆidModuÀSize
==0)

270 
mÀ
->
moduÀSize
=
°›
-(mÀ->
ba£Addªss
);

276 
i
=
	`RódPro˚ssMem‹y
(
ph™dÀ
, (*)
°¨t
, &
magic
, 4);

277 i‡(
i
==0)

285 i‡(
magic
!=0x464c457f)

293 
mÀ
=&
ml
->
moduÀLi°
[ml->
moduÀCou¡
];

294 
mÀ
->
moduÀName
=
	`°rdup
(
moduÀ∑th
);

295 
mÀ
->
ba£Addªss
=
°¨t
;

296 
mÀ
->
moduÀSize
=
	`GëModuÀSize
(
moduÀ∑th
, 0);

298 
hasVÆidModuÀSize
=
mÀ
->
moduÀSize
!=0;

302 
ml
->
moduÀCou¡
++;

304 i‡(
ml
->
moduÀCou¡
>=
max
)

307 
max
=max*2;

308 
ml
->
moduÀLi°
=(
PModuÀLi°E¡ry
)
	`ªÆloc
(ml->moduÀLi°, 
max
* (
ModuÀLi°E¡ry
));

312 
mÀ
=
NULL
;

315 
	`Clo£H™dÀ
(
ph™dÀ
);

316 
	`f˛o£
(
f
);

318  
	`Cª©eH™dÀFromPoöãr
(
ml
, 
htTHSModuÀ
);

322 
	`¥ötf
("Faûed o≥nög %s\n", 
m≠fûe
);

328 
	}
}

	@embedded.c

1 
	~<°döt.h
>

3 
	$EMBEDDED__log
(*
mesßge
)

6 
	}
}

	@embedded.h

1 #i‚de‡
EMBEDDED_H


2 
	#EMBEDDED_H


	)

4 
	~<°döt.h
>

5 
	~<°dboﬁ.h
>

7 
	#ON_EMBEDDED_ERROR_GOTO
(
__rc
, 
__œbñ
) \

9 i‡(
EMBEDDED_SUCCESS
 !
__rc
) { \

10 
__œbñ
; \

12 } 
FALSE
)

	)

15 
	mEMBEDDED_SUCCESS
 = 0,

16 
	mEMBEDDED_UNINITIALIZED
,

20 
	mEMBEDDED_CREATE_SOCKET_FAILED
,

21 
	mEMBEDDED_BIND_FAILED
,

22 
	mEMBEDDED_LISTEN_FAILED
,

23 
	mEMBEDDED_ACCEPT_FAILED
,

24 
	mEMBEDDED_SETSOCKOPT_FAILED
,

25 
	mEMBEDDED_SETSOCKOPT_CLIENT_FAILED
,

26 
	mEMBEDDED_RECV_FAILED
,

27 } 
	tEMBEDDED__rc_t
;

30 
EMBEDDED__log
(*
mesßge
);

33 
EMBEDDED__rc_t
 
EMBEDDED__maö
();

36 
EMBEDDED__rc_t
 
EMBEDDED__£nd
(*
buf„r
, 
uöt32_t
 
buf„r_size
, uöt32_à
£¡_size
);

37 
EMBEDDED__rc_t
 
EMBEDDED__ªcv
(*
buf„r
, 
uöt32_t
 
max_buf„r_size
, uöt32_à*
ª˚ived_size
);

	@extension/server.c

13 
	~<î∫o.h
>

14 
	~<°dio.h
>

15 
	~<±hªad.h
>

16 
	~<°döt.h
>

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<dlf˙.h
>

20 #ifde‡
ANDROID


21 
	~<™droid/log.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/un.h
>

27 
	~<sys/mm™.h
>

31 
	~"£rvî.h
"

32 
	~"•ìdhack.h
"

34 
	gd⁄e
=0;

36 #i‚de‡
SUN_LEN


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
dvmJôSèts
();

49 
uöt64_t
 
	maddªss
;

50 
uöt32_t
 
	msize
;

51 } 
	tAŒocE¡ry
, *
	tPAŒocE¡ry
;

53 
PAŒocE¡ry
 
	gÆlocLi°
;

54 
	gÆlocLi°_Max
;

55 
	gÆlocLi°_Pos
;

57 
	$ÆlocLi°Add
(
uöt64_t
 
addªss
, 
uöt32_t
 
size
)

59 i‡(
ÆlocLi°
==
NULL
)

61 
ÆlocLi°
=
	`ˇŒoc
(16, (
AŒocE¡ry
));

62 
ÆlocLi°_Max
=16;

65 
ÆlocLi°
[
ÆlocLi°_Pos
].
addªss
=address;

66 
ÆlocLi°
[
ÆlocLi°_Pos
].
size
=size;

68 
ÆlocLi°_Pos
++;

69 i‡(
ÆlocLi°_Pos
==
ÆlocLi°_Max
)

71 
ÆlocLi°_Max
*=2;

72 
ÆlocLi°
=
	`ªÆloc
◊ŒocLi°, 
ÆlocLi°_Max
*(
AŒocE¡ry
));

74 
	}
}

76 
	$ÆlocLi°Remove
(
uöt64_t
 
addªss
)

78 
i
;

79 
i
=0; i<
ÆlocLi°_Pos
; i++)

81 i‡(
ÆlocLi°
[
i
].
addªss
==address)

83 
j
;

84 
j
=
i
; j<
ÆlocLi°_Pos
-1; j++)

85 
ÆlocLi°
[
j
]=allocList[j+1];

87 
ÆlocLi°_Pos
--;

92 
	}
}

94 
	$ÆlocLi°Föd
(
uöt64_t
 
addªss
)

99 
i
;

100 
i
=0; i<
ÆlocLi°_Pos
; i++)

102 i‡(
ÆlocLi°
[
i
].
addªss
==address)

104  
ÆlocLi°
[
i
].
size
;

110 
	}
}

114 
ssize_t
 
	$ªcvÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
)

116 
ssize_t
 
tŸÆª˚ived
=0;

117 
ssize_t
 
sizñe·
=
size
;

118 *
buf„r
=(*)
buf
;

122 
Êags
=Êag†| 
MSG_WAITALL
;

124 
sizñe·
>0)

126 
ssize_t
 
i
=
	`ªcv
(
s
, &
buf„r
[
tŸÆª˚ived
], 
sizñe·
, 
Êags
);

128 i‡(
i
==0)

130 
	`¥ötf
("recvÑeturned 0\n");

131  
i
;

134 i‡(
i
==-1)

136 
	`¥ötf
("recvÑeturned -1\n");

137 i‡(
î∫o
==
EINTR
)

139 
	`¥ötf
("errno = EINTR\n");

140 
i
=0;

144 
	`¥ötf
("Eº‹ durögÑecvÆl: %d.Éºno=%d\n",()
i
, 
î∫o
);

145  
i
;

150 
tŸÆª˚ived
+=
i
;

151 
sizñe·
-=
i
;

155  
tŸÆª˚ived
;

156 
	}
}

158 
ssize_t
 
	$£ndÆl
 (
s
, *
buf
, 
size_t
 
size
, 
Êags
)

160 
ssize_t
 
tŸÆ£¡
=0;

161 
ssize_t
 
sizñe·
=
size
;

162 *
buf„r
=(*)
buf
;

164 
sizñe·
>0)

166 
ssize_t
 
i
=
	`£nd
(
s
, &
buf„r
[
tŸÆ£¡
], 
sizñe·
, 
Êags
);

168 i‡(
i
==0)

170  
i
;

173 i‡(
i
==-1)

175 i‡(
î∫o
==
EINTR
)

176 
i
=0;

179 
	`¥ötf
("Eº‹ durög sídÆl: %d.Éºno=%d\n",()
i
, 
î∫o
);

180  
i
;

184 
tŸÆ£¡
+=
i
;

185 
sizñe·
-=
i
;

188  
tŸÆ£¡
;

189 
	}
}

191 
	$Di•©chComm™d
(
cuºítsockë
, 
comm™d
)

195 
comm™d
)

197 
EXTCMD_ALLOC
:

199 #¥agm®
	`∑ck
(1)

201 
uöt64_t
 
¥e„ªdAddªss
;

202 
uöt32_t
 
size
;

203 } 
∑øms
;

204 #¥agm®
	`∑ck
()

207 i‡(
	`ªcvÆl
(
cuºítsockë
, &
∑øms
, (params), 0)>0)

213 
uöt64_t
 
addªss
=(uöt64_t)
	`mm≠
((*)
∑øms
.
¥e„ªdAddªss
,Ö¨ams.
size
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

216 i‡(
addªss
)

217 
	`ÆlocLi°Add
(
addªss
, 
∑øms
.
size
);

219 
	`£ndÆl
(
cuºítsockë
, &
addªss
, (address), 0);

228 
EXTCMD_FREE
:

230 #¥agm®
	`∑ck
(1)

232 
uöt64_t
 
addªss
;

233 
uöt32_t
 
size
;

234 } 
∑øms
;

235 #¥agm®
	`∑ck
()

237 
uöt32_t
 
ªsu…
;

239 i‡(
	`ªcvÆl
(
cuºítsockë
, &
∑øms
, (params), 0)>0)

245 i‡(
∑øms
.
size
==0)

246 
∑øms
.
size
=
	`ÆlocLi°Föd
’¨ams.
addªss
);

252 i‡(
∑øms
.
size
)

255 
ªsu…
=
	`munm≠
((*)
∑øms
.
addªss
,Ö¨ams.
size
);

256 i‡(
ªsu…
==-1)

257 
ªsu…
=0;

259 
ªsu…
=1;

262 
ªsu…
=0;

265 
	`ÆlocLi°Remove
(
∑øms
.
addªss
);

268 
	`£ndÆl
(
cuºítsockë
, &
ªsu…
, (result), 0);

275 
EXTCMD_CREATETHREAD
:

277 #¥agm®
	`∑ck
(1)

279 
uöt64_t
 
°¨èddªss
;

280 
uöt64_t
 
∑ømëî
;

281 } 
∑øms
;

282 #¥agm®
	`∑ck
()

284 i‡(
	`ªcvÆl
(
cuºítsockë
, &
∑øms
, (params), 0)>0)

290 
uöt64_t
 
thªadh™dÀ
=0;

292 
	`±hªad_¸óã
((
±hªad_t
 *)&
thªadh™dÀ
, 
NULL
, (*)
∑øms
.
°¨èddªss
, (*Ì¨ams.
∑ømëî
);

294 
	`£ndÆl
(
cuºítsockë
, &
thªadh™dÀ
, (threadhandle), 0);

301 
EXTCMD_LOADMODULE
:

303 
uöt32_t
 
moduÀ∑thÀngth
;

304 i‡(
	`ªcvÆl
(
cuºítsockë
, &
moduÀ∑thÀngth
, (modulepathlength), 0)>0)

306 *
moduÀ∑th
[
moduÀ∑thÀngth
+1];

307 i‡(
	`ªcvÆl
(
cuºítsockë
, 
moduÀ∑th
, 
moduÀ∑thÀngth
, 0)>0)

309 
moduÀ∑th
[
moduÀ∑thÀngth
]=0;

310 
uöt32_t
 
ªsu…
;

311 
ªsu…
=(
	`dl›í
((c⁄° *)
moduÀ∑th
, 
RTLD_NOW
)!=
NULL
);

313 
	`£ndÆl
(
cuºítsockë
, &
ªsu…
, (result), 0);

323 
EXTCMD_SPEEDHACK_SETSPEED
:

325 #¥agm®
	`∑ck
(1)

327 
•ìd
;

328 } 
∑øms
;

329 #¥agm®
	`∑ck
()

331 
uöt32_t
 
ªsu…
;

333 i‡(
	`ªcvÆl
(
cuºítsockë
, &
∑øms
, (params), 0)>0)

337 
ªsu…
=
	`•ìdhack_öôülizeS≥ed
(
∑øms
.
•ìd
);

338 
	`£ndÆl
(
cuºítsockë
, &
ªsu…
, (result), 0);

346 
	}
}

348 *
	$√wc⁄√˘i⁄
(*
¨g
)

350 
sockëh™dÀ
=(
uöçå_t
)
¨g
;

351 
comm™d
;

352 
r
;

357 
r
=1;

358 
r
>=0)

360 
r
=
	`ªcvÆl
(
sockëh™dÀ
, &
comm™d
, 1, 
MSG_WAITALL
);

361 i‡(
r
==1)

362 
	`Di•©chComm™d
(
sockëh™dÀ
, 
comm™d
);

372 
	`˛o£
(
sockëh™dÀ
);

376 
	`¥ötf
("Bye\n");

377  
NULL
;

378 
	}
}

380 *
	$SîvîThªad
(*
¨g
)

382 
s
=(
uöçå_t
)
¨g
;

384 !
d⁄e
)

386 
sockaddr_un
 
addr_˛õ¡
;

387 
sockÀn_t
 
˛isize
;

388 
a
;

389 
a
=
	`ac˚±
(
s
, (
sockaddr
 *)&
addr_˛õ¡
, &
˛isize
);

392 i‡(
a
==-1)

394 
	`¥ötf
("ac˚± faûed: %d\n", 
a
);

399 
±hªad_t
 
±h
;

400 
	`±hªad_¸óã
(&
±h
, 
NULL
, (*)
√wc⁄√˘i⁄
, (*)(
uöçå_t
)
a
);

406  
NULL
;

407 
	}
}

409 
__©åibuã__
((
de°ru˘‹
)Ë
	$ãrm
()

412 
d⁄e
=1;

414 
	}
}

416 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$moduÀöô
()

418 
«me
[256];

419 
s
;

421 
i
;

424 
	`•ìdhack_öôülizeS≥ed
(1.0f);

426 *
X
;

427 *
moduÀ
=
NULL
;

451 
s
=
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

453 
	`•rötf
(
«me
, " ce£rvî_exãnsi⁄%d", 
	`gëpid
());

458 
sockaddr_un
 
addªss
;

459 
addªss
.
sun_Ámûy
=
AF_UNIX
;

460 
	`°r˝y
(
addªss
.
sun_∑th
,
«me
);

462 
Æ
=
	`SUN_LEN
(&
addªss
);

464 
addªss
.
sun_∑th
[0]=0;

467 
›tvÆ
 = 1;

468 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›tvÆ
, optval);

470 
i
=
	`böd
(
s
, (
sockaddr
 *)&
addªss
, 
Æ
);

472 i‡(
i
==0)

475 
l
;

476 
l
=
	`li°í
(
s
, 32);

477 
	`¥ötf
("li°í=%d\n",
l
);

479 i‡(
l
==0)

482 
±hªad_t
 
±h
;

483 
	`±hªad_¸óã
(&
±h
, 
NULL
, (*)
SîvîThªad
, (*)(
uöçå_t
)
s
);

485 
	`¥ötf
("li°í faûed: %d\n", 
î∫o
);

488 
	`¥ötf
("böd faûed: %d\n", 
î∫o
);

489 
	}
}

	@extension/server.h

8 #i‚de‡
SERVER_H_


9 
	#SERVER_H_


	)

11 
	#EXTCMD_ALLOC
 0

	)

12 
	#EXTCMD_FREE
 1

	)

13 
	#EXTCMD_CREATETHREAD
 2

	)

14 
	#EXTCMD_LOADMODULE
 3

	)

15 
	#EXTCMD_SPEEDHACK_SETSPEED
 4

	)

	@extension/speedhack.c

8 
	~<sys/time.h
>

9 
	~<°ddef.h
>

10 
	~<öây≥s.h
>

11 
	~<m©h.h
>

12 
	~<°dio.h
>

13 
	~<time.h
>

15 
	~"•ìdhack.h
"

17 (*
	tGETTIMEOFDAY
Ë(
	ttimevÆ
 *
	ttv
, 
	ttimez⁄e
 *
	ttz
);

18 (*
	tCLOCK_GETTIME
Ë(
	t˛ockid_t
 
	t˛k_id
, 
	ttime•ec
 *
	tç
);

20 
GETTIMEOFDAY
 
ªÆ_gëtimeofday
;

21 
CLOCK_GETTIME
 
ªÆ_˛ock_gëtime
;

25 
•ìdmu…ùlõr
;

28 
ªsu…
;

29 
time•ec
 
öôüloff£t
;

30 
time•ec
 
öôü…ime
;

31 } 
öôül˛ock
[10];

33 
timevÆ
 
öôül_off£t_tod_tv
;

34 
timevÆ
 
öôül_time_tod_tv
;

36 
	$√w_˛ock_gëtime
(
˛ockid_t
 
˛k_id
, 
time•ec
 *
ç
)

38 
r
=-1;

39 
time•ec
 
cuºíâp
;

43 
r
=
	`ªÆ_˛ock_gëtime
(
˛k_id
, &
cuºíâp
);

48 i‡((
˛k_id
<=9Ë&& (
öôül˛ock
[˛k_id].
ªsu…
==0))

50 
time•ec
 
ãm±p
;

52 
ãm±p
.
tv_£c
=
cuºíâp
.tv_£c-
öôül˛ock
[
˛k_id
].
öôü…ime
.tv_sec;

53 
ãm±p
.
tv_n£c
=
cuºíâp
.tv_n£c-
öôül˛ock
[
˛k_id
].
öôü…ime
.tv_nsec;

55 i‡(
ãm±p
.
tv_n£c
<0)

57 
ãm±p
.
tv_n£c
+=1000000000;

58 
ãm±p
.
tv_£c
--;

63 
√w£c_doubÀ
 = ()
ãm±p
.
tv_£c
*
•ìdmu…ùlõr
;

65 
öt64_t
 
√wn£c
=
	`Êo‹
(()
ãm±p
.
tv_n£c
*
•ìdmu…ùlõr
);

66 
öt64_t
 
√w£c
=
	`Êo‹
(
√w£c_doubÀ
);

68 
√wn£c
+=
	`Êo‹
((
√w£c_doubÀ
 - floor(newsec_double)) * 1000000000.0f);

73 
√w£c
+=
öôül˛ock
[
˛k_id
].
öôüloff£t
.
tv_£c
;

74 
√wn£c
+=
öôül˛ock
[
˛k_id
].
öôüloff£t
.
tv_n£c
;

78 
√w£c
+=
√wn£c
 / 1000000000;

79 
√wn£c
=newnsec % 1000000000;

82 i‡(
√wn£c
<0)

84 
√wn£c
+=1000000000;

85 
√w£c
--;

88 i‡(
ç
)

90 
ç
->
tv_£c
=
√w£c
;

91 
ç
->
tv_n£c
=
√wn£c
;

98 i‡(
ç
)

100 *
ç
=
cuºíâp
;

104  
r
;

105 
	}
}

107 
	$√w_gëtimeofday
(
timevÆ
 *
tv
, 
timez⁄e
 *
tz
)

109 
r
;

111 
timevÆ
 
cuºíâv
;

112 
timevÆ
 
ãm±v
;

115 
r
=
	`ªÆ_gëtimeofday
(&
cuºíâv
, 
tz
);

121 
ãm±v
.
tv_£c
=
cuºíâv
.tv_£c-
öôül_time_tod_tv
.tv_sec;

122 
ãm±v
.
tv_u£c
=
cuºíâv
.tv_u£c-
öôül_time_tod_tv
.tv_usec;

124 i‡(
ãm±v
.
tv_u£c
<0)

126 
ãm±v
.
tv_u£c
+=1000000;

127 
ãm±v
.
tv_£c
--;

138 
√w£c_doubÀ
 = ()
ãm±v
.
tv_£c
*
•ìdmu…ùlõr
;

140 
öt64_t
 
√wu£c
=
	`Êo‹
(()
ãm±v
.
tv_u£c
*
•ìdmu…ùlõr
);

141 
öt64_t
 
√w£c
=
	`Êo‹
(
√w£c_doubÀ
);

145 
√wu£c
+=
	`Êo‹
((
√w£c_doubÀ
 - floor(newsec_double)) * 1000000.0f);

152 
√w£c
+=
öôül_off£t_tod_tv
.
tv_£c
;

153 
√wu£c
+=
öôül_off£t_tod_tv
.
tv_u£c
;

159 
√w£c
+=
√wu£c
 / 1000000;

160 
√wu£c
=newusec % 1000000;

163 i‡(
√wu£c
<0)

165 
√wu£c
+=1000000;

166 
√w£c
--;

171 i‡(
tv
)

173 
tv
->
tv_£c
=
√w£c
;

174 
tv
->
tv_u£c
=
√wu£c
;

177  
r
;

178 
	}
}

180 
	$•ìdhack_öôülizeS≥ed
(
•ìd
)

184 
	`gëtimeofday
(&
öôül_off£t_tod_tv
, 
NULL
);

186 i‡(
ªÆ_gëtimeofday
)

187 
	`ªÆ_gëtimeofday
(&
öôül_time_tod_tv
, 
NULL
);

189 
	`gëtimeofday
(&
öôül_time_tod_tv
, 
NULL
);

192 
i
;

193 
i
=0; i<=9; i++)

195 
	`˛ock_gëtime
(
i
, &
öôül˛ock
[i].
öôüloff£t
);

197 i‡(
ªÆ_˛ock_gëtime
)

198 
öôül˛ock
[
i
].
ªsu…
=
	`ªÆ_˛ock_gëtime
(i, &öôül˛ock[i].
öôü…ime
);

200 
öôül˛ock
[
i
].
ªsu…
=
	`˛ock_gëtime
(i, &öôül˛ock[i].
öôü…ime
);

206 
•ìdmu…ùlõr
=
•ìd
;

209 
	}
}

	@extension/speedhack.h

8 #i‚de‡
SPEEDHACK_H_


9 
	#SPEEDHACK_H_


	)

11 
•ìdhack_öôülizeS≥ed
(
•ìd
);

	@extensionfunctions.c

9 
	~<°dio.h
>

10 
	~<±hªad.h
>

11 
	~<°rög.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<sys/sockë.h
>

16 
	~"exãnsi⁄lﬂdî.h
"

17 
	~"exãnsi⁄fun˘i⁄s.h
"

18 
	~"≠i.h
"

22 
	$ext_•ìdhack_£tS≥ed
(
HANDLE
 
hPro˚ss
, 
•ìd
)

24 
uöt32_t
 
ªsu…
=0;

26 
	`¥ötf
("ext_•ìdhack_£tS≥ed(%d, %f)\n", 
hPro˚ss
, 
•ìd
);

28 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

30 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

32 #¥agm®
	`∑ck
(1)

34 
uöt8_t
 
comm™d
;

35 
•ìd
;

36 } 
•ìdhackSëS≥edComm™d
;

37 #¥agm®
	`∑ck
()

39 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

41 
	`¥ötf
("hasLoadedExtension == FALSE");

42 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

44 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

50 
•ìdhackSëS≥edComm™d
.
comm™d
=
EXTCMD_SPEEDHACK_SETSPEED
;

51 
•ìdhackSëS≥edComm™d
.
•ìd
=speed;

53 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

55 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
•ìdhackSëS≥edComm™d
, (speedhackSetSpeedCommand), 0)>0)

56 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

58 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

62  
ªsu…
;

63 
	}
}

65 
uöt64_t
 
	$ext_lﬂdModuÀ
(
HANDLE
 
hPro˚ss
, *
moduÀ∑th
)

67 
uöt64_t
 
ªsu…
=0;

68 
	`¥ötf
("ext_lﬂdModuÀ(%d, \"%s\"\n", 
hPro˚ss
, 
moduÀ∑th
);

70 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

72 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

74 #¥agm®
	`∑ck
(1)

76 
uöt8_t
 
comm™d
;

77 
uöt32_t
 
moduÀ∑thÀngth
;

78 } 
lﬂdModuÀComm™d
;

79 #¥agm®
	`∑ck
()

81 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

83 
	`¥ötf
("hasLoadedExtension == FALSE");

84 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

86 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

91 
lﬂdModuÀComm™d
.
comm™d
=
EXTCMD_LOADMODULE
;

92 
lﬂdModuÀComm™d
.
moduÀ∑thÀngth
=
	`°æí
(
moduÀ∑th
);

94 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

96 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
lﬂdModuÀComm™d
, ÷ﬂdModuÀComm™d), 
MSG_MORE
)>0)

98 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, 
moduÀ∑th
, 
lﬂdModuÀComm™d
.
moduÀ∑thÀngth
, 0)>0)

100 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

104 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

109  
ªsu…
;

110 
	}
}

113 
uöt64_t
 
	$ext_¸óãThªad
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
°¨èddªss
, uöt64_à
∑ømëî
)

115 
uöt64_t
 
ªsu…
=0;

116 
	`¥ötf
("ext_¸óãThªad(%d, %lx, %lx\n", 
hPro˚ss
, 
°¨èddªss
, 
∑ømëî
);

118 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

120 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

122 #¥agm®
	`∑ck
(1)

124 
uöt8_t
 
comm™d
;

125 
uöt64_t
 
°¨èddªss
;

126 
uöt64_t
 
∑ømëî
;

127 } 
¸óãThªadComm™d
;

128 #¥agm®
	`∑ck
()

130 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

132 
	`¥ötf
("hasLoadedExtension == FALSE");

133 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

135 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

140 
¸óãThªadComm™d
.
comm™d
=
EXTCMD_CREATETHREAD
;

141 
¸óãThªadComm™d
.
°¨èddªss
=startaddress;

142 
¸óãThªadComm™d
.
∑ømëî
=parameter;

144 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

146 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
¸óãThªadComm™d
, (createThreadCommand), 0)>0)

147 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

149 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

154  
ªsu…
;

155 
	}
}

157 
	$ext_‰ì
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
addªss
, 
size
)

159 
uöt32_t
 
ªsu…
=0;

161 
	`¥ötf
("ext_‰ì(%d, %lx, %d)\n", 
hPro˚ss
, 
addªss
, 
size
);

163 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

165 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

167 #¥agm®
	`∑ck
(1)

169 
uöt8_t
 
comm™d
;

170 
uöt64_t
 
addªss
;

171 
uöt32_t
 
size
;

172 } 
‰ìComm™d
;

173 #¥agm®
	`∑ck
()

175 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

177 
	`¥ötf
("hasLoadedExtension == FALSE");

178 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

180 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

186 
‰ìComm™d
.
comm™d
=
EXTCMD_FREE
;

187 
‰ìComm™d
.
addªss
=address;

188 
‰ìComm™d
.
size
=size;

190 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

192 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
‰ìComm™d
, (freeCommand), 0)>0)

193 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

195 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

199  
ªsu…
;

200 
	}
}

202 
uöt64_t
 
	$ext_Æloc
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
¥e„ªdBa£
, 
size
)

204 
uöt64_t
 
ªsu…
=0;

205 
	`¥ötf
("ext_Æloc(%d, %Œx, %d)\n", 
hPro˚ss
, 
¥e„ªdBa£
, 
size
);

207 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

209 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

211 #¥agm®
	`∑ck
(1)

213 
uöt8_t
 
comm™d
;

214 
uöt64_t
 
¥e„ªdAddªss
;

215 
uöt32_t
 
size
;

216 } 
ÆlocComm™d
;

217 #¥agm®
	`∑ck
()

219 i‡(
p
->
hasLﬂdedExãnsi⁄
==
FALSE
)

221 
	`¥ötf
("hasLoadedExtension == FALSE");

222 i‡(
	`lﬂdCESîvîExãnsi⁄
(
hPro˚ss
)==
FALSE
)

224 
	`¥ötf
("FailureÅoÜoadÅheÉxtension\n");

230 
ÆlocComm™d
.
comm™d
=
EXTCMD_ALLOC
;

231 
ÆlocComm™d
.
¥e„ªdAddªss
=
¥e„ªdBa£
;

232 
ÆlocComm™d
.
size
=size;

234 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

236 i‡(
	`£ndÆl
(
p
->
exãnsi⁄FD
, &
ÆlocComm™d
, (allocCommand), 0)>0)

237 
	`ªcvÆl
(
p
->
exãnsi⁄FD
, &
ªsu…
, (result), 0);

239 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

241 
	`¥ötf
("Rëu∫ed fromÉxãnsi⁄ wôhÑesu… %Œx\n", 
ªsu…
);

246  
ªsu…
;

247 
	}
}

	@extensionfunctions.h

8 #i‚de‡
EXTENSIONFUNCTIONS_H_


9 
	#EXTENSIONFUNCTIONS_H_


	)

11 
	~<°döt.h
>

12 
	~"˚£rvî.h
"

13 
	~"p‹thñp.h
"

15 
	#EXTCMD_ALLOC
 0

	)

16 
	#EXTCMD_FREE
 1

	)

17 
	#EXTCMD_CREATETHREAD
 2

	)

18 
	#EXTCMD_LOADMODULE
 3

	)

19 
	#EXTCMD_SPEEDHACK_SETSPEED
 4

	)

23 
uöt64_t
 
ext_Æloc
(
HANDLE
 
hPro˚ss
, uöt64_à
¥e„ªdBa£
, 
size
);

24 
ext_‰ì
(
HANDLE
 
hPro˚ss
, 
uöt64_t
 
addªss
, 
size
);

25 
uöt64_t
 
ext_¸óãThªad
(
HANDLE
 
hPro˚ss
, uöt64_à
°¨èddªss
, uöt64_à
∑ømëî
);

26 
ext_•ìdhack_£tS≥ed
(
HANDLE
 
hPro˚ss
, 
•ìd
);

	@extensionloader.c

47 
	~<°dio.h
>

48 
	~<sys/waô.h
>

49 
	~<sys/±ø˚.h
>

51 
	~<î∫o.h
>

52 
	~<°döt.h
>

53 
	~<°rög.h
>

55 #ifde‡
HAS_LINUX_USER_H


56 
	~<löux/u£r.h
>

58 
	~<sys/u£r.h
>

61 
	~<dlf˙.h
>

63 
	~<sys/ty≥s.h
>

64 
	~<sys/sockë.h
>

65 
	~<sys/un.h
>

66 
	~<uni°d.h
>

67 
	~<libgí.h
>

69 #ifde‡
__Ørch64__


70 
	~<ñf.h
>

73 
	~"p‹thñp.h
"

74 
	~"≠i.h
"

75 
	~"˚£rvî.h
"

77 #i‚de‡
SUN_LEN


80 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

81 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

86 
	$WaôF‹Pid
()

88 
°©us
;

89 
pid
=-1;

90 
pid
==-1)

92 
pid
=
	`waôpid
(-1, &
°©us
, 
__WALL
);

93 i‡((
pid
==-1Ë&& (
î∫o
!=
EINTR
))

95 
	`¥ötf
("LﬂdExãnsi⁄ waô faû. :%d\n", 
î∫o
);

99  
pid
;

100 
	}
}

102 
	$showRegi°îs
(
pid
)

104 #ifde‡
__Ørch64__


105 
u£r_±_ªgs
 
ªgs
;

107 #ifde‡
__¨m__


108 
±_ªgs
 
r
;

110 
u£r_ªgs_°ru˘
 
r
;

146 
	}
}

148 
uöçå_t
 
	$föddl›í
(
pid
)

150 *
libdl
;

151 *
ªÆdl›í
;

152 
libdl
=
	`dl›í
("libdl.so", 
RTLD_NOW
);

154 
	`¥ötf
("libdl=%p\n", 
libdl
);

156 
ªÆdl›í
=
	`dlsym
(
libdl
,"dlopen");

157 
	`¥ötf
("dl›í=%p\n", 
dl›í
);

158 
	`¥ötf
("ªÆdl›í=%p\n", 
ªÆdl›í
);

159 #i‚de‡
__¨m__


160 i‡(
dl›í
==
ªÆdl›í
)

161 
	`¥ötf
("PleaseÅell db what you didÅo getÅhisÅo function (excluding manuallyÉditingÅhis if statement)\n");

167 
FILE
 *
m≠s
=
	`f›í
("/proc/self/maps", "r");

169 
x
[200];

170 
cuºítmoduÀ
[256];

171 
moduÀ∑th
[256];

173 
cuºítmoduÀ°¨t
;

175 
cuºítmoduÀ
[0]=0;

178 
	`fgës
(
x
, 200, 
m≠s
))

180 
°¨t
;

181 
°›
;

182 
	`¥ötf
("%s", 
x
);

184 
	`ssˇnf
(
x
, "%Œx-%Œx %*†%*†%*†%*†%s\n", &
°¨t
, &
°›
, 
moduÀ∑th
);

186 i‡(
	`°rcmp
(
moduÀ∑th
, 
cuºítmoduÀ
)!=0)

188 
	`°r˝y
(
cuºítmoduÀ
, 
moduÀ∑th
);

189 
cuºítmoduÀ°¨t
=
°¨t
;

193 (((
uöçå_t
)
ªÆdl›í
)>=
°¨t
) &&

194 (((
uöçå_t
)
ªÆdl›í
)<
°›
)

197 
off£t
=(
uöçå_t
)
ªÆdl›í
-
cuºítmoduÀ°¨t
;

198 
m≠sfûíame
[255];

199 
	`¥ötf
("found it. ModuÀ: %†Off£t=%x\n", 
cuºítmoduÀ
, 
off£t
);

202 
	`•rötf
(
m≠sfûíame
, "/¥oc/%d/m≠s", 
pid
);

203 
FILE
 *
m≠s2
=
	`f›í
(
m≠sfûíame
, "r");

204 i‡(
m≠s2
)

206 
y
[200];

207 
	`fgës
(
y
, 200, 
m≠s2
))

209 i‡(
y
[
	`°æí
(y)-1]!='\n')

213 
disˇrd
[100];

217 
disˇrd
[99]=0;

218 
	`fgës
(
disˇrd
, 99, 
m≠s
);

219 } 
disˇrd
[99]!=0);

223 
	`¥ötf
("%s", 
y
);

225 
moduÀ∑th
[0]='\0';

226 
	`ssˇnf
(
y
, "%Œx-%Œx %*†%*†%*†%*†%s\n", &
°¨t
, &
°›
, 
moduÀ∑th
);

228 
	`¥ötf
("Check i‡'%s' ='%s'\n", 
moduÀ∑th
, 
cuºítmoduÀ
);

229 i‡(
	`°rcmp
(
moduÀ∑th
, 
cuºítmoduÀ
)==0)

231 
	`¥ötf
("foundÅhe module inÅheÅargetÖrocess\n");

232 
	`f˛o£
(
m≠s
);

233 
	`f˛o£
(
m≠s2
);

234  
°¨t
+
off£t
;

237 
	`f˛o£
(
m≠s2
);

242 
	`¥ötf
("FaûuªÅÿ›í %s\n", 
m≠sfûíame
);

246 
	`f˛o£
(
m≠s
);

249 
	`¥ötf
("Nope\n");

253 
	`f˛o£
(
m≠s
);

254 
	}
}

256 
	$wrôeSåög
(
pid
, 
uöçå_t
 
addªss
, *
°rög
)

258 
l
=
	`°æí
(
°rög
)+1;

259 *
p
;

260 
v
;

261 
i
;

262 
bs
;

263 
i
=0;

265 
	`¥ötf
("l=%d\n", 
l
);

268 
i
<
l
)

270 
p
=(*)&
°rög
[
i
];

271 i‡((
l
-
i
)<())

273 
bs
=();

274 
v
=*
p
;

278 
v
=
°rög
[
i
];

279 
bs
=1;

282 
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
addªss
+
i
, 
v
);

283 
i
+=
bs
;

285 
	}
}

287 
	$›íExãnsi⁄
(
pid
, *
›íedSockë
)

289 
i
;

290 
s
;

291 
Æ
;

292 
«me
[256];

293 
s
=
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

294 
	`¥ötf
("s=%d\n", 
s
);

296 
	`•rötf
(
«me
, " ce£rvî_exãnsi⁄%d", 
pid
);

298 
sockaddr_un
 
addªss
;

299 
addªss
.
sun_Ámûy
=
AF_UNIX
;

300 
	`°r˝y
(
addªss
.
sun_∑th
, 
«me
);

302 
Æ
=
	`SUN_LEN
(&
addªss
);

304 
addªss
.
sun_∑th
[0]=0;

305 
i
=
	`c⁄√˘
(
s
, (
sockaddr
 *)&
addªss
, 
Æ
);

307 i‡(
i
==0)

309 
	`¥ötf
("Successful connection\n");

310 *
›íedSockë
=
s
;

315 
	`˛o£
(
s
);

318 
	}
}

320 
	$isExãnsi⁄Lﬂded
(
pid
)

322 
s
;

323 
ªsu…
=
	`›íExãnsi⁄
(
pid
, &
s
);

325 i‡(
ªsu…
)

326 
	`˛o£
(
s
);

328  
ªsu…
;

329 
	}
}

331 
	$lﬂdExãnsi⁄
(
pid
, *
∑th
, 
isBeögDebugged
)

334 
uöçå_t
 
dl›í
;

335 
uöçå_t
 
°r
;

336 
°©us
;

337 
∑thÀn
=
	`°æí
(
∑th
)+1;

339 
	`¥ötf
("lﬂdExãnsi⁄(%d, %s, %d)\n", 
pid
, 
∑th
, 
isBeögDebugged
);

341 
	`¥ötf
("Phase 0: Check if it'sálready open\n");

342 i‡(
	`isExãnsi⁄Lﬂded
(
pid
))

344 
	`¥ötf
("AlreadyÜoaded\n");

345  
TRUE
;

348 
	`¥ötf
("Not yetÜoaded\n");

352 
	`¥ötf
("Phase 1: Find dlopen inÅarget\n");

354 
dl›í
=
	`föddl›í
(
pid
);

355 
	`¥ötf
("dl›í=%p\n", (*)
dl›í
);

357 i‡(!
isBeögDebugged
)

359 
	`±ø˚
(
PTRACE_ATTACH
, 
pid
, 0,0);

361 
pid
=
	`WaôF‹Pid
();

362 
	`¥ötf
("A·î waô. PID=%d\n", 
pid
);

363 
	`±ø˚
(
PTRACE_CONT
,
pid
,0,0);

366 
	`¥ötf
("KûlögÖid %d\n", 
pid
);

367 
e
=
	`kûl
(
pid
, 
SIGSTOP
);

369 
	`¥ötf
("kû»ªtu∫ed %d\n", 
e
);

370 
	`¥ötf
("Waiting...\n");

371 
pid
=
	`WaôF‹Pid
();

374 
	`showRegi°îs
(
pid
);

378 
	`¥ötf
("A·î waô 2. PID=%d\n", 
pid
);

384 #ifde‡
__i386__


385 
±_ªgs
 
‹igªgs
;

386 
±_ªgs
 
√wªgs
;

389 #ifde‡
__x86_64__


390 
u£r_ªgs_°ru˘
 
‹igªgs
;

391 
u£r_ªgs_°ru˘
 
√wªgs
;

395 #ifde‡
__¨m__


396 
±_ªgs
 
‹igªgs
;

397 
±_ªgs
 
√wªgs
;

401 #ifde‡
__Ørch64__


402 
u£r_±_ªgs
 
‹igªgs
;

403 
u£r_±_ªgs
 
√wªgs
;

404 
iovec
 
iov
;

407 #ifde‡
__Ørch64__


408 
iov
.
iov_ba£
=&
√wªgs
;

409 
iov
.
iov_Àn
=(
√wªgs
);

410 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

412 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

415 
	`¥ötf
("PTRACE_GETREGS FAILED\n");

416 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

418  
FALSE
;

421 #ifde‡
__Ørch64__


422 
iov
.
iov_ba£
=&
‹igªgs
;

423 
iov
.
iov_Àn
=(
‹igªgs
);

424 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

426 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
‹igªgs
)!=0)

429 
	`¥ötf
("PTRACE_GETREGS FAILED 2\n");

430 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

432  
FALSE
;

437 
uöçå_t
 
ªtu∫addªss
=0x0ce0;

440 #ifde‡
__¨m__


443 
√wªgs
.
ARM_•
-=8+4*((
∑thÀn
+3)/ 4);

446 
°r
=
√wªgs
.
ARM_•
+4;

447 
	`wrôeSåög
(
pid
, 
°r
, 
∑th
);

449 
√wªgs
.
ARM_Ã
=
ªtu∫addªss
;

450 
√wªgs
.
ARM_pc
=
dl›í
;

451 
√wªgs
.
ARM_r0
=
°r
;

452 
√wªgs
.
ARM_r1
=
RTLD_NOW
;

454 i‡(
√wªgs
.
ARM_pc
 & 1)

457 
	`¥ötf
("THUMB destination\n");

458 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr | (1 << 5);

462 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<25));

468 
	`¥ötf
("ARM destination\n");

469 
	`¥ötf
("√wªgs.ARM_˝§ wa†%x\n", 
√wªgs
.
ARM_˝§
);

470 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<5));

471 
√wªgs
.
ARM_˝§
=newregs.ARM_cpsr & (~(1<<25));

472 
	`¥ötf
("√wªgs.ARM_˝§ i†%x\n", 
√wªgs
.
ARM_˝§
);

475 
	`¥ötf
("r0=%lx\n", 
‹igªgs
.
ARM_r0
);

476 
	`¥ötf
("‹ig_r0=%lx\n", 
‹igªgs
.
ARM_ORIG_r0
);

477 
	`¥ötf
("pc=%lx\n", 
‹igªgs
.
ARM_pc
);

478 
	`¥ötf
("˝§=%lx\n", 
‹igªgs
.
ARM_˝§
);

482 #ifde‡
__Ørch64__


483 
	`¥ötf
("extensionloader isÇot implemented yet foráarch64\n");

484  
FALSE
;

487 #ifde‡
__x86_64__


488 
	`¥ötf
("øx=%lx\n", 
‹igªgs
.
øx
);

489 
	`¥ötf
("rbp=%lx\n", 
‹igªgs
.
rbp
);

490 
	`¥ötf
("r•=%lx\n", 
‹igªgs
.
r•
);

491 
	`¥ötf
("‹ig_øx=%lx\n", 
‹igªgs
.
‹ig_øx
);

492 
	`¥ötf
("rù=%lx\n", 
‹igªgs
.
rù
);

497 
√wªgs
.
r•
Úewªgs.r•-0x28-(8*((
∑thÀn
+7) / 8));

500 i‡((
√wªgs
.
r•
 & 0xf)!=8)

502 
	`¥ötf
("Alignög sèck. Wa†%Œx", 
√wªgs
.
r•
);

503 
√wªgs
.
r•
-=8;

504 
√wªgs
.
r•
&=~(0xf);

506 
√wªgs
.
r•
=newregs.rsp | 8;

508 
	`¥ötf
(" i†now %Œx\n", 
√wªgs
.
r•
);

512 
	`¥ötf
("Wrôög 0x0˚0Åÿ%lx\n", 
√wªgs
.
r•
);

513 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
, 
ªtu∫addªss
)!=0)

515 
	`¥ötf
("FailedÅo writeÑeturnáddress\n");

516 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

518  
FALSE
;

521 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
-8, 
ªtu∫addªss
)!=0)

523 
	`¥ötf
("Fuck\n");

524 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

526  
FALSE
;

529 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
r•
+8, 
ªtu∫addªss
)!=0)

531 
	`¥ötf
("Fuck\n");

532 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

534  
FALSE
;

540 
°r
=
√wªgs
.
r•
+0x18;

541 
	`wrôeSåög
(
pid
, 
°r
, 
∑th
);

543 
	`¥ötf
("°r=%p\n", (*)
°r
);

547 
ªtu∫addªss
=
	`±ø˚
(
PTRACE_PEEKDATA
, 
pid
, 
√wªgs
.
r•
, 0);

548 
	`¥ötf
("[%lx]=%lx", 
√wªgs
.
r•
, 
ªtu∫addªss
);

551 
√wªgs
.
rù
=
dl›í
;

552 
√wªgs
.
øx
=0;

553 
√wªgs
.
rdi
=
°r
;

554 
√wªgs
.
rsi
=
RTLD_NOW
;

555 
√wªgs
.
‹ig_øx
=0;

558 #ifde‡
__i386__


559 
	`¥ötf
("óx=%lx\n", 
‹igªgs
.
óx
);

560 
	`¥ötf
("ebp=%lx\n", 
‹igªgs
.
ebp
);

561 
	`¥ötf
("e•=%lx\n", 
‹igªgs
.
e•
);

562 
	`¥ötf
("‹ig_óx=%lx\n", 
‹igªgs
.
‹ig_óx
);

563 
	`¥ötf
("eù=%lx\n", 
‹igªgs
.
eù
);

566 
√wªgs
.
e•
Úewªgs.e•-0x28-(8*((
∑thÀn
+7) / 8));

567 i‡((
√wªgs
.
e•
 & 0xf)!=8)

569 
	`¥ötf
("Alignög sèck. Wa†%Œx", 
√wªgs
.
e•
);

570 
√wªgs
.
e•
-=8;

571 
√wªgs
.
e•
&=~(0xf);

573 
√wªgs
.
e•
=newregs.esp | 8;

575 
	`¥ötf
(" i†now %Œx\n", 
√wªgs
.
e•
);

587 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+0, 
ªtu∫addªss
)!=0)

589 
	`¥ötf
("Fuck\n");

590 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

592  
FALSE
;

595 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+4,Çewregs.esp+12)!=0)

597 
	`¥ötf
("Fuck2\n");

598 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

600  
FALSE
;

603 i‡(
	`±ø˚
(
PTRACE_POKEDATA
, 
pid
, 
√wªgs
.
e•
+8, 
RTLD_NOW
)!=0)

605 
	`¥ötf
("Fuck3\n");

606 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

608  
FALSE
;

611 
	`wrôeSåög
(
pid
, 
√wªgs
.
e•
+12, 
∑th
);

613 
√wªgs
.
eù
=
dl›í
;

614 
√wªgs
.
‹ig_óx
=0;

617 #ifde‡
__Ørch64__


618 
iov
.
iov_ba£
=&
√wªgs
;

619 
iov
.
iov_Àn
=(
√wªgs
);

620 i‡(
	`±ø˚
(
PTRACE_SETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

622 i‡(
	`±ø˚
(
PTRACE_SETREGS
, 
pid
, 0, &
√wªgs
)!=0)

625 
	`¥ötf
("PTRACE_SETREGS FAILED\n");

626 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

628  
FALSE
;

631 #ifde‡
__Ørch64__


632 
iov
.
iov_ba£
=&
√wªgs
;

633 
iov
.
iov_Àn
=(
√wªgs
);

634 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

636 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

639 
	`¥ötf
("PTRACE_GETREGS FAILED 4\n");

640 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

642  
FALSE
;

645 
	`¥ötf
("after setregs:\n");

647 #ifde‡
__¨m__


648 
	`¥ötf
("r0=%lx\n", 
√wªgs
.
ARM_r0
);

649 
	`¥ötf
("‹ig_r0=%lx\n", 
√wªgs
.
ARM_ORIG_r0
);

650 
	`¥ötf
("pc=%lx\n", 
√wªgs
.
ARM_pc
);

651 
	`¥ötf
("˝§=%lx\n", 
√wªgs
.
ARM_˝§
);

654 #ifde‡
__x86_64__


655 
	`¥ötf
("øx=%lx\n", 
√wªgs
.
øx
);

656 
	`¥ötf
("rdi=%lx\n", 
√wªgs
.
rdi
);

657 
	`¥ötf
("rsi=%lx\n", 
√wªgs
.
rsi
);

658 
	`¥ötf
("rbp=%lx\n", 
√wªgs
.
rbp
);

659 
	`¥ötf
("r•=%lx\n", 
√wªgs
.
r•
);

660 
	`¥ötf
("‹ig_øx=%lx\n", 
√wªgs
.
‹ig_øx
);

661 
	`¥ötf
("rù=%lx\n", 
√wªgs
.
rù
);

664 #ifde‡
__i386__


665 
	`¥ötf
("óx=%lx\n", 
√wªgs
.
óx
);

666 
	`¥ötf
("edi=%lx\n", 
√wªgs
.
edi
);

667 
	`¥ötf
("esi=%lx\n", 
√wªgs
.
esi
);

668 
	`¥ötf
("ebp=%lx\n", 
√wªgs
.
ebp
);

669 
	`¥ötf
("e•=%lx\n", 
√wªgs
.
e•
);

670 
	`¥ötf
("‹ig_óx=%lx\n", 
√wªgs
.
‹ig_óx
);

671 
	`¥ötf
("eù=%lx\n", 
√wªgs
.
eù
);

674 
	`¥ötf
("\n\nContinuingÅhread\n");

677 
±r
;

678 
±r
=
	`±ø˚
(
PTRACE_CONT
,
pid
,(*)0,(*)
SIGCONT
);

680 
	`¥ötf
("PRACE_CONT=%d\n", 
±r
);

681 i‡(
±r
!=0)

683 
	`¥ötf
("PTRACE_CONT FAILED\n");

689 
pid
=-1;

690 
pid
==-1)

692 
pid
=
	`waôpid
(-1, &
°©us
, 
WUNTRACED
| 
__WALL
);

694 i‡((
pid
==-1Ë&& (
î∫o
!=
EINTR
))

696 
	`¥ötf
("LﬂdExãnsi⁄ waô faû. :%d\n", 
î∫o
);

698  
FALSE
;

701 i‡(
pid
==0)

702 
pid
=-1;

703 
	`¥ötf
(".");

706 
	`¥ötf
("a·î waô:Öid=%d (°©us=%x)\n", 
pid
, 
°©us
);

708 
sigöfo_t
 
si
;

709 i‡(
	`±ø˚
(
PTRACE_GETSIGINFO
, 
pid
, 
NULL
, &
si
)!=0)

711 
	`¥ötf
("GETSIGINFO FAILED\n");

712 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

714  
FALSE
;

717 
	`¥ötf
("si.si_signo=%d\n", 
si
.
si_signo
);

721 #ifde‡
__Ørch64__


722 
iov
.
iov_ba£
=&
√wªgs
;

723 
iov
.
iov_Àn
=(
√wªgs
);

724 i‡(
	`±ø˚
(
PTRACE_GETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

726 i‡(
	`±ø˚
(
PTRACE_GETREGS
, 
pid
, 0, &
√wªgs
)!=0)

729 
	`¥ötf
("PTRACE_GETREGS FAILED (2)\n");

730 
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0);

732  
FALSE
;

735 #ifde‡
__¨m__


736 
	`¥ötf
("r0=%lx\n", 
√wªgs
.
ARM_r0
);

737 
	`¥ötf
("‹ig_r0=%lx\n", 
√wªgs
.
ARM_ORIG_r0
);

738 
	`¥ötf
("pc=%lx\n", 
√wªgs
.
ARM_pc
);

739 
	`¥ötf
("•=%lx\n", 
√wªgs
.
ARM_•
);

740 
	`¥ötf
("˝§=%lx\n", 
√wªgs
.
ARM_˝§
);

743 #ifde‡
__x86_64__


744 
	`¥ötf
("øx=%lx\n", 
√wªgs
.
øx
);

745 
	`¥ötf
("rdi=%lx\n", 
√wªgs
.
rdi
);

746 
	`¥ötf
("rsi=%lx\n", 
√wªgs
.
rsi
);

747 
	`¥ötf
("rbp=%lx\n", 
√wªgs
.
rbp
);

748 
	`¥ötf
("r•=%lx\n", 
√wªgs
.
r•
);

749 
	`¥ötf
("‹ig_øx=%lx\n", 
√wªgs
.
øx
);

750 
	`¥ötf
("rù=%lx\n", 
√wªgs
.
rù
);

753 #ifde‡
__i386__


754 
	`¥ötf
("óx=%lx\n", 
√wªgs
.
óx
);

755 
	`¥ötf
("edi=%lx\n", 
√wªgs
.
edi
);

756 
	`¥ötf
("esi=%lx\n", 
√wªgs
.
esi
);

757 
	`¥ötf
("ebp=%lx\n", 
√wªgs
.
ebp
);

758 
	`¥ötf
("e•=%lx\n", 
√wªgs
.
e•
);

759 
	`¥ötf
("‹ig_óx=%lx\n", 
√wªgs
.
óx
);

760 
	`¥ötf
("eù=%lx\n", 
√wªgs
.
eù
);

764 #ifde‡
__Ørch64__


765 
iov
.
iov_ba£
=&
‹igªgs
;

766 
iov
.
iov_Àn
=(
‹igªgs
);

767 i‡(
	`±ø˚
(
PTRACE_SETREGSET
, 
pid
, (*)
NT_PRSTATUS
, &
iov
))

769 i‡(
	`±ø˚
(
PTRACE_SETREGS
, 
pid
, 0, &
‹igªgs
)!=0)

772 
	`¥ötf
("PTRACE_SETREGS FAILED (20\n");

775 i‡(!
isBeögDebugged
)

777 
	`¥ötf
("Detaching\n");

778 i‡(
	`±ø˚
(
PTRACE_DETACH
, 
pid
,0,0)!=0)

779 
	`¥ötf
("PTRACE_DETACH FAILED\n");

783 i‡(
	`±ø˚
(
PTRACE_CONT
,
pid
,(*)0,(*)
SIGCONT
)!=0)

784 
	`¥ötf
("PTRACE_CONT failed\n");

788 
	`¥ötf
("End...\n");

790 
	}
}

792 
	$lﬂdCESîvîExãnsi⁄
(
HANDLE
 
hPro˚ss
)

794 
	`¥ötf
("loadCEServerExtension\n");

795 i‡(
	`GëH™dÀTy≥
(
hPro˚ss
Ë=
htPro˚sH™dÀ
 )

797 
PPro˚ssD©a
 
p
=(PPro˚ssD©a)
	`GëPoöãrFromH™dÀ
(
hPro˚ss
);

800 i‡(
p
->
isDebugged
)

802 
	`¥ötf
("thisÖrocess id being debugged\n");

804 i‡(
p
->
debuggîThªadID
!=
	`±hªad_£lf
())

806 
	`¥ötf
("NotÅhe debuggerÅhread. Switching...\n");

808 
ªsu…
=0;

809 #¥agm®
	`∑ck
(1)

812 
uöt8_t
 
comm™d
;

813 
uöt32_t
 
pH™dÀ
;

814 } 
lx
;

815 #¥agm®
	`∑ck
()

817 
lx
.
comm™d
=
CMD_LOADEXTENSION
;

818 
lx
.
pH™dÀ
=
hPro˚ss
;

819 i‡(
	`±hªad_muãx_lock
(&
debugsockëmuãx
) == 0)

821 
	`£ndÆl
(
p
->
debuggîClõ¡
, &
lx
, (lx), 0);

822 
	`WakeDebuggîThªad
();

824 
	`ªcvÆl
(
p
->
debuggîClõ¡
, &
ªsu…
, ‘esu…), 
MSG_WAITALL
);

825 
	`¥ötf
("Rëu∫ed from debuggîÅhªad. Resu…:%d\n", 
ªsu…
);

827 
	`±hªad_muãx_u∆ock
(&
debugsockëmuãx
);

830  
ªsu…
;

833 
	`¥ötf
("This isÅhe debuggerÅhread\n");

838 i‡(
p
->
hasLﬂdedExãnsi⁄
==0)

840 
moduÀ∑th
[256], 
moduÀ∑th2
[256];

841 
l
;

843 
	`mem£t
(
moduÀ∑th
, 0, 256);

844 
	`mem£t
(
moduÀ∑th2
, 0, 256);

846 *
mp
;

849 
l
=
	`ªadlök
("/¥oc/£lf/exe", 
moduÀ∑th2
, 256);

851 i‡(
l
!=-1)

853 
moduÀ∑th2
[
l
]=0;

854 
	`¥ötf
("moduÀ∑th2=%s\n", 
moduÀ∑th2
);

855 
	`ssˇnf
(
moduÀ∑th2
,"%s", 
moduÀ∑th
);

857 
	`¥ötf
("moduÀ∑th=%s\n", 
moduÀ∑th
);

858 
mp
=
	`dú«me
(
moduÀ∑th
);

860 
	`¥ötf
("a·î dú«me: %s\n", 
mp
);

861 
	`°r˝y
(
moduÀ∑th
, 
mp
);

862 
	`°rˇt
(
moduÀ∑th
, "/libceserver-extension");

864 #ifde‡
__i386__


865 
	`°rˇt
(
moduÀ∑th
, "_x86");

868 #ifde‡
__Ørch64__


869 
	`°rˇt
(
moduÀ∑th
, "_arm64");

872 #ifde‡
__¨m__


873 
	`°rˇt
(
moduÀ∑th
, "_arm");

875 
	`°rˇt
(
moduÀ∑th
,".so");

882 
	`°r˝y
(
moduÀ∑th
, "libceserver-extension");

884 #ifde‡
__i386__


885 
	`°rˇt
(
moduÀ∑th
, "_x86");

888 #ifde‡
__x86_64__


889 
	`°rˇt
(
moduÀ∑th
, "_x86_64");

892 #ifde‡
__Ørch64__


893 
	`°rˇt
(
moduÀ∑th
, "_arm64");

896 #ifde‡
__¨m__


897 
	`°rˇt
(
moduÀ∑th
, "_arm");

899 
	`°rˇt
(
moduÀ∑th
,".so");

902 
	`¥ötf
("moduÀ∑th = %s\n", 
moduÀ∑th
);

907 i‡(
p
->
isDebugged
)

909 
	`¥ötf
("ThisÖrocess is being debugged. Checking if it'sálreadyÜoaded\n");

911 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

912 
p
->
hasLﬂdedExãnsi⁄
=
	`›íExãnsi⁄
’->
pid
, &p->
exãnsi⁄FD
);

913 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

917 i‡(
p
->
hasLﬂdedExãnsi⁄
)

918 
	`¥ötf
("TheÉxtension isálreadyÜoaded\n");

922 
	`±hªad_muãx_lock
(&
p
->
exãnsi⁄Muãx
);

923 i‡(
p
->
hasLﬂdedExãnsi⁄
==0)

926 i‡(
p
->
√vîF‹˚LﬂdExãnsi⁄
==0)

928 
	`¥ötf
("CallingÜoadExtension\n");

929 
p
->
hasLﬂdedExãnsi⁄
=
	`lﬂdExãnsi⁄
’->
pid
, 
moduÀ∑th
,Ö->
isDebugged
);

931 
	`¥ötf
("p->hasLﬂdedExãnsi⁄=%d\n", 
p
->
hasLﬂdedExãnsi⁄
);

934 i‡(
p
->
hasLﬂdedExãnsi⁄
)

935 
p
->
hasLﬂdedExãnsi⁄
=
	`›íExãnsi⁄
’->
pid
, &p->
exãnsi⁄FD
);

938 
	`±hªad_muãx_u∆ock
(&
p
->
exãnsi⁄Muãx
);

944 
	`¥ötf
("AlreadyÜoaded\n");

946  
p
->
hasLﬂdedExãnsi⁄
;

950 
	`¥ötf
("Invalid handleÅype");

953 
	}
}

	@extensionloader.h

8 #i‚de‡
EXTENTIONLOADER_H_


9 
	#EXTENTIONLOADER_H_


	)

11 
	~"p‹thñp.h
"

13 
lﬂdCESîvîExãnsi⁄
(
HANDLE
 
hPro˚ss
);

	@porthelp.c

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~"p‹thñp.h
"

16 
h™dÀTy≥
 
	mty≥
;

17 *
	mpoöãr
;

19 } 
	tH™dÀLi°E¡ry
, *
	tPH™dÀLi°E¡ry
;

21 vﬁ©ûê
H™dÀLi°E¡ry
 *
	gH™dÀLi°
;

22 
	gH™dÀLi°_max
;

24 
	$Cª©eH™dÀFromPoöãr
(*
p
, 
h™dÀTy≥
 
ty≥
)

26 i‡(
H™dÀLi°
==
NULL
)

29 
H™dÀLi°_max
=4096 / (
H™dÀLi°E¡ry
);

30 
H™dÀLi°
=(
PH™dÀLi°E¡ry
)
	`mÆloc
(
H™dÀLi°_max
*4096);

32 
	`mem£t
((*)
H™dÀLi°
, 0, (
H™dÀLi°E¡ry
)*256);

36 
i
;

37 
i
=1; i<
H™dÀLi°_max
; i++)

39 i‡(
H™dÀLi°
[
i
].
ty≥
==
htEm±y
)

41 
H™dÀLi°
[
i
].
poöãr
=
p
;

42 
H™dÀLi°
[
i
].
ty≥
=type;

43  
i
;

48 
i
=
H™dÀLi°_max
;

50 
H™dÀLi°_max
=HandleList_max * 2;

52 
H™dÀLi°
=(
PH™dÀLi°E¡ry
)
	`ªÆloc
((*)H™dÀLi°, 
H™dÀLi°_max
 * (
H™dÀLi°E¡ry
));

53 
	`mem£t
((*)&
H™dÀLi°
[
i
], 0, i);

55 
H™dÀLi°
[
i
].
poöãr
=
p
;

56 
H™dÀLi°
[
i
].
ty≥
=type;

57  
i
;

58 
	}
}

61 *
	$GëPoöãrFromH™dÀ
(
h™dÀ
)

63 i‡((
h™dÀ
<
H™dÀLi°_max
Ë&& (
H™dÀLi°
[h™dÀ].
ty≥
 !
htEm±y
))

64  
H™dÀLi°
[
h™dÀ
].
poöãr
;

66  
NULL
;

67 
	}
}

69 
h™dÀTy≥
 
	$GëH™dÀTy≥
(
h™dÀ
)

71 i‡(
h™dÀ
<
H™dÀLi°_max
)

72  
H™dÀLi°
[
h™dÀ
].
ty≥
;

74  
htEm±y
;

75 
	}
}

77 
	$RemoveH™dÀ
(
h™dÀ
)

79 i‡((
h™dÀ
>0Ë&& (h™dÀ<
H™dÀLi°_max
Ë&& (
H™dÀLi°
[h™dÀ].
ty≥
 !
htEm±y
))

80 
H™dÀLi°
[
h™dÀ
].
ty≥
=
htEm±y
;

81 
	}
}

83 
	$SórchH™dÀLi°
(
ty≥
, 
HANDLESEARCHCALLBACK
 
cb
, *
£¨chd©a
)

89 
i
;

91 
i
=1; i<
H™dÀLi°_max
; i++)

93 i‡(
H™dÀLi°
[
i
].
ty≥
==type)

95 i‡(
	`cb
(
H™dÀLi°
[
i
].
poöãr
, 
£¨chd©a
))

96  
i
;

101 
	}
}

	@porthelp.h

8 #i‚de‡
PORTHELP_H_


9 
	#PORTHELP_H_


	)

11 
	~<°döt.h
>

13 
uöt32_t
 
	tHANDLE
;

14 
uöt32_t
 
	tDWORD
;

16 
	#TH32CS_SNAPPROCESS
 0x2

	)

17 
	#TH32CS_SNAPMODULE
 0x8

	)

19 
	#PAGE_NOACCESS
 1

	)

20 
	#PAGE_READONLY
 2

	)

21 
	#PAGE_READWRITE
 4

	)

22 
	#PAGE_WRITECOPY
 8

	)

23 
	#PAGE_EXECUTE
 16

	)

24 
	#PAGE_EXECUTE_READ
 32

	)

25 
	#PAGE_EXECUTE_READWRITE
 64

	)

27 
	#MEM_MAPPED
 262144

	)

28 
	#MEM_PRIVATE
 131072

	)

30 íum {
	mhtEm±y
=0, 
	mhtPro˚sH™dÀ
, 
	mhtThªadH™dÀ
, 
	mhtTHSPro˚ss
, 
	mhtTHSModuÀ
, 
	mhtN©iveThªadH™dÀ
} 
	th™dÀTy≥
;

31 
	tBOOL
;

33 (*
	tHANDLESEARCHCALLBACK
Ë(*
	td©a
, *
	t£¨chd©a
);

35 
	#TRUE
 1

	)

36 
	#FALSE
 0

	)

39 
	`Cª©eH™dÀFromPoöãr
(*
p
, 
h™dÀTy≥
 
ty≥
);

40 *
	`GëPoöãrFromH™dÀ
(
h™dÀ
);

41 
h™dÀTy≥
 
	`GëH™dÀTy≥
(
h™dÀ
);

42 
	`RemoveH™dÀ
(
h™dÀ
);

43 
	`SórchH™dÀLi°
(
ty≥
, 
HANDLESEARCHCALLBACK
 
cb
, *
£¨chd©a
);

	@symbols.c

8 
	~<°dio.h
>

9 
	~<ñf.h
>

10 
	~<sys/ty≥s.h
>

11 
	~<sys/°©.h
>

12 
	~<f˙é.h
>

13 
	~<°dlib.h
>

14 
	~<°ddef.h
>

15 
	~<uni°d.h
>

16 
	~<°rög.h
>

17 
	~<zlib.h
>

19 #¥agm®
∑ck
(1)

22 
uöt64_t
 
	maddªss
;

23 
	msize
;

24 
	mty≥
;

25 
	m«mñígth
;

26 
	m«me
[0];

27 } 
	tsymbﬁöfo
, *
	tpsymbﬁöfo
;

28 #¥agm®
∑ck
()

30 
	#TEMPBUFSIZE
 64*1024

	)

33 
	$lﬂdSåögTabÀ64
(
f
, 
Elf64_Shdr
 *
£˘i⁄Hódîs
, **
°rögTabÀ
, 
ödex
)

35 i‡((
°rögTabÀ
[
ödex
]==
NULL
Ë&& (
£˘i⁄Hódîs
[ödex].
sh_ty≥
==
SHT_STRTAB
))

37 
°rögTabÀ
[
ödex
]=
	`mÆloc
(
£˘i⁄Hódîs
[ödex].
sh_size
);

38 i‡(
	`¥ód
(
f
, 
°rögTabÀ
[
ödex
], 
£˘i⁄Hódîs
[ödex].
sh_size
, se˘i⁄Hódîs[ödex].
sh_off£t
)==-1)

40 
	`¥ötf
("FailureÜoadingÅhe stringtable\n");

41 
	`‰ì
(
°rögTabÀ
[
ödex
]);

42 
°rögTabÀ
[
ödex
]=
NULL
;

47 
	`¥ötf
("Notá stringÅable\n");

48 
	}
}

50 
	$lﬂdSåögTabÀ32
(
f
, 
Elf32_Shdr
 *
£˘i⁄Hódîs
, **
°rögTabÀ
, 
ödex
)

52 i‡((
°rögTabÀ
[
ödex
]==
NULL
Ë&& (
£˘i⁄Hódîs
[ödex].
sh_ty≥
==
SHT_STRTAB
))

54 
°rögTabÀ
[
ödex
]=
	`mÆloc
(
£˘i⁄Hódîs
[ödex].
sh_size
);

55 i‡(
	`¥ód
(
f
, 
°rögTabÀ
[
ödex
], 
£˘i⁄Hódîs
[ödex].
sh_size
, se˘i⁄Hódîs[ödex].
sh_off£t
)==-1)

57 
	`¥ötf
("FailureÜoadingÅhe stringtable\n");

58 
	`‰ì
(
°rögTabÀ
[
ödex
]);

59 
°rögTabÀ
[
ödex
]=
NULL
;

64 
	`¥ötf
("Notá stringÅable\n");

65 
	}
}

67 
	$ELF32
(
f
, 
Elf32_Ehdr
 *
b
, **
ouçut
)

72 
i
,
j
;

74 *
ãmpbuf„r
=
NULL
;

75 
ãmpbuf„Ωos
=0;

76 
maxouçutsize
=
TEMPBUFSIZE
;

77 
ãmpbuf„r
=
	`mÆloc
(
TEMPBUFSIZE
);

80 
z_°ªam
 
°rm
;

81 
°rm
.
zÆloc
 = 
Z_NULL
;

82 
°rm
.
z‰ì
 = 
Z_NULL
;

83 
°rm
.
›aque
 = 
Z_NULL
;

84 
	`deÊ©eInô
(&
°rm
, 9);

86 *
ouçut
=
	`mÆloc
(
maxouçutsize
);

88 
°rm
.
avaû_out
=
maxouçutsize
-3*(
uöt32_t
);

89 
°rm
.
√xt_out
=(*)&(*
ouçut
)[(
uöt32_t
)*3];

91 *(
uöt32_t
 *)(&(*
ouçut
)[0])=(
b
->
e_ty≥
==
ET_EXEC
);

100 
Elf32_Shdr
 *
£˘i⁄Hódîs
=
	`mÆloc
(
b
->
e_shítsize
*b->
e_shnum
);

102 i‡(
	`¥ód
(
f
, 
£˘i⁄Hódîs
, 
b
->
e_shítsize
*b->
e_shnum
, b->
e_shoff
)==-1)

105 
	`deÊ©eEnd
(&
°rm
);

106 i‡(
£˘i⁄Hódîs
)

107 
	`‰ì
(
£˘i⁄Hódîs
);

109 i‡(
ouçut
)

110 
	`‰ì
(
ouçut
);

112 i‡(
ãmpbuf„r
)

113 
	`‰ì
(
ãmpbuf„r
);

118 **
°rögTabÀ
=
	`ˇŒoc
(
b
->
e_shnum
, (*) );

120 
	`lﬂdSåögTabÀ32
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, 
b
->
e_sh°∫dx
);

123 
i
=0; i<
b
->
e_shnum
; i++)

127 i‡((
£˘i⁄Hódîs
[
i
].
sh_ty≥
==
SHT_SYMTAB
Ë|| (£˘i⁄Hódîs[i].sh_ty≥==
SHT_DYNSYM
))

137 
Elf32_Sym
 *
symbﬁTabÀ
=
	`mÆloc
(
£˘i⁄Hódîs
[
i
].
sh_size
);

138 i‡(
	`¥ód
(
f
, 
symbﬁTabÀ
, 
£˘i⁄Hódîs
[
i
].
sh_size
, se˘i⁄Hódîs[i].
sh_off£t
)==-1)

143 
maxödex
=
£˘i⁄Hódîs
[
i
].
sh_size
 / (
Elf32_Sym
);

145 
	`lﬂdSåögTabÀ32
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, se˘i⁄Hódîs[
i
].
sh_lök
);

148 
j
=0; j<
maxödex
; j++)

160 i‡(
symbﬁTabÀ
[
j
].
°_vÆue
)

163 *
symbﬁ«me
=(*)&
°rögTabÀ
[
£˘i⁄Hódîs
[
i
].
sh_lök
][
symbﬁTabÀ
[
j
].
°_«me
];

164 
size_t
 
«mñígth
=
	`°æí
(
symbﬁ«me
);

165 
íåysize
=(
symbﬁöfo
)+
«mñígth
;

166 i‡(
ãmpbuf„Ωos
+
íåysize
>=
TEMPBUFSIZE
)

170 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

171 
°rm
.
√xt_ö
=
ãmpbuf„r
;

173 
°rm
.
avaû_ö
)

175 i‡(
	`deÊ©e
(&
°rm
, 
Z_NO_FLUSH
)!=
Z_OK
)

182 i‡(
°rm
.
avaû_out
==0)

187 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

189 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

190 
°rm
.
avaû_out
=
maxouçutsize
;

191 
maxouçutsize
=maxoutputsize*2;

197 
ãmpbuf„Ωos
=0;

202 
psymbﬁöfo
 
si
=’symbﬁöfo)&
ãmpbuf„r
[
ãmpbuf„Ωos
];

203 
si
->
addªss
=
symbﬁTabÀ
[
j
].
°_vÆue
;

204 
si
->
size
=
symbﬁTabÀ
[
j
].
°_size
;

205 
si
->
ty≥
=
symbﬁTabÀ
[
j
].
°_öfo
;

206 
si
->
«mñígth
=namelength;

207 
	`mem˝y
(&
si
->
«me
, 
symbﬁ«me
, 
«mñígth
);

210 
ãmpbuf„Ωos
+=
íåysize
;

214 
	`‰ì
(
symbﬁTabÀ
);

220 
i
=0; i<
b
->
e_shnum
; i++)

222 i‡(
°rögTabÀ
[
i
])

223 
	`‰ì
(
°rögTabÀ
[
i
]);

225 
	`‰ì
(
°rögTabÀ
);

227 
	`‰ì
(
£˘i⁄Hódîs
);

230 
	`¥ötf
("end:\n");

231 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

232 
°rm
.
√xt_ö
=
ãmpbuf„r
;

237 
i
=
	`deÊ©e
(&
°rm
, 
Z_FINISH
);

238 
	`¥ötf
("i=%d\n", 
i
);

239 i‡(
i
==
Z_STREAM_END
)

242 i‡(
i
!=
Z_OK
)

244 
	`¥ötf
("FaûuªÅÿcom¥ess: %i\n", 
i
);

248 i‡(
°rm
.
avaû_out
==0)

250 
	`¥ötf
("Ouàbuf„∏fuŒ. RóŒoˇtög :%d\n", 
maxouçutsize
*2);

251 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

253 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

254 
°rm
.
avaû_out
=
maxouçutsize
;

255 
maxouçutsize
=maxoutputsize*2;

268 
	`deÊ©eEnd
(&
°rm
);

272 *(
uöt32_t
 *)(&(*
ouçut
)[4])=
°rm
.
tŸÆ_out
+3*(uint32_t);

273 *(
uöt32_t
 *)(&(*
ouçut
)[8])=
°rm
.
tŸÆ_ö
;

275 
	`‰ì
(
ãmpbuf„r
);

278 
	}
}

280 
	$ELF64
(
f
, 
Elf64_Ehdr
 *
b
, **
ouçut
)

285 
i
,
j
;

288 *
ãmpbuf„r
=
NULL
;

289 
ãmpbuf„Ωos
=0;

290 
maxouçutsize
=
TEMPBUFSIZE
;

291 
ãmpbuf„r
=
	`mÆloc
(
TEMPBUFSIZE
);

294 
z_°ªam
 
°rm
;

295 
°rm
.
zÆloc
 = 
Z_NULL
;

296 
°rm
.
z‰ì
 = 
Z_NULL
;

297 
°rm
.
›aque
 = 
Z_NULL
;

298 
	`deÊ©eInô
(&
°rm
, 9);

300 *
ouçut
=
	`mÆloc
(
maxouçutsize
);

302 
°rm
.
avaû_out
=
maxouçutsize
-3*(
uöt32_t
);

303 
°rm
.
√xt_out
=(*)&(*
ouçut
)[(
uöt32_t
)*3];

305 *(
uöt32_t
 *)(&(*
ouçut
)[0])=(
b
->
e_ty≥
==
ET_EXEC
);

313 
Elf64_Shdr
 *
£˘i⁄Hódîs
=
	`mÆloc
(
b
->
e_shítsize
*b->
e_shnum
);

315 i‡(
	`¥ód
(
f
, 
£˘i⁄Hódîs
, 
b
->
e_shítsize
*b->
e_shnum
, b->
e_shoff
)==-1)

318 
	`deÊ©eEnd
(&
°rm
);

319 i‡(
£˘i⁄Hódîs
)

320 
	`‰ì
(
£˘i⁄Hódîs
);

322 i‡(
ouçut
)

323 
	`‰ì
(
ouçut
);

325 i‡(
ãmpbuf„r
)

326 
	`‰ì
(
ãmpbuf„r
);

331 **
°rögTabÀ
=
	`ˇŒoc
(
b
->
e_shnum
, (*) );

333 
	`lﬂdSåögTabÀ64
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, 
b
->
e_sh°∫dx
);

336 
i
=0; i<
b
->
e_shnum
; i++)

340 i‡((
£˘i⁄Hódîs
[
i
].
sh_ty≥
==
SHT_SYMTAB
Ë|| (£˘i⁄Hódîs[i].sh_ty≥==
SHT_DYNSYM
))

350 
Elf64_Sym
 *
symbﬁTabÀ
=
	`mÆloc
(
£˘i⁄Hódîs
[
i
].
sh_size
);

351 i‡(
	`¥ód
(
f
, 
symbﬁTabÀ
, 
£˘i⁄Hódîs
[
i
].
sh_size
, se˘i⁄Hódîs[i].
sh_off£t
)==-1)

356 
maxödex
=
£˘i⁄Hódîs
[
i
].
sh_size
 / (
Elf64_Sym
);

358 
	`lﬂdSåögTabÀ64
(
f
, 
£˘i⁄Hódîs
, 
°rögTabÀ
, se˘i⁄Hódîs[
i
].
sh_lök
);

361 
j
=0; j<
maxödex
; j++)

374 i‡(
symbﬁTabÀ
[
j
].
°_vÆue
)

377 *
symbﬁ«me
=(*)&
°rögTabÀ
[
£˘i⁄Hódîs
[
i
].
sh_lök
][
symbﬁTabÀ
[
j
].
°_«me
];

378 
size_t
 
«mñígth
=
	`°æí
(
symbﬁ«me
);

379 
íåysize
=(
symbﬁöfo
)+
«mñígth
;

380 i‡(
ãmpbuf„Ωos
+
íåysize
>=
TEMPBUFSIZE
)

384 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

385 
°rm
.
√xt_ö
=
ãmpbuf„r
;

387 
°rm
.
avaû_ö
)

389 i‡(
	`deÊ©e
(&
°rm
, 
Z_NO_FLUSH
)!=
Z_OK
)

391 
	`¥ötf
("FAILURE TO COMPRESS!\n");

396 i‡(
°rm
.
avaû_out
==0)

400 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

402 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

403 
°rm
.
avaû_out
=
maxouçutsize
;

404 
maxouçutsize
=maxoutputsize*2;

408 
ãmpbuf„Ωos
=0;

413 
psymbﬁöfo
 
si
=’symbﬁöfo)&
ãmpbuf„r
[
ãmpbuf„Ωos
];

414 
si
->
addªss
=
symbﬁTabÀ
[
j
].
°_vÆue
;

415 
si
->
size
=
symbﬁTabÀ
[
j
].
°_size
;

416 
si
->
ty≥
=
symbﬁTabÀ
[
j
].
°_öfo
;

417 
si
->
«mñígth
=namelength;

418 
	`mem˝y
(&
si
->
«me
, 
symbﬁ«me
, 
«mñígth
);

421 
ãmpbuf„Ωos
+=
íåysize
;

425 
	`‰ì
(
symbﬁTabÀ
);

431 
i
=0; i<
b
->
e_shnum
; i++)

433 i‡(
°rögTabÀ
[
i
])

434 
	`‰ì
(
°rögTabÀ
[
i
]);

436 
	`‰ì
(
°rögTabÀ
);

438 
	`‰ì
(
£˘i⁄Hódîs
);

441 
	`¥ötf
("end:\n");

442 
°rm
.
avaû_ö
=
ãmpbuf„Ωos
;

443 
°rm
.
√xt_ö
=
ãmpbuf„r
;

448 
i
=
	`deÊ©e
(&
°rm
, 
Z_FINISH
);

449 
	`¥ötf
("i=%d\n", 
i
);

450 i‡(
i
==
Z_STREAM_END
)

453 i‡(
i
!=
Z_OK
)

455 
	`¥ötf
("FaûuªÅÿcom¥ess: %i\n", 
i
);

459 i‡(
°rm
.
avaû_out
==0)

461 
	`¥ötf
("Ouàbuf„∏fuŒ. RóŒoˇtög :%d\n", 
maxouçutsize
*2);

462 *
ouçut
=
	`ªÆloc
(*ouçut, 
maxouçutsize
*2);

464 
°rm
.
√xt_out
=(*)&(*
ouçut
)[
maxouçutsize
];

465 
°rm
.
avaû_out
=
maxouçutsize
;

466 
maxouçutsize
=maxoutputsize*2;

473 
	`¥ötf
("°rm.avaû_out=%d\n", 
°rm
.
avaû_out
);

475 
	`¥ötf
("tŸÆ_ö = %lu\n", 
°rm
.
tŸÆ_ö
);

476 
	`¥ötf
("tŸÆ_ouà%lu\n", 
°rm
.
tŸÆ_out
);

478 
	`deÊ©eEnd
(&
°rm
);

481 *(
uöt32_t
 *)(&(*
ouçut
)[4])=
°rm
.
tŸÆ_out
+3*(uint32_t);

482 *(
uöt32_t
 *)(&(*
ouçut
)[8])=
°rm
.
tŸÆ_ö
;

485 
	`‰ì
(
ãmpbuf„r
);

489 
	}
}

491 
	$GëSymbﬁLi°FromFûe
(*
fûíame
, **
ouçut
, *
ouçutsize
)

496 
i
, 
f
;

497 *
b
=
NULL
;

499 
	`¥ötf
("GëSymbﬁLi°FromFûe(%s)\n", 
fûíame
);

501 *
ouçut
=
NULL
;

502 
f
=
	`›í
(
fûíame
, 
O_RDONLY
);

503 i‡(
f
==-1)

506 
b
=
	`mÆloc
((
Elf64_Ehdr
));

507 i‡(
b
)

509 
i
=
	`¥ód
(
f
, 
b
, (
Elf64_Ehdr
), 0);

511 i‡(*(
uöt32_t
 *)
b
!=0x464c457f)

514 i‡(
b
[
EI_CLASS
]==
ELFCLASS32
)

515 
i
=
	`ELF32
(
f
, (
Elf32_Ehdr
 *)
b
, 
ouçut
);

517 
i
=
	`ELF64
(
f
, (
Elf64_Ehdr
 *)
b
, 
ouçut
);

519 
	`‰ì
(
b
);

522 
	`˛o£
(
f
);

524  
i
;

525 
	}
}

528 
	$GëModuÀSize32
(
f
, 
Elf32_Ehdr
 *
b
)

534 
Elf32_Phdr
 *
¥ogømHódîs
=
	`mÆloc
(
b
->
e_phítsize
*b->
e_phnum
);

544 i‡(
	`¥ód
(
f
, 
¥ogømHódîs
, 
b
->
e_phítsize
*b->
e_phnum
, b->
e_phoff
)==-1)

546 i‡(
¥ogømHódîs
)

547 
	`‰ì
(
¥ogømHódîs
);

553 
i
;

554 
lowe°
=0;

555 
highe°
=0;

557 
i
=0; i<
b
->
e_phnum
; i++)

559 i‡(
¥ogømHódîs
[
i
].
p_memsz
>0)

561 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
<
lowe°
))

562 
lowe°
=
¥ogømHódîs
[
i
].
p_vaddr
;

564 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
+¥ogømHódîs[i].
p_memsz
>
highe°
))

565 
highe°
=
¥ogømHódîs
[
i
].
p_vaddr
+¥ogømHódîs[i].
p_memsz
;

576 i‡(
¥ogømHódîs
)

577 
	`‰ì
(
¥ogømHódîs
);

581  
highe°
-
lowe°
;

582 
	}
}

584 
	$GëModuÀSize64
(
f
, 
Elf64_Ehdr
 *
b
)

589 
Elf64_Phdr
 *
¥ogømHódîs
=
	`mÆloc
(
b
->
e_phítsize
*b->
e_phnum
);

600 i‡(
	`¥ód
(
f
, 
¥ogømHódîs
, 
b
->
e_phítsize
*b->
e_phnum
, b->
e_phoff
)==-1)

602 i‡(
¥ogømHódîs
)

603 
	`‰ì
(
¥ogømHódîs
);

609 
i
;

610 
lowe°
=0;

611 
highe°
=0;

613 
i
=0; i<
b
->
e_phnum
; i++)

615 i‡(
¥ogømHódîs
[
i
].
p_memsz
>0)

617 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
<
lowe°
))

618 
lowe°
=
¥ogømHódîs
[
i
].
p_vaddr
;

620 i‡((
i
==0Ë|| (
¥ogømHódîs
[i].
p_vaddr
+¥ogømHódîs[i].
p_memsz
>
highe°
))

621 
highe°
=
¥ogømHódîs
[
i
].
p_vaddr
+¥ogømHódîs[i].
p_memsz
;

632 i‡(
¥ogømHódîs
)

633 
	`‰ì
(
¥ogømHódîs
);

637  
highe°
-
lowe°
;

638 
	}
}

641 
	$GëModuÀSize
(*
fûíame
, 
deÁu…size
)

646 
i
,
f
;

647 *
b
=
NULL
;

648 
ªsu…
=
deÁu…size
;

652 
f
=
	`›í
(
fûíame
, 
O_RDONLY
);

653 i‡(
f
==-1)

655 
	`¥ötf
("FaûedÅÿ›í %s\n", 
fûíame
);

656  
deÁu…size
;

660 
b
=
	`mÆloc
((
Elf64_Ehdr
));

661 i‡(
b
)

663 
i
=
	`¥ód
(
f
, 
b
, (
Elf64_Ehdr
), 0);

665 i‡(*(
uöt32_t
 *)
b
!=0x464c457f)

667 
	`¥ötf
("%†i†nŸá¿ñf\n", 
fûíame
);

668 
	`‰ì
(
b
);

669 
	`˛o£
(
f
);

670  
deÁu…size
;

673 i‡(
b
[
EI_CLASS
]==
ELFCLASS32
)

674 
i
=
	`GëModuÀSize32
(
f
, (
Elf32_Ehdr
 *)
b
);

676 
i
=
	`GëModuÀSize64
(
f
, (
Elf64_Ehdr
 *)
b
);

678 
	`‰ì
(
b
);

679 
	`˛o£
(
f
);

682  
i
;

686 
	`˛o£
(
f
);

687  
deÁu…size
;

695 
	}
}

	@symbols.h

8 #i‚de‡
SYMBOLS_H_


9 
	#SYMBOLS_H_


	)

11 
GëSymbﬁLi°FromFûe
(*
fûíame
, **
ouçut
);

12 
GëModuÀSize
(*
fûíame
, 
deÁu…size
);

	@threads.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~"thªads.h
"

11 
	~"≠i.h
"

13 
	$InôülizePro˚ssThªadli°
(
PPro˚ssD©a
 
p
)

15 i‡(
p
->
thªadli°
==
NULL
)

17 
p
->
thªadli°
=
	`mÆloc
((
ThªadD©a
)*64);

18 
p
->
thªadli°max
=64;

21 
p
->
thªadli°pos
=0;

22 
	}
}

24 
	$AddThªadToPro˚ss
(
PPro˚ssD©a
 
p
, 
PThªadD©a
 
thªadd©a
)

26 i‡(
p
->
thªadli°
==
NULL
)

27 
	`InôülizePro˚ssThªadli°
(
p
);

29 i‡(
p
->
thªadli°pos
=ı->
thªadli°max
)

32 
p
->
thªadli°
=
	`ªÆloc
’->thªadli°, (
ThªadD©a
)*p->
thªadli°max
*2);

33 i‡(
p
->
thªadli°
==
NULL
)

35 
	`¥ötf
("REALLOC FAILED!\n");

36 
	`exô
(2);

38 
p
->
thªadli°max
=p->threadlistmax*2;

42 
p
->
thªadli°
[p->
thªadli°pos
]=*
thªadd©a
;

43 
p
->
thªadli°pos
++;

44 
	}
}

46 
	$RemoveThªadFromPro˚ss
(
PPro˚ssD©a
 
p
, 
tid
)

48 
i
;

49 
i
=0; i<
p
->
thªadli°pos
; i++)

50 i‡(
p
->
thªadli°
[
i
].
tid
==tid)

53 
j
;

54 
j
=
i
; j<
p
->
thªadli°pos
-1; j++)

55 
p
->
thªadli°
[
j
]=p->threadlist[j+1];

57 
p
->
thªadli°pos
--;

63 
	}
}

65 
PThªadD©a
 
	$GëThªadD©a
(
PPro˚ssD©a
 
p
, 
tid
)

67 
i
;

68 
i
=0; i<
p
->
thªadli°pos
; i++)

69 i‡(
p
->
thªadli°
[
i
].
tid
==tid)

70  &
p
->
thªadli°
[
i
];

72  
NULL
;

73 
	}
}

	@threads.h

8 #i‚de‡
TREADS_H_


9 
	#TREADS_H_


	)

11 
	~<sys/queue.h
>

12 
	~"≠i.h
"

15 
InôülizePro˚ssThªadli°
(
PPro˚ssD©a
 
p
);

16 
AddThªadToPro˚ss
(
PPro˚ssD©a
 
p
, 
PThªadD©a
 
thªadd©a
);

17 
RemoveThªadFromPro˚ss
(
PPro˚ssD©a
 
p
, 
tid
);

18 
PThªadD©a
 
GëThªadD©a
(
PPro˚ssD©a
 
p
, 
tid
);

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_IAMCU
 6

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

195 
	#EM_SPU
 23

	)

197 
	#EM_V800
 36

	)

198 
	#EM_FR20
 37

	)

199 
	#EM_RH32
 38

	)

200 
	#EM_RCE
 39

	)

201 
	#EM_ARM
 40

	)

202 
	#EM_FAKE_ALPHA
 41

	)

203 
	#EM_SH
 42

	)

204 
	#EM_SPARCV9
 43

	)

205 
	#EM_TRICORE
 44

	)

206 
	#EM_ARC
 45

	)

207 
	#EM_H8_300
 46

	)

208 
	#EM_H8_300H
 47

	)

209 
	#EM_H8S
 48

	)

210 
	#EM_H8_500
 49

	)

211 
	#EM_IA_64
 50

	)

212 
	#EM_MIPS_X
 51

	)

213 
	#EM_COLDFIRE
 52

	)

214 
	#EM_68HC12
 53

	)

215 
	#EM_MMA
 54

	)

216 
	#EM_PCP
 55

	)

217 
	#EM_NCPU
 56

	)

218 
	#EM_NDR1
 57

	)

219 
	#EM_STARCORE
 58

	)

220 
	#EM_ME16
 59

	)

221 
	#EM_ST100
 60

	)

222 
	#EM_TINYJ
 61

	)

223 
	#EM_X86_64
 62

	)

224 
	#EM_PDSP
 63

	)

225 
	#EM_PDP10
 64

	)

226 
	#EM_PDP11
 65

	)

227 
	#EM_FX66
 66

	)

228 
	#EM_ST9PLUS
 67

	)

229 
	#EM_ST7
 68

	)

230 
	#EM_68HC16
 69

	)

231 
	#EM_68HC11
 70

	)

232 
	#EM_68HC08
 71

	)

233 
	#EM_68HC05
 72

	)

234 
	#EM_SVX
 73

	)

235 
	#EM_ST19
 74

	)

236 
	#EM_VAX
 75

	)

237 
	#EM_CRIS
 76

	)

238 
	#EM_JAVELIN
 77

	)

239 
	#EM_FIREPATH
 78

	)

240 
	#EM_ZSP
 79

	)

241 
	#EM_MMIX
 80

	)

242 
	#EM_HUANY
 81

	)

243 
	#EM_PRISM
 82

	)

244 
	#EM_AVR
 83

	)

245 
	#EM_FR30
 84

	)

246 
	#EM_D10V
 85

	)

247 
	#EM_D30V
 86

	)

248 
	#EM_V850
 87

	)

249 
	#EM_M32R
 88

	)

250 
	#EM_MN10300
 89

	)

251 
	#EM_MN10200
 90

	)

252 
	#EM_PJ
 91

	)

253 
	#EM_OPENRISC
 92

	)

254 
	#EM_ARC_COMPACT
 93

	)

255 
	#EM_XTENSA
 94

	)

256 
	#EM_VIDEOCORE
 95

	)

257 
	#EM_TMM_GPP
 96

	)

258 
	#EM_NS32K
 97

	)

259 
	#EM_TPC
 98

	)

260 
	#EM_SNP1K
 99

	)

261 
	#EM_ST200
 100

	)

262 
	#EM_IP2K
 101

	)

263 
	#EM_MAX
 102

	)

264 
	#EM_CR
 103

	)

265 
	#EM_F2MC16
 104

	)

266 
	#EM_MSP430
 105

	)

267 
	#EM_BLACKFIN
 106

	)

268 
	#EM_SE_C33
 107

	)

269 
	#EM_SEP
 108

	)

270 
	#EM_ARCA
 109

	)

271 
	#EM_UNICORE
 110

	)

272 
	#EM_EXCESS
 111

	)

273 
	#EM_DXP
 112

	)

274 
	#EM_ALTERA_NIOS2
 113

	)

275 
	#EM_CRX
 114

	)

276 
	#EM_XGATE
 115

	)

277 
	#EM_C166
 116

	)

278 
	#EM_M16C
 117

	)

279 
	#EM_DSPIC30F
 118

	)

280 
	#EM_CE
 119

	)

281 
	#EM_M32C
 120

	)

283 
	#EM_TSK3000
 131

	)

284 
	#EM_RS08
 132

	)

285 
	#EM_SHARC
 133

	)

286 
	#EM_ECOG2
 134

	)

287 
	#EM_SCORE7
 135

	)

288 
	#EM_DSP24
 136

	)

289 
	#EM_VIDEOCORE3
 137

	)

290 
	#EM_LATTICEMICO32
 138

	)

291 
	#EM_SE_C17
 139

	)

292 
	#EM_TI_C6000
 140

	)

293 
	#EM_TI_C2000
 141

	)

294 
	#EM_TI_C5500
 142

	)

295 
	#EM_TI_ARP32
 143

	)

296 
	#EM_TI_PRU
 144

	)

298 
	#EM_MMDSP_PLUS
 160

	)

299 
	#EM_CYPRESS_M8C
 161

	)

300 
	#EM_R32C
 162

	)

301 
	#EM_TRIMEDIA
 163

	)

302 
	#EM_QDSP6
 164

	)

303 
	#EM_8051
 165

	)

304 
	#EM_STXP7X
 166

	)

305 
	#EM_NDS32
 167

	)

306 
	#EM_ECOG1X
 168

	)

307 
	#EM_MAXQ30
 169

	)

308 
	#EM_XIMO16
 170

	)

309 
	#EM_MANIK
 171

	)

310 
	#EM_CRAYNV2
 172

	)

311 
	#EM_RX
 173

	)

312 
	#EM_METAG
 174

	)

313 
	#EM_MCST_ELBRUS
 175

	)

314 
	#EM_ECOG16
 176

	)

315 
	#EM_CR16
 177

	)

316 
	#EM_ETPU
 178

	)

317 
	#EM_SLE9X
 179

	)

318 
	#EM_L10M
 180

	)

319 
	#EM_K10M
 181

	)

321 
	#EM_AARCH64
 183

	)

323 
	#EM_AVR32
 185

	)

324 
	#EM_STM8
 186

	)

325 
	#EM_TILE64
 187

	)

326 
	#EM_TILEPRO
 188

	)

327 
	#EM_MICROBLAZE
 189

	)

328 
	#EM_CUDA
 190

	)

329 
	#EM_TILEGX
 191

	)

330 
	#EM_CLOUDSHIELD
 192

	)

331 
	#EM_COREA_1ST
 193

	)

332 
	#EM_COREA_2ND
 194

	)

333 
	#EM_ARC_COMPACT2
 195

	)

334 
	#EM_OPEN8
 196

	)

335 
	#EM_RL78
 197

	)

336 
	#EM_VIDEOCORE5
 198

	)

337 
	#EM_78KOR
 199

	)

338 
	#EM_56800EX
 200

	)

339 
	#EM_BA1
 201

	)

340 
	#EM_BA2
 202

	)

341 
	#EM_XCORE
 203

	)

342 
	#EM_MCHP_PIC
 204

	)

344 
	#EM_KM32
 210

	)

345 
	#EM_KMX32
 211

	)

346 
	#EM_EMX16
 212

	)

347 
	#EM_EMX8
 213

	)

348 
	#EM_KVARC
 214

	)

349 
	#EM_CDP
 215

	)

350 
	#EM_COGE
 216

	)

351 
	#EM_COOL
 217

	)

352 
	#EM_NORC
 218

	)

353 
	#EM_CSR_KALIMBA
 219

	)

354 
	#EM_Z80
 220

	)

355 
	#EM_VISIUM
 221

	)

356 
	#EM_FT32
 222

	)

357 
	#EM_MOXIE
 223

	)

358 
	#EM_AMDGPU
 224

	)

360 
	#EM_RISCV
 243

	)

362 
	#EM_BPF
 247

	)

364 
	#EM_NUM
 248

	)

368 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

374 
	#EM_ALPHA
 0x9026

	)

378 
	#EV_NONE
 0

	)

379 
	#EV_CURRENT
 1

	)

380 
	#EV_NUM
 2

	)

386 
Elf32_W‹d
 
	msh_«me
;

387 
Elf32_W‹d
 
	msh_ty≥
;

388 
Elf32_W‹d
 
	msh_Êags
;

389 
Elf32_Addr
 
	msh_addr
;

390 
Elf32_Off
 
	msh_off£t
;

391 
Elf32_W‹d
 
	msh_size
;

392 
Elf32_W‹d
 
	msh_lök
;

393 
Elf32_W‹d
 
	msh_öfo
;

394 
Elf32_W‹d
 
	msh_addølign
;

395 
Elf32_W‹d
 
	msh_ítsize
;

396 } 
	tElf32_Shdr
;

400 
Elf64_W‹d
 
	msh_«me
;

401 
Elf64_W‹d
 
	msh_ty≥
;

402 
Elf64_Xw‹d
 
	msh_Êags
;

403 
Elf64_Addr
 
	msh_addr
;

404 
Elf64_Off
 
	msh_off£t
;

405 
Elf64_Xw‹d
 
	msh_size
;

406 
Elf64_W‹d
 
	msh_lök
;

407 
Elf64_W‹d
 
	msh_öfo
;

408 
Elf64_Xw‹d
 
	msh_addølign
;

409 
Elf64_Xw‹d
 
	msh_ítsize
;

410 } 
	tElf64_Shdr
;

414 
	#SHN_UNDEF
 0

	)

415 
	#SHN_LORESERVE
 0xff00

	)

416 
	#SHN_LOPROC
 0xff00

	)

417 
	#SHN_BEFORE
 0xff00

	)

419 
	#SHN_AFTER
 0xff01

	)

421 
	#SHN_HIPROC
 0xff1‡

	)

422 
	#SHN_LOOS
 0xff20

	)

423 
	#SHN_HIOS
 0xff3‡

	)

424 
	#SHN_ABS
 0xfff1

	)

425 
	#SHN_COMMON
 0xfff2

	)

426 
	#SHN_XINDEX
 0xfff‡

	)

427 
	#SHN_HIRESERVE
 0xfff‡

	)

431 
	#SHT_NULL
 0

	)

432 
	#SHT_PROGBITS
 1

	)

433 
	#SHT_SYMTAB
 2

	)

434 
	#SHT_STRTAB
 3

	)

435 
	#SHT_RELA
 4

	)

436 
	#SHT_HASH
 5

	)

437 
	#SHT_DYNAMIC
 6

	)

438 
	#SHT_NOTE
 7

	)

439 
	#SHT_NOBITS
 8

	)

440 
	#SHT_REL
 9

	)

441 
	#SHT_SHLIB
 10

	)

442 
	#SHT_DYNSYM
 11

	)

443 
	#SHT_INIT_ARRAY
 14

	)

444 
	#SHT_FINI_ARRAY
 15

	)

445 
	#SHT_PREINIT_ARRAY
 16

	)

446 
	#SHT_GROUP
 17

	)

447 
	#SHT_SYMTAB_SHNDX
 18

	)

448 
	#SHT_NUM
 19

	)

449 
	#SHT_LOOS
 0x60000000

	)

450 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

451 
	#SHT_GNU_HASH
 0x6ffffff6

	)

452 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

453 
	#SHT_CHECKSUM
 0x6ffffff8

	)

454 
	#SHT_LOSUNW
 0x6fffffÁ

	)

455 
	#SHT_SUNW_move
 0x6fffffÁ

	)

456 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

457 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

458 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

459 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

460 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

461 
	#SHT_HISUNW
 0x6ffffff‡

	)

462 
	#SHT_HIOS
 0x6ffffff‡

	)

463 
	#SHT_LOPROC
 0x70000000

	)

464 
	#SHT_HIPROC
 0x7ffffff‡

	)

465 
	#SHT_LOUSER
 0x80000000

	)

466 
	#SHT_HIUSER
 0x8ffffff‡

	)

470 
	#SHF_WRITE
 (1 << 0Ë

	)

471 
	#SHF_ALLOC
 (1 << 1Ë

	)

472 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

473 
	#SHF_MERGE
 (1 << 4Ë

	)

474 
	#SHF_STRINGS
 (1 << 5Ë

	)

475 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

476 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

477 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

479 
	#SHF_GROUP
 (1 << 9Ë

	)

480 
	#SHF_TLS
 (1 << 10Ë

	)

481 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

482 
	#SHF_MASKOS
 0x0ff00000

	)

483 
	#SHF_MASKPROC
 0xf0000000

	)

484 
	#SHF_ORDERED
 (1 << 30Ë

	)

486 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

493 
Elf32_W‹d
 
	mch_ty≥
;

494 
Elf32_W‹d
 
	mch_size
;

495 
Elf32_W‹d
 
	mch_addølign
;

496 } 
	tElf32_Chdr
;

500 
Elf64_W‹d
 
	mch_ty≥
;

501 
Elf64_W‹d
 
	mch_ª£rved
;

502 
Elf64_Xw‹d
 
	mch_size
;

503 
Elf64_Xw‹d
 
	mch_addølign
;

504 } 
	tElf64_Chdr
;

507 
	#ELFCOMPRESS_ZLIB
 1

	)

508 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

509 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

510 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

511 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

514 
	#GRP_COMDAT
 0x1

	)

520 
Elf32_W‹d
 
	m°_«me
;

521 
Elf32_Addr
 
	m°_vÆue
;

522 
Elf32_W‹d
 
	m°_size
;

523 
	m°_öfo
;

524 
	m°_Ÿhî
;

525 
Elf32_Se˘i⁄
 
	m°_shndx
;

526 } 
	tElf32_Sym
;

530 
Elf64_W‹d
 
	m°_«me
;

531 
	m°_öfo
;

532 
	m°_Ÿhî
;

533 
Elf64_Se˘i⁄
 
	m°_shndx
;

534 
Elf64_Addr
 
	m°_vÆue
;

535 
Elf64_Xw‹d
 
	m°_size
;

536 } 
	tElf64_Sym
;

543 
Elf32_HÆf
 
	msi_boundto
;

544 
Elf32_HÆf
 
	msi_Êags
;

545 } 
	tElf32_Symöfo
;

549 
Elf64_HÆf
 
	msi_boundto
;

550 
Elf64_HÆf
 
	msi_Êags
;

551 } 
	tElf64_Symöfo
;

554 
	#SYMINFO_BT_SELF
 0xfff‡

	)

555 
	#SYMINFO_BT_PARENT
 0xff„

	)

556 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

559 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

560 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

561 
	#SYMINFO_FLG_COPY
 0x0004

	)

562 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

565 
	#SYMINFO_NONE
 0

	)

566 
	#SYMINFO_CURRENT
 1

	)

567 
	#SYMINFO_NUM
 2

	)

572 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

573 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

574 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

577 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

578 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

579 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

583 
	#STB_LOCAL
 0

	)

584 
	#STB_GLOBAL
 1

	)

585 
	#STB_WEAK
 2

	)

586 
	#STB_NUM
 3

	)

587 
	#STB_LOOS
 10

	)

588 
	#STB_GNU_UNIQUE
 10

	)

589 
	#STB_HIOS
 12

	)

590 
	#STB_LOPROC
 13

	)

591 
	#STB_HIPROC
 15

	)

595 
	#STT_NOTYPE
 0

	)

596 
	#STT_OBJECT
 1

	)

597 
	#STT_FUNC
 2

	)

598 
	#STT_SECTION
 3

	)

599 
	#STT_FILE
 4

	)

600 
	#STT_COMMON
 5

	)

601 
	#STT_TLS
 6

	)

602 
	#STT_NUM
 7

	)

603 
	#STT_LOOS
 10

	)

604 
	#STT_GNU_IFUNC
 10

	)

605 
	#STT_HIOS
 12

	)

606 
	#STT_LOPROC
 13

	)

607 
	#STT_HIPROC
 15

	)

614 
	#STN_UNDEF
 0

	)

619 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

622 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

625 
	#STV_DEFAULT
 0

	)

626 
	#STV_INTERNAL
 1

	)

627 
	#STV_HIDDEN
 2

	)

628 
	#STV_PROTECTED
 3

	)

635 
Elf32_Addr
 
	mr_off£t
;

636 
Elf32_W‹d
 
	mr_öfo
;

637 } 
	tElf32_Rñ
;

646 
Elf64_Addr
 
	mr_off£t
;

647 
Elf64_Xw‹d
 
	mr_öfo
;

648 } 
	tElf64_Rñ
;

654 
Elf32_Addr
 
	mr_off£t
;

655 
Elf32_W‹d
 
	mr_öfo
;

656 
Elf32_Sw‹d
 
	mr_addíd
;

657 } 
	tElf32_Rña
;

661 
Elf64_Addr
 
	mr_off£t
;

662 
Elf64_Xw‹d
 
	mr_öfo
;

663 
Elf64_Sxw‹d
 
	mr_addíd
;

664 } 
	tElf64_Rña
;

668 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

669 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

670 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

672 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

673 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

674 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

680 
Elf32_W‹d
 
	mp_ty≥
;

681 
Elf32_Off
 
	mp_off£t
;

682 
Elf32_Addr
 
	mp_vaddr
;

683 
Elf32_Addr
 
	mp_∑ddr
;

684 
Elf32_W‹d
 
	mp_fûesz
;

685 
Elf32_W‹d
 
	mp_memsz
;

686 
Elf32_W‹d
 
	mp_Êags
;

687 
Elf32_W‹d
 
	mp_Æign
;

688 } 
	tElf32_Phdr
;

692 
Elf64_W‹d
 
	mp_ty≥
;

693 
Elf64_W‹d
 
	mp_Êags
;

694 
Elf64_Off
 
	mp_off£t
;

695 
Elf64_Addr
 
	mp_vaddr
;

696 
Elf64_Addr
 
	mp_∑ddr
;

697 
Elf64_Xw‹d
 
	mp_fûesz
;

698 
Elf64_Xw‹d
 
	mp_memsz
;

699 
Elf64_Xw‹d
 
	mp_Æign
;

700 } 
	tElf64_Phdr
;

706 
	#PN_XNUM
 0xffff

	)

710 
	#PT_NULL
 0

	)

711 
	#PT_LOAD
 1

	)

712 
	#PT_DYNAMIC
 2

	)

713 
	#PT_INTERP
 3

	)

714 
	#PT_NOTE
 4

	)

715 
	#PT_SHLIB
 5

	)

716 
	#PT_PHDR
 6

	)

717 
	#PT_TLS
 7

	)

718 
	#PT_NUM
 8

	)

719 
	#PT_LOOS
 0x60000000

	)

720 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

721 
	#PT_GNU_STACK
 0x6474e551

	)

722 
	#PT_GNU_RELRO
 0x6474e552

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_FPREGSET
 2

	)

743 
	#NT_PRPSINFO
 3

	)

744 
	#NT_PRXREG
 4

	)

745 
	#NT_TASKSTRUCT
 4

	)

746 
	#NT_PLATFORM
 5

	)

747 
	#NT_AUXV
 6

	)

748 
	#NT_GWINDOWS
 7

	)

749 
	#NT_ASRS
 8

	)

750 
	#NT_PSTATUS
 10

	)

751 
	#NT_PSINFO
 13

	)

752 
	#NT_PRCRED
 14

	)

753 
	#NT_UTSNAME
 15

	)

754 
	#NT_LWPSTATUS
 16

	)

755 
	#NT_LWPSINFO
 17

	)

756 
	#NT_PRFPXREG
 20

	)

757 
	#NT_SIGINFO
 0x53494749

	)

759 
	#NT_FILE
 0x46494c45

	)

761 
	#NT_PRXFPREG
 0x46e62b7‡

	)

762 
	#NT_PPC_VMX
 0x100

	)

763 
	#NT_PPC_SPE
 0x101

	)

764 
	#NT_PPC_VSX
 0x102

	)

765 
	#NT_PPC_TAR
 0x103

	)

766 
	#NT_PPC_PPR
 0x104

	)

767 
	#NT_PPC_DSCR
 0x105

	)

768 
	#NT_PPC_EBB
 0x106

	)

769 
	#NT_PPC_PMU
 0x107

	)

770 
	#NT_PPC_TM_CGPR
 0x108

	)

771 
	#NT_PPC_TM_CFPR
 0x109

	)

772 
	#NT_PPC_TM_CVMX
 0x10®

	)

773 
	#NT_PPC_TM_CVSX
 0x10b

	)

774 
	#NT_PPC_TM_SPR
 0x10¯

	)

775 
	#NT_PPC_TM_CTAR
 0x10d

	)

777 
	#NT_PPC_TM_CPPR
 0x10ê

	)

779 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

781 
	#NT_386_TLS
 0x200

	)

782 
	#NT_386_IOPERM
 0x201

	)

783 
	#NT_X86_XSTATE
 0x202

	)

784 
	#NT_S390_HIGH_GPRS
 0x300

	)

785 
	#NT_S390_TIMER
 0x301

	)

786 
	#NT_S390_TODCMP
 0x302

	)

787 
	#NT_S390_TODPREG
 0x303

	)

788 
	#NT_S390_CTRS
 0x304

	)

789 
	#NT_S390_PREFIX
 0x305

	)

790 
	#NT_S390_LAST_BREAK
 0x306

	)

791 
	#NT_S390_SYSTEM_CALL
 0x307

	)

792 
	#NT_S390_TDB
 0x308

	)

793 
	#NT_ARM_VFP
 0x400

	)

794 
	#NT_ARM_TLS
 0x401

	)

795 
	#NT_ARM_HW_BREAK
 0x402

	)

796 
	#NT_ARM_HW_WATCH
 0x403

	)

797 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

798 
	#NT_ARM_SVE
 0x405

	)

803 
	#NT_VERSION
 1

	)

810 
Elf32_Sw‹d
 
	md_èg
;

813 
Elf32_W‹d
 
	md_vÆ
;

814 
Elf32_Addr
 
	md_±r
;

815 } 
	md_un
;

816 } 
	tElf32_Dyn
;

820 
Elf64_Sxw‹d
 
	md_èg
;

823 
Elf64_Xw‹d
 
	md_vÆ
;

824 
Elf64_Addr
 
	md_±r
;

825 } 
	md_un
;

826 } 
	tElf64_Dyn
;

830 
	#DT_NULL
 0

	)

831 
	#DT_NEEDED
 1

	)

832 
	#DT_PLTRELSZ
 2

	)

833 
	#DT_PLTGOT
 3

	)

834 
	#DT_HASH
 4

	)

835 
	#DT_STRTAB
 5

	)

836 
	#DT_SYMTAB
 6

	)

837 
	#DT_RELA
 7

	)

838 
	#DT_RELASZ
 8

	)

839 
	#DT_RELAENT
 9

	)

840 
	#DT_STRSZ
 10

	)

841 
	#DT_SYMENT
 11

	)

842 
	#DT_INIT
 12

	)

843 
	#DT_FINI
 13

	)

844 
	#DT_SONAME
 14

	)

845 
	#DT_RPATH
 15

	)

846 
	#DT_SYMBOLIC
 16

	)

847 
	#DT_REL
 17

	)

848 
	#DT_RELSZ
 18

	)

849 
	#DT_RELENT
 19

	)

850 
	#DT_PLTREL
 20

	)

851 
	#DT_DEBUG
 21

	)

852 
	#DT_TEXTREL
 22

	)

853 
	#DT_JMPREL
 23

	)

854 
	#DT_BIND_NOW
 24

	)

855 
	#DT_INIT_ARRAY
 25

	)

856 
	#DT_FINI_ARRAY
 26

	)

857 
	#DT_INIT_ARRAYSZ
 27

	)

858 
	#DT_FINI_ARRAYSZ
 28

	)

859 
	#DT_RUNPATH
 29

	)

860 
	#DT_FLAGS
 30

	)

861 
	#DT_ENCODING
 32

	)

862 
	#DT_PREINIT_ARRAY
 32

	)

863 
	#DT_PREINIT_ARRAYSZ
 33

	)

864 
	#DT_NUM
 34

	)

865 
	#DT_LOOS
 0x6000000d

	)

866 
	#DT_HIOS
 0x6ffff000

	)

867 
	#DT_LOPROC
 0x70000000

	)

868 
	#DT_HIPROC
 0x7ffffff‡

	)

869 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

874 
	#DT_VALRNGLO
 0x6ffffd00

	)

875 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

876 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

877 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

878 
	#DT_CHECKSUM
 0x6ffffdf8

	)

879 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

880 
	#DT_MOVEENT
 0x6ffffdÁ

	)

881 
	#DT_MOVESZ
 0x6ffffdfb

	)

882 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

883 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

885 
	#DT_SYMINSZ
 0x6ffffd„

	)

886 
	#DT_SYMINENT
 0x6ffffdf‡

	)

887 
	#DT_VALRNGHI
 0x6ffffdff

	)

888 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

889 
	#DT_VALNUM
 12

	)

896 
	#DT_ADDRRNGLO
 0x6fff„00

	)

897 
	#DT_GNU_HASH
 0x6fff„f5

	)

898 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

899 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

900 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

901 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

902 
	#DT_CONFIG
 0x6fff„Á

	)

903 
	#DT_DEPAUDIT
 0x6fff„fb

	)

904 
	#DT_AUDIT
 0x6fff„f¯

	)

905 
	#DT_PLTPAD
 0x6fff„fd

	)

906 
	#DT_MOVETAB
 0x6fff„„

	)

907 
	#DT_SYMINFO
 0x6fff„f‡

	)

908 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

909 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

910 
	#DT_ADDRNUM
 11

	)

914 
	#DT_VERSYM
 0x6ffffff0

	)

916 
	#DT_RELACOUNT
 0x6ffffff9

	)

917 
	#DT_RELCOUNT
 0x6fffffÁ

	)

920 
	#DT_FLAGS_1
 0x6ffffffb

	)

921 
	#DT_VERDEF
 0x6ffffff¯

	)

923 
	#DT_VERDEFNUM
 0x6ffffffd

	)

924 
	#DT_VERNEED
 0x6fffff„

	)

926 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

927 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

928 
	#DT_VERSIONTAGNUM
 16

	)

932 
	#DT_AUXILIARY
 0x7ffffffd

	)

933 
	#DT_FILTER
 0x7ffffff‡

	)

934 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

935 
	#DT_EXTRANUM
 3

	)

938 
	#DF_ORIGIN
 0x00000001

	)

939 
	#DF_SYMBOLIC
 0x00000002

	)

940 
	#DF_TEXTREL
 0x00000004

	)

941 
	#DF_BIND_NOW
 0x00000008

	)

942 
	#DF_STATIC_TLS
 0x00000010

	)

946 
	#DF_1_NOW
 0x00000001

	)

947 
	#DF_1_GLOBAL
 0x00000002

	)

948 
	#DF_1_GROUP
 0x00000004

	)

949 
	#DF_1_NODELETE
 0x00000008

	)

950 
	#DF_1_LOADFLTR
 0x00000010

	)

951 
	#DF_1_INITFIRST
 0x00000020

	)

952 
	#DF_1_NOOPEN
 0x00000040

	)

953 
	#DF_1_ORIGIN
 0x00000080

	)

954 
	#DF_1_DIRECT
 0x00000100

	)

955 
	#DF_1_TRANS
 0x00000200

	)

956 
	#DF_1_INTERPOSE
 0x00000400

	)

957 
	#DF_1_NODEFLIB
 0x00000800

	)

958 
	#DF_1_NODUMP
 0x00001000

	)

959 
	#DF_1_CONFALT
 0x00002000

	)

960 
	#DF_1_ENDFILTEE
 0x00004000

	)

961 
	#DF_1_DISPRELDNE
 0x00008000

	)

962 
	#DF_1_DISPRELPND
 0x00010000

	)

963 
	#DF_1_NODIRECT
 0x00020000

	)

964 
	#DF_1_IGNMULDEF
 0x00040000

	)

965 
	#DF_1_NOKSYMS
 0x00080000

	)

966 
	#DF_1_NOHDR
 0x00100000

	)

967 
	#DF_1_EDITED
 0x00200000

	)

968 
	#DF_1_NORELOC
 0x00400000

	)

969 
	#DF_1_SYMINTPOSE
 0x00800000

	)

970 
	#DF_1_GLOBAUDIT
 0x01000000

	)

971 
	#DF_1_SINGLETON
 0x02000000

	)

972 
	#DF_1_STUB
 0x04000000

	)

973 
	#DF_1_PIE
 0x08000000

	)

976 
	#DTF_1_PARINIT
 0x00000001

	)

977 
	#DTF_1_CONFEXP
 0x00000002

	)

980 
	#DF_P1_LAZYLOAD
 0x00000001

	)

981 
	#DF_P1_GROUPPERM
 0x00000002

	)

988 
Elf32_HÆf
 
	mvd_vîsi⁄
;

989 
Elf32_HÆf
 
	mvd_Êags
;

990 
Elf32_HÆf
 
	mvd_ndx
;

991 
Elf32_HÆf
 
	mvd_˙t
;

992 
Elf32_W‹d
 
	mvd_hash
;

993 
Elf32_W‹d
 
	mvd_aux
;

994 
Elf32_W‹d
 
	mvd_√xt
;

996 } 
	tElf32_Vîdef
;

1000 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1001 
Elf64_HÆf
 
	mvd_Êags
;

1002 
Elf64_HÆf
 
	mvd_ndx
;

1003 
Elf64_HÆf
 
	mvd_˙t
;

1004 
Elf64_W‹d
 
	mvd_hash
;

1005 
Elf64_W‹d
 
	mvd_aux
;

1006 
Elf64_W‹d
 
	mvd_√xt
;

1008 } 
	tElf64_Vîdef
;

1012 
	#VER_DEF_NONE
 0

	)

1013 
	#VER_DEF_CURRENT
 1

	)

1014 
	#VER_DEF_NUM
 2

	)

1017 
	#VER_FLG_BASE
 0x1

	)

1018 
	#VER_FLG_WEAK
 0x2

	)

1021 
	#VER_NDX_LOCAL
 0

	)

1022 
	#VER_NDX_GLOBAL
 1

	)

1023 
	#VER_NDX_LORESERVE
 0xff00

	)

1024 
	#VER_NDX_ELIMINATE
 0xff01

	)

1030 
Elf32_W‹d
 
	mvda_«me
;

1031 
Elf32_W‹d
 
	mvda_√xt
;

1033 } 
	tElf32_Vîdaux
;

1037 
Elf64_W‹d
 
	mvda_«me
;

1038 
Elf64_W‹d
 
	mvda_√xt
;

1040 } 
	tElf64_Vîdaux
;

1047 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1048 
Elf32_HÆf
 
	mvn_˙t
;

1049 
Elf32_W‹d
 
	mvn_fûe
;

1051 
Elf32_W‹d
 
	mvn_aux
;

1052 
Elf32_W‹d
 
	mvn_√xt
;

1054 } 
	tElf32_Vî√ed
;

1058 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1059 
Elf64_HÆf
 
	mvn_˙t
;

1060 
Elf64_W‹d
 
	mvn_fûe
;

1062 
Elf64_W‹d
 
	mvn_aux
;

1063 
Elf64_W‹d
 
	mvn_√xt
;

1065 } 
	tElf64_Vî√ed
;

1069 
	#VER_NEED_NONE
 0

	)

1070 
	#VER_NEED_CURRENT
 1

	)

1071 
	#VER_NEED_NUM
 2

	)

1077 
Elf32_W‹d
 
	mv«_hash
;

1078 
Elf32_HÆf
 
	mv«_Êags
;

1079 
Elf32_HÆf
 
	mv«_Ÿhî
;

1080 
Elf32_W‹d
 
	mv«_«me
;

1081 
Elf32_W‹d
 
	mv«_√xt
;

1083 } 
	tElf32_Vî«ux
;

1087 
Elf64_W‹d
 
	mv«_hash
;

1088 
Elf64_HÆf
 
	mv«_Êags
;

1089 
Elf64_HÆf
 
	mv«_Ÿhî
;

1090 
Elf64_W‹d
 
	mv«_«me
;

1091 
Elf64_W‹d
 
	mv«_√xt
;

1093 } 
	tElf64_Vî«ux
;

1097 
	#VER_FLG_WEAK
 0x2

	)

1111 
uöt32_t
 
	ma_ty≥
;

1114 
uöt32_t
 
	ma_vÆ
;

1118 } 
	ma_un
;

1119 } 
	tElf32_auxv_t
;

1123 
uöt64_t
 
	ma_ty≥
;

1126 
uöt64_t
 
	ma_vÆ
;

1130 } 
	ma_un
;

1131 } 
	tElf64_auxv_t
;

1133 
	~<bôs/auxv.h
>

1139 
Elf32_W‹d
 
	mn_«mesz
;

1140 
Elf32_W‹d
 
	mn_descsz
;

1141 
Elf32_W‹d
 
	mn_ty≥
;

1142 } 
	tElf32_Nhdr
;

1146 
Elf64_W‹d
 
	mn_«mesz
;

1147 
Elf64_W‹d
 
	mn_descsz
;

1148 
Elf64_W‹d
 
	mn_ty≥
;

1149 } 
	tElf64_Nhdr
;

1154 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1157 
	#ELF_NOTE_GNU
 "GNU"

	)

1163 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1174 
	#NT_GNU_ABI_TAG
 1

	)

1175 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1179 
	#ELF_NOTE_OS_LINUX
 0

	)

1180 
	#ELF_NOTE_OS_GNU
 1

	)

1181 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1182 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1190 
	#NT_GNU_HWCAP
 2

	)

1194 
	#NT_GNU_BUILD_ID
 3

	)

1197 
	#NT_GNU_GOLD_VERSION
 4

	)

1200 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1203 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1208 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1210 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1213 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1215 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1217 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1219 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1223 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0000000

	)

1226 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0000001

	)

1228 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1230 
	#GNU_PROPERTY_X86_ISA_1_486
 (1U << 0)

	)

1231 
	#GNU_PROPERTY_X86_ISA_1_586
 (1U << 1)

	)

1232 
	#GNU_PROPERTY_X86_ISA_1_686
 (1U << 2)

	)

1233 
	#GNU_PROPERTY_X86_ISA_1_SSE
 (1U << 3)

	)

1234 
	#GNU_PROPERTY_X86_ISA_1_SSE2
 (1U << 4)

	)

1235 
	#GNU_PROPERTY_X86_ISA_1_SSE3
 (1U << 5)

	)

1236 
	#GNU_PROPERTY_X86_ISA_1_SSSE3
 (1U << 6)

	)

1237 
	#GNU_PROPERTY_X86_ISA_1_SSE4_1
 (1U << 7)

	)

1238 
	#GNU_PROPERTY_X86_ISA_1_SSE4_2
 (1U << 8)

	)

1239 
	#GNU_PROPERTY_X86_ISA_1_AVX
 (1U << 9)

	)

1240 
	#GNU_PROPERTY_X86_ISA_1_AVX2
 (1U << 10)

	)

1241 
	#GNU_PROPERTY_X86_ISA_1_AVX512F
 (1U << 11)

	)

1242 
	#GNU_PROPERTY_X86_ISA_1_AVX512CD
 (1U << 12)

	)

1243 
	#GNU_PROPERTY_X86_ISA_1_AVX512ER
 (1U << 13)

	)

1244 
	#GNU_PROPERTY_X86_ISA_1_AVX512PF
 (1U << 14)

	)

1245 
	#GNU_PROPERTY_X86_ISA_1_AVX512VL
 (1U << 15)

	)

1246 
	#GNU_PROPERTY_X86_ISA_1_AVX512DQ
 (1U << 16)

	)

1247 
	#GNU_PROPERTY_X86_ISA_1_AVX512BW
 (1U << 17)

	)

1251 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1254 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1259 
Elf32_Xw‹d
 
	mm_vÆue
;

1260 
Elf32_W‹d
 
	mm_öfo
;

1261 
Elf32_W‹d
 
	mm_poff£t
;

1262 
Elf32_HÆf
 
	mm_ª≥©
;

1263 
Elf32_HÆf
 
	mm_°ride
;

1264 } 
	tElf32_Move
;

1268 
Elf64_Xw‹d
 
	mm_vÆue
;

1269 
Elf64_Xw‹d
 
	mm_öfo
;

1270 
Elf64_Xw‹d
 
	mm_poff£t
;

1271 
Elf64_HÆf
 
	mm_ª≥©
;

1272 
Elf64_HÆf
 
	mm_°ride
;

1273 } 
	tElf64_Move
;

1276 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1277 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1278 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1280 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1281 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1282 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1288 
	#EF_CPU32
 0x00810000

	)

1292 
	#R_68K_NONE
 0

	)

1293 
	#R_68K_32
 1

	)

1294 
	#R_68K_16
 2

	)

1295 
	#R_68K_8
 3

	)

1296 
	#R_68K_PC32
 4

	)

1297 
	#R_68K_PC16
 5

	)

1298 
	#R_68K_PC8
 6

	)

1299 
	#R_68K_GOT32
 7

	)

1300 
	#R_68K_GOT16
 8

	)

1301 
	#R_68K_GOT8
 9

	)

1302 
	#R_68K_GOT32O
 10

	)

1303 
	#R_68K_GOT16O
 11

	)

1304 
	#R_68K_GOT8O
 12

	)

1305 
	#R_68K_PLT32
 13

	)

1306 
	#R_68K_PLT16
 14

	)

1307 
	#R_68K_PLT8
 15

	)

1308 
	#R_68K_PLT32O
 16

	)

1309 
	#R_68K_PLT16O
 17

	)

1310 
	#R_68K_PLT8O
 18

	)

1311 
	#R_68K_COPY
 19

	)

1312 
	#R_68K_GLOB_DAT
 20

	)

1313 
	#R_68K_JMP_SLOT
 21

	)

1314 
	#R_68K_RELATIVE
 22

	)

1315 
	#R_68K_TLS_GD32
 25

	)

1316 
	#R_68K_TLS_GD16
 26

	)

1317 
	#R_68K_TLS_GD8
 27

	)

1318 
	#R_68K_TLS_LDM32
 28

	)

1319 
	#R_68K_TLS_LDM16
 29

	)

1320 
	#R_68K_TLS_LDM8
 30

	)

1321 
	#R_68K_TLS_LDO32
 31

	)

1322 
	#R_68K_TLS_LDO16
 32

	)

1323 
	#R_68K_TLS_LDO8
 33

	)

1324 
	#R_68K_TLS_IE32
 34

	)

1325 
	#R_68K_TLS_IE16
 35

	)

1326 
	#R_68K_TLS_IE8
 36

	)

1327 
	#R_68K_TLS_LE32
 37

	)

1329 
	#R_68K_TLS_LE16
 38

	)

1331 
	#R_68K_TLS_LE8
 39

	)

1333 
	#R_68K_TLS_DTPMOD32
 40

	)

1334 
	#R_68K_TLS_DTPREL32
 41

	)

1335 
	#R_68K_TLS_TPREL32
 42

	)

1337 
	#R_68K_NUM
 43

	)

1343 
	#R_386_NONE
 0

	)

1344 
	#R_386_32
 1

	)

1345 
	#R_386_PC32
 2

	)

1346 
	#R_386_GOT32
 3

	)

1347 
	#R_386_PLT32
 4

	)

1348 
	#R_386_COPY
 5

	)

1349 
	#R_386_GLOB_DAT
 6

	)

1350 
	#R_386_JMP_SLOT
 7

	)

1351 
	#R_386_RELATIVE
 8

	)

1352 
	#R_386_GOTOFF
 9

	)

1353 
	#R_386_GOTPC
 10

	)

1354 
	#R_386_32PLT
 11

	)

1355 
	#R_386_TLS_TPOFF
 14

	)

1356 
	#R_386_TLS_IE
 15

	)

1358 
	#R_386_TLS_GOTIE
 16

	)

1360 
	#R_386_TLS_LE
 17

	)

1362 
	#R_386_TLS_GD
 18

	)

1364 
	#R_386_TLS_LDM
 19

	)

1367 
	#R_386_16
 20

	)

1368 
	#R_386_PC16
 21

	)

1369 
	#R_386_8
 22

	)

1370 
	#R_386_PC8
 23

	)

1371 
	#R_386_TLS_GD_32
 24

	)

1373 
	#R_386_TLS_GD_PUSH
 25

	)

1374 
	#R_386_TLS_GD_CALL
 26

	)

1376 
	#R_386_TLS_GD_POP
 27

	)

1377 
	#R_386_TLS_LDM_32
 28

	)

1379 
	#R_386_TLS_LDM_PUSH
 29

	)

1380 
	#R_386_TLS_LDM_CALL
 30

	)

1382 
	#R_386_TLS_LDM_POP
 31

	)

1383 
	#R_386_TLS_LDO_32
 32

	)

1384 
	#R_386_TLS_IE_32
 33

	)

1386 
	#R_386_TLS_LE_32
 34

	)

1388 
	#R_386_TLS_DTPMOD32
 35

	)

1389 
	#R_386_TLS_DTPOFF32
 36

	)

1390 
	#R_386_TLS_TPOFF32
 37

	)

1391 
	#R_386_SIZE32
 38

	)

1392 
	#R_386_TLS_GOTDESC
 39

	)

1393 
	#R_386_TLS_DESC_CALL
 40

	)

1396 
	#R_386_TLS_DESC
 41

	)

1400 
	#R_386_IRELATIVE
 42

	)

1401 
	#R_386_GOT32X
 43

	)

1404 
	#R_386_NUM
 44

	)

1410 
	#STT_SPARC_REGISTER
 13

	)

1414 
	#EF_SPARCV9_MM
 3

	)

1415 
	#EF_SPARCV9_TSO
 0

	)

1416 
	#EF_SPARCV9_PSO
 1

	)

1417 
	#EF_SPARCV9_RMO
 2

	)

1418 
	#EF_SPARC_LEDATA
 0x800000

	)

1419 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1420 
	#EF_SPARC_32PLUS
 0x000100

	)

1421 
	#EF_SPARC_SUN_US1
 0x000200

	)

1422 
	#EF_SPARC_HAL_R1
 0x000400

	)

1423 
	#EF_SPARC_SUN_US3
 0x000800

	)

1427 
	#R_SPARC_NONE
 0

	)

1428 
	#R_SPARC_8
 1

	)

1429 
	#R_SPARC_16
 2

	)

1430 
	#R_SPARC_32
 3

	)

1431 
	#R_SPARC_DISP8
 4

	)

1432 
	#R_SPARC_DISP16
 5

	)

1433 
	#R_SPARC_DISP32
 6

	)

1434 
	#R_SPARC_WDISP30
 7

	)

1435 
	#R_SPARC_WDISP22
 8

	)

1436 
	#R_SPARC_HI22
 9

	)

1437 
	#R_SPARC_22
 10

	)

1438 
	#R_SPARC_13
 11

	)

1439 
	#R_SPARC_LO10
 12

	)

1440 
	#R_SPARC_GOT10
 13

	)

1441 
	#R_SPARC_GOT13
 14

	)

1442 
	#R_SPARC_GOT22
 15

	)

1443 
	#R_SPARC_PC10
 16

	)

1444 
	#R_SPARC_PC22
 17

	)

1445 
	#R_SPARC_WPLT30
 18

	)

1446 
	#R_SPARC_COPY
 19

	)

1447 
	#R_SPARC_GLOB_DAT
 20

	)

1448 
	#R_SPARC_JMP_SLOT
 21

	)

1449 
	#R_SPARC_RELATIVE
 22

	)

1450 
	#R_SPARC_UA32
 23

	)

1454 
	#R_SPARC_PLT32
 24

	)

1455 
	#R_SPARC_HIPLT22
 25

	)

1456 
	#R_SPARC_LOPLT10
 26

	)

1457 
	#R_SPARC_PCPLT32
 27

	)

1458 
	#R_SPARC_PCPLT22
 28

	)

1459 
	#R_SPARC_PCPLT10
 29

	)

1460 
	#R_SPARC_10
 30

	)

1461 
	#R_SPARC_11
 31

	)

1462 
	#R_SPARC_64
 32

	)

1463 
	#R_SPARC_OLO10
 33

	)

1464 
	#R_SPARC_HH22
 34

	)

1465 
	#R_SPARC_HM10
 35

	)

1466 
	#R_SPARC_LM22
 36

	)

1467 
	#R_SPARC_PC_HH22
 37

	)

1468 
	#R_SPARC_PC_HM10
 38

	)

1469 
	#R_SPARC_PC_LM22
 39

	)

1470 
	#R_SPARC_WDISP16
 40

	)

1471 
	#R_SPARC_WDISP19
 41

	)

1472 
	#R_SPARC_GLOB_JMP
 42

	)

1473 
	#R_SPARC_7
 43

	)

1474 
	#R_SPARC_5
 44

	)

1475 
	#R_SPARC_6
 45

	)

1476 
	#R_SPARC_DISP64
 46

	)

1477 
	#R_SPARC_PLT64
 47

	)

1478 
	#R_SPARC_HIX22
 48

	)

1479 
	#R_SPARC_LOX10
 49

	)

1480 
	#R_SPARC_H44
 50

	)

1481 
	#R_SPARC_M44
 51

	)

1482 
	#R_SPARC_L44
 52

	)

1483 
	#R_SPARC_REGISTER
 53

	)

1484 
	#R_SPARC_UA64
 54

	)

1485 
	#R_SPARC_UA16
 55

	)

1486 
	#R_SPARC_TLS_GD_HI22
 56

	)

1487 
	#R_SPARC_TLS_GD_LO10
 57

	)

1488 
	#R_SPARC_TLS_GD_ADD
 58

	)

1489 
	#R_SPARC_TLS_GD_CALL
 59

	)

1490 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1491 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1492 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1493 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1494 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1495 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1496 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1497 
	#R_SPARC_TLS_IE_HI22
 67

	)

1498 
	#R_SPARC_TLS_IE_LO10
 68

	)

1499 
	#R_SPARC_TLS_IE_LD
 69

	)

1500 
	#R_SPARC_TLS_IE_LDX
 70

	)

1501 
	#R_SPARC_TLS_IE_ADD
 71

	)

1502 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1503 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1504 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1505 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1506 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1507 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1508 
	#R_SPARC_TLS_TPOFF32
 78

	)

1509 
	#R_SPARC_TLS_TPOFF64
 79

	)

1510 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1511 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1512 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1513 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1514 
	#R_SPARC_GOTDATA_OP
 84

	)

1515 
	#R_SPARC_H34
 85

	)

1516 
	#R_SPARC_SIZE32
 86

	)

1517 
	#R_SPARC_SIZE64
 87

	)

1518 
	#R_SPARC_WDISP10
 88

	)

1519 
	#R_SPARC_JMP_IREL
 248

	)

1520 
	#R_SPARC_IRELATIVE
 249

	)

1521 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1522 
	#R_SPARC_GNU_VTENTRY
 251

	)

1523 
	#R_SPARC_REV32
 252

	)

1525 
	#R_SPARC_NUM
 253

	)

1529 
	#DT_SPARC_REGISTER
 0x70000001

	)

1530 
	#DT_SPARC_NUM
 2

	)

1536 
	#EF_MIPS_NOREORDER
 1

	)

1537 
	#EF_MIPS_PIC
 2

	)

1538 
	#EF_MIPS_CPIC
 4

	)

1539 
	#EF_MIPS_XGOT
 8

	)

1540 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1541 
	#EF_MIPS_ABI2
 32

	)

1542 
	#EF_MIPS_ABI_ON32
 64

	)

1543 
	#EF_MIPS_FP64
 512

	)

1544 
	#EF_MIPS_NAN2008
 1024

	)

1545 
	#EF_MIPS_ARCH
 0xf0000000

	)

1549 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1550 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1551 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1552 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1553 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1554 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1555 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1556 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1557 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1561 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1562 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1563 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1564 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1565 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1566 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1567 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1571 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1572 
	#SHN_MIPS_TEXT
 0xff01

	)

1573 
	#SHN_MIPS_DATA
 0xff02

	)

1574 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1575 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1579 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1580 
	#SHT_MIPS_MSYM
 0x70000001

	)

1581 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1582 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1583 
	#SHT_MIPS_UCODE
 0x70000004

	)

1584 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1585 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1586 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1587 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1588 
	#SHT_MIPS_RELD
 0x70000009

	)

1589 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1590 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1591 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1592 
	#SHT_MIPS_SHDR
 0x70000010

	)

1593 
	#SHT_MIPS_FDESC
 0x70000011

	)

1594 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1595 
	#SHT_MIPS_DENSE
 0x70000013

	)

1596 
	#SHT_MIPS_PDESC
 0x70000014

	)

1597 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1598 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1599 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1600 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1601 
	#SHT_MIPS_LINE
 0x70000019

	)

1602 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1603 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1604 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1605 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1606 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1607 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1608 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1609 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1610 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1611 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1612 
	#SHT_MIPS_XLATE
 0x70000024

	)

1613 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1614 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1615 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1616 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1617 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1621 
	#SHF_MIPS_GPREL
 0x10000000

	)

1622 
	#SHF_MIPS_MERGE
 0x20000000

	)

1623 
	#SHF_MIPS_ADDR
 0x40000000

	)

1624 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1625 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1626 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1627 
	#SHF_MIPS_NAMES
 0x02000000

	)

1628 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1634 
	#STO_MIPS_DEFAULT
 0x0

	)

1635 
	#STO_MIPS_INTERNAL
 0x1

	)

1636 
	#STO_MIPS_HIDDEN
 0x2

	)

1637 
	#STO_MIPS_PROTECTED
 0x3

	)

1638 
	#STO_MIPS_PLT
 0x8

	)

1639 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1642 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1650 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1651 
Elf32_W‹d
 
	mgt_unu£d
;

1652 } 
	mgt_hódî
;

1655 
Elf32_W‹d
 
	mgt_g_vÆue
;

1656 
Elf32_W‹d
 
	mgt_byãs
;

1657 } 
	mgt_íåy
;

1658 } 
	tElf32_g±ab
;

1664 
Elf32_W‹d
 
	mri_g¥mask
;

1665 
Elf32_W‹d
 
	mri_˝rmask
[4];

1666 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1667 } 
	tElf32_RegInfo
;

1673 
	mköd
;

1675 
	msize
;

1676 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1678 
Elf32_W‹d
 
	möfo
;

1679 } 
	tElf_O±i⁄s
;

1683 
	#ODK_NULL
 0

	)

1684 
	#ODK_REGINFO
 1

	)

1685 
	#ODK_EXCEPTIONS
 2

	)

1686 
	#ODK_PAD
 3

	)

1687 
	#ODK_HWPATCH
 4

	)

1688 
	#ODK_FILL
 5

	)

1689 
	#ODK_TAGS
 6

	)

1690 
	#ODK_HWAND
 7

	)

1691 
	#ODK_HWOR
 8

	)

1695 
	#OEX_FPU_MIN
 0x1‡

	)

1696 
	#OEX_FPU_MAX
 0x1f00

	)

1697 
	#OEX_PAGE0
 0x10000

	)

1698 
	#OEX_SMM
 0x20000

	)

1699 
	#OEX_FPDBUG
 0x40000

	)

1700 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1701 
	#OEX_DISMISS
 0x80000

	)

1703 
	#OEX_FPU_INVAL
 0x10

	)

1704 
	#OEX_FPU_DIV0
 0x08

	)

1705 
	#OEX_FPU_OFLO
 0x04

	)

1706 
	#OEX_FPU_UFLO
 0x02

	)

1707 
	#OEX_FPU_INEX
 0x01

	)

1711 
	#OHW_R4KEOP
 0x1

	)

1712 
	#OHW_R8KPFETCH
 0x2

	)

1713 
	#OHW_R5KEOP
 0x4

	)

1714 
	#OHW_R5KCVTL
 0x8

	)

1716 
	#OPAD_PREFIX
 0x1

	)

1717 
	#OPAD_POSTFIX
 0x2

	)

1718 
	#OPAD_SYMBOL
 0x4

	)

1724 
Elf32_W‹d
 
	mhwp_Êags1
;

1725 
Elf32_W‹d
 
	mhwp_Êags2
;

1726 } 
	tElf_O±i⁄s_Hw
;

1730 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1731 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1735 
	#R_MIPS_NONE
 0

	)

1736 
	#R_MIPS_16
 1

	)

1737 
	#R_MIPS_32
 2

	)

1738 
	#R_MIPS_REL32
 3

	)

1739 
	#R_MIPS_26
 4

	)

1740 
	#R_MIPS_HI16
 5

	)

1741 
	#R_MIPS_LO16
 6

	)

1742 
	#R_MIPS_GPREL16
 7

	)

1743 
	#R_MIPS_LITERAL
 8

	)

1744 
	#R_MIPS_GOT16
 9

	)

1745 
	#R_MIPS_PC16
 10

	)

1746 
	#R_MIPS_CALL16
 11

	)

1747 
	#R_MIPS_GPREL32
 12

	)

1749 
	#R_MIPS_SHIFT5
 16

	)

1750 
	#R_MIPS_SHIFT6
 17

	)

1751 
	#R_MIPS_64
 18

	)

1752 
	#R_MIPS_GOT_DISP
 19

	)

1753 
	#R_MIPS_GOT_PAGE
 20

	)

1754 
	#R_MIPS_GOT_OFST
 21

	)

1755 
	#R_MIPS_GOT_HI16
 22

	)

1756 
	#R_MIPS_GOT_LO16
 23

	)

1757 
	#R_MIPS_SUB
 24

	)

1758 
	#R_MIPS_INSERT_A
 25

	)

1759 
	#R_MIPS_INSERT_B
 26

	)

1760 
	#R_MIPS_DELETE
 27

	)

1761 
	#R_MIPS_HIGHER
 28

	)

1762 
	#R_MIPS_HIGHEST
 29

	)

1763 
	#R_MIPS_CALL_HI16
 30

	)

1764 
	#R_MIPS_CALL_LO16
 31

	)

1765 
	#R_MIPS_SCN_DISP
 32

	)

1766 
	#R_MIPS_REL16
 33

	)

1767 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1768 
	#R_MIPS_PJUMP
 35

	)

1769 
	#R_MIPS_RELGOT
 36

	)

1770 
	#R_MIPS_JALR
 37

	)

1771 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1772 
	#R_MIPS_TLS_DTPREL32
 39

	)

1773 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1774 
	#R_MIPS_TLS_DTPREL64
 41

	)

1775 
	#R_MIPS_TLS_GD
 42

	)

1776 
	#R_MIPS_TLS_LDM
 43

	)

1777 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1778 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1779 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1780 
	#R_MIPS_TLS_TPREL32
 47

	)

1781 
	#R_MIPS_TLS_TPREL64
 48

	)

1782 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1783 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1784 
	#R_MIPS_GLOB_DAT
 51

	)

1785 
	#R_MIPS_COPY
 126

	)

1786 
	#R_MIPS_JUMP_SLOT
 127

	)

1788 
	#R_MIPS_NUM
 128

	)

1792 
	#PT_MIPS_REGINFO
 0x70000000

	)

1793 
	#PT_MIPS_RTPROC
 0x70000001

	)

1794 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1795 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1799 
	#PF_MIPS_LOCAL
 0x10000000

	)

1803 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1804 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1805 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1806 
	#DT_MIPS_IVERSION
 0x70000004

	)

1807 
	#DT_MIPS_FLAGS
 0x70000005

	)

1808 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1809 
	#DT_MIPS_MSYM
 0x70000007

	)

1810 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1811 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1812 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1813 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1814 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1815 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1816 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1817 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1818 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1819 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1820 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1821 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1823 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1824 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1826 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1827 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1829 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1831 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1833 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1835 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1837 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1838 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1839 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1840 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1841 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1842 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1843 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1844 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1845 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1846 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1847 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1848 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1850 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1852 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1853 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1854 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1856 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1860 
	#DT_MIPS_RWPLT
 0x70000034

	)

1864 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1865 
	#DT_MIPS_NUM
 0x36

	)

1869 
	#RHF_NONE
 0

	)

1870 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1871 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1872 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1873 
	#RHF_NO_MOVE
 (1 << 3)

	)

1874 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1875 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1876 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1877 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1878 
	#RHF_PIXIE
 (1 << 8)

	)

1879 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1880 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1881 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1882 
	#RHF_CORD
 (1 << 12)

	)

1883 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1884 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1890 
Elf32_W‹d
 
	ml_«me
;

1891 
Elf32_W‹d
 
	ml_time_°amp
;

1892 
Elf32_W‹d
 
	ml_checksum
;

1893 
Elf32_W‹d
 
	ml_vîsi⁄
;

1894 
Elf32_W‹d
 
	ml_Êags
;

1895 } 
	tElf32_Lib
;

1899 
Elf64_W‹d
 
	ml_«me
;

1900 
Elf64_W‹d
 
	ml_time_°amp
;

1901 
Elf64_W‹d
 
	ml_checksum
;

1902 
Elf64_W‹d
 
	ml_vîsi⁄
;

1903 
Elf64_W‹d
 
	ml_Êags
;

1904 } 
	tElf64_Lib
;

1909 
	#LL_NONE
 0

	)

1910 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1911 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1912 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1913 
	#LL_EXPORTS
 (1 << 3)

	)

1914 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1915 
	#LL_DELTA
 (1 << 5)

	)

1919 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1924 
Elf32_HÆf
 
	mvîsi⁄
;

1926 
	miß_Àvñ
;

1928 
	miß_ªv
;

1930 
	mg¥_size
;

1932 
	m˝r1_size
;

1934 
	m˝r2_size
;

1936 
	mÂ_abi
;

1938 
Elf32_W‹d
 
	miß_ext
;

1940 
Elf32_W‹d
 
	ma£s
;

1942 
Elf32_W‹d
 
	mÊags1
;

1943 
Elf32_W‹d
 
	mÊags2
;

1944 } 
	tElf_MIPS_ABIFœgs_v0
;

1948 
	#MIPS_AFL_REG_NONE
 0x00

	)

1949 
	#MIPS_AFL_REG_32
 0x01

	)

1950 
	#MIPS_AFL_REG_64
 0x02

	)

1951 
	#MIPS_AFL_REG_128
 0x03

	)

1955 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1956 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1957 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1958 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1959 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1960 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1961 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1962 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1963 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1964 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1965 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1966 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1967 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1968 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1972 
	#MIPS_AFL_EXT_XLR
 1

	)

1973 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1974 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1975 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1976 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1977 
	#MIPS_AFL_EXT_5900
 6

	)

1978 
	#MIPS_AFL_EXT_4650
 7

	)

1979 
	#MIPS_AFL_EXT_4010
 8

	)

1980 
	#MIPS_AFL_EXT_4100
 9

	)

1981 
	#MIPS_AFL_EXT_3900
 10

	)

1982 
	#MIPS_AFL_EXT_10000
 11

	)

1983 
	#MIPS_AFL_EXT_SB1
 12

	)

1984 
	#MIPS_AFL_EXT_4111
 13

	)

1985 
	#MIPS_AFL_EXT_4120
 14

	)

1986 
	#MIPS_AFL_EXT_5400
 15

	)

1987 
	#MIPS_AFL_EXT_5500
 16

	)

1988 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1989 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1992 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1998 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2000 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2002 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2004 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2006 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2008 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2010 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2012 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2014 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2021 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2022 
	#EF_PARISC_EXT
 0x00020000

	)

2023 
	#EF_PARISC_LSB
 0x00040000

	)

2024 
	#EF_PARISC_WIDE
 0x00080000

	)

2025 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2027 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2028 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2032 
	#EFA_PARISC_1_0
 0x020b

	)

2033 
	#EFA_PARISC_1_1
 0x0210

	)

2034 
	#EFA_PARISC_2_0
 0x0214

	)

2038 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2040 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2044 
	#SHT_PARISC_EXT
 0x70000000

	)

2045 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2046 
	#SHT_PARISC_DOC
 0x70000002

	)

2050 
	#SHF_PARISC_SHORT
 0x20000000

	)

2051 
	#SHF_PARISC_HUGE
 0x40000000

	)

2052 
	#SHF_PARISC_SBP
 0x80000000

	)

2056 
	#STT_PARISC_MILLICODE
 13

	)

2058 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2059 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2063 
	#R_PARISC_NONE
 0

	)

2064 
	#R_PARISC_DIR32
 1

	)

2065 
	#R_PARISC_DIR21L
 2

	)

2066 
	#R_PARISC_DIR17R
 3

	)

2067 
	#R_PARISC_DIR17F
 4

	)

2068 
	#R_PARISC_DIR14R
 6

	)

2069 
	#R_PARISC_PCREL32
 9

	)

2070 
	#R_PARISC_PCREL21L
 10

	)

2071 
	#R_PARISC_PCREL17R
 11

	)

2072 
	#R_PARISC_PCREL17F
 12

	)

2073 
	#R_PARISC_PCREL14R
 14

	)

2074 
	#R_PARISC_DPREL21L
 18

	)

2075 
	#R_PARISC_DPREL14R
 22

	)

2076 
	#R_PARISC_GPREL21L
 26

	)

2077 
	#R_PARISC_GPREL14R
 30

	)

2078 
	#R_PARISC_LTOFF21L
 34

	)

2079 
	#R_PARISC_LTOFF14R
 38

	)

2080 
	#R_PARISC_SECREL32
 41

	)

2081 
	#R_PARISC_SEGBASE
 48

	)

2082 
	#R_PARISC_SEGREL32
 49

	)

2083 
	#R_PARISC_PLTOFF21L
 50

	)

2084 
	#R_PARISC_PLTOFF14R
 54

	)

2085 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2086 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2087 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2088 
	#R_PARISC_FPTR64
 64

	)

2089 
	#R_PARISC_PLABEL32
 65

	)

2090 
	#R_PARISC_PLABEL21L
 66

	)

2091 
	#R_PARISC_PLABEL14R
 70

	)

2092 
	#R_PARISC_PCREL64
 72

	)

2093 
	#R_PARISC_PCREL22F
 74

	)

2094 
	#R_PARISC_PCREL14WR
 75

	)

2095 
	#R_PARISC_PCREL14DR
 76

	)

2096 
	#R_PARISC_PCREL16F
 77

	)

2097 
	#R_PARISC_PCREL16WF
 78

	)

2098 
	#R_PARISC_PCREL16DF
 79

	)

2099 
	#R_PARISC_DIR64
 80

	)

2100 
	#R_PARISC_DIR14WR
 83

	)

2101 
	#R_PARISC_DIR14DR
 84

	)

2102 
	#R_PARISC_DIR16F
 85

	)

2103 
	#R_PARISC_DIR16WF
 86

	)

2104 
	#R_PARISC_DIR16DF
 87

	)

2105 
	#R_PARISC_GPREL64
 88

	)

2106 
	#R_PARISC_GPREL14WR
 91

	)

2107 
	#R_PARISC_GPREL14DR
 92

	)

2108 
	#R_PARISC_GPREL16F
 93

	)

2109 
	#R_PARISC_GPREL16WF
 94

	)

2110 
	#R_PARISC_GPREL16DF
 95

	)

2111 
	#R_PARISC_LTOFF64
 96

	)

2112 
	#R_PARISC_LTOFF14WR
 99

	)

2113 
	#R_PARISC_LTOFF14DR
 100

	)

2114 
	#R_PARISC_LTOFF16F
 101

	)

2115 
	#R_PARISC_LTOFF16WF
 102

	)

2116 
	#R_PARISC_LTOFF16DF
 103

	)

2117 
	#R_PARISC_SECREL64
 104

	)

2118 
	#R_PARISC_SEGREL64
 112

	)

2119 
	#R_PARISC_PLTOFF14WR
 115

	)

2120 
	#R_PARISC_PLTOFF14DR
 116

	)

2121 
	#R_PARISC_PLTOFF16F
 117

	)

2122 
	#R_PARISC_PLTOFF16WF
 118

	)

2123 
	#R_PARISC_PLTOFF16DF
 119

	)

2124 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2125 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2126 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2127 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2128 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2129 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2130 
	#R_PARISC_LORESERVE
 128

	)

2131 
	#R_PARISC_COPY
 128

	)

2132 
	#R_PARISC_IPLT
 129

	)

2133 
	#R_PARISC_EPLT
 130

	)

2134 
	#R_PARISC_TPREL32
 153

	)

2135 
	#R_PARISC_TPREL21L
 154

	)

2136 
	#R_PARISC_TPREL14R
 158

	)

2137 
	#R_PARISC_LTOFF_TP21L
 162

	)

2138 
	#R_PARISC_LTOFF_TP14R
 166

	)

2139 
	#R_PARISC_LTOFF_TP14F
 167

	)

2140 
	#R_PARISC_TPREL64
 216

	)

2141 
	#R_PARISC_TPREL14WR
 219

	)

2142 
	#R_PARISC_TPREL14DR
 220

	)

2143 
	#R_PARISC_TPREL16F
 221

	)

2144 
	#R_PARISC_TPREL16WF
 222

	)

2145 
	#R_PARISC_TPREL16DF
 223

	)

2146 
	#R_PARISC_LTOFF_TP64
 224

	)

2147 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2148 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2149 
	#R_PARISC_LTOFF_TP16F
 229

	)

2150 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2151 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2152 
	#R_PARISC_GNU_VTENTRY
 232

	)

2153 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2154 
	#R_PARISC_TLS_GD21L
 234

	)

2155 
	#R_PARISC_TLS_GD14R
 235

	)

2156 
	#R_PARISC_TLS_GDCALL
 236

	)

2157 
	#R_PARISC_TLS_LDM21L
 237

	)

2158 
	#R_PARISC_TLS_LDM14R
 238

	)

2159 
	#R_PARISC_TLS_LDMCALL
 239

	)

2160 
	#R_PARISC_TLS_LDO21L
 240

	)

2161 
	#R_PARISC_TLS_LDO14R
 241

	)

2162 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2163 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2164 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2165 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2166 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2167 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2168 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2169 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2170 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2171 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2172 
	#R_PARISC_HIRESERVE
 255

	)

2176 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2177 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2178 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2179 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2180 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2181 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2182 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2183 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2184 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2185 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2186 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2187 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2188 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2189 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2190 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2192 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2193 
	#PT_PARISC_UNWIND
 0x70000001

	)

2197 
	#PF_PARISC_SBP
 0x08000000

	)

2199 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2200 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2201 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2202 
	#PF_HP_CODE
 0x01000000

	)

2203 
	#PF_HP_MODIFY
 0x02000000

	)

2204 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2205 
	#PF_HP_SBP
 0x08000000

	)

2212 
	#EF_ALPHA_32BIT
 1

	)

2213 
	#EF_ALPHA_CANRELAX
 2

	)

2218 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2219 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2223 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2226 
	#STO_ALPHA_NOPV
 0x80

	)

2227 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2231 
	#R_ALPHA_NONE
 0

	)

2232 
	#R_ALPHA_REFLONG
 1

	)

2233 
	#R_ALPHA_REFQUAD
 2

	)

2234 
	#R_ALPHA_GPREL32
 3

	)

2235 
	#R_ALPHA_LITERAL
 4

	)

2236 
	#R_ALPHA_LITUSE
 5

	)

2237 
	#R_ALPHA_GPDISP
 6

	)

2238 
	#R_ALPHA_BRADDR
 7

	)

2239 
	#R_ALPHA_HINT
 8

	)

2240 
	#R_ALPHA_SREL16
 9

	)

2241 
	#R_ALPHA_SREL32
 10

	)

2242 
	#R_ALPHA_SREL64
 11

	)

2243 
	#R_ALPHA_GPRELHIGH
 17

	)

2244 
	#R_ALPHA_GPRELLOW
 18

	)

2245 
	#R_ALPHA_GPREL16
 19

	)

2246 
	#R_ALPHA_COPY
 24

	)

2247 
	#R_ALPHA_GLOB_DAT
 25

	)

2248 
	#R_ALPHA_JMP_SLOT
 26

	)

2249 
	#R_ALPHA_RELATIVE
 27

	)

2250 
	#R_ALPHA_TLS_GD_HI
 28

	)

2251 
	#R_ALPHA_TLSGD
 29

	)

2252 
	#R_ALPHA_TLS_LDM
 30

	)

2253 
	#R_ALPHA_DTPMOD64
 31

	)

2254 
	#R_ALPHA_GOTDTPREL
 32

	)

2255 
	#R_ALPHA_DTPREL64
 33

	)

2256 
	#R_ALPHA_DTPRELHI
 34

	)

2257 
	#R_ALPHA_DTPRELLO
 35

	)

2258 
	#R_ALPHA_DTPREL16
 36

	)

2259 
	#R_ALPHA_GOTTPREL
 37

	)

2260 
	#R_ALPHA_TPREL64
 38

	)

2261 
	#R_ALPHA_TPRELHI
 39

	)

2262 
	#R_ALPHA_TPRELLO
 40

	)

2263 
	#R_ALPHA_TPREL16
 41

	)

2265 
	#R_ALPHA_NUM
 46

	)

2268 
	#LITUSE_ALPHA_ADDR
 0

	)

2269 
	#LITUSE_ALPHA_BASE
 1

	)

2270 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2271 
	#LITUSE_ALPHA_JSR
 3

	)

2272 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2273 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2276 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2277 
	#DT_ALPHA_NUM
 1

	)

2282 
	#EF_PPC_EMB
 0x80000000

	)

2285 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2286 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2290 
	#R_PPC_NONE
 0

	)

2291 
	#R_PPC_ADDR32
 1

	)

2292 
	#R_PPC_ADDR24
 2

	)

2293 
	#R_PPC_ADDR16
 3

	)

2294 
	#R_PPC_ADDR16_LO
 4

	)

2295 
	#R_PPC_ADDR16_HI
 5

	)

2296 
	#R_PPC_ADDR16_HA
 6

	)

2297 
	#R_PPC_ADDR14
 7

	)

2298 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2299 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2300 
	#R_PPC_REL24
 10

	)

2301 
	#R_PPC_REL14
 11

	)

2302 
	#R_PPC_REL14_BRTAKEN
 12

	)

2303 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2304 
	#R_PPC_GOT16
 14

	)

2305 
	#R_PPC_GOT16_LO
 15

	)

2306 
	#R_PPC_GOT16_HI
 16

	)

2307 
	#R_PPC_GOT16_HA
 17

	)

2308 
	#R_PPC_PLTREL24
 18

	)

2309 
	#R_PPC_COPY
 19

	)

2310 
	#R_PPC_GLOB_DAT
 20

	)

2311 
	#R_PPC_JMP_SLOT
 21

	)

2312 
	#R_PPC_RELATIVE
 22

	)

2313 
	#R_PPC_LOCAL24PC
 23

	)

2314 
	#R_PPC_UADDR32
 24

	)

2315 
	#R_PPC_UADDR16
 25

	)

2316 
	#R_PPC_REL32
 26

	)

2317 
	#R_PPC_PLT32
 27

	)

2318 
	#R_PPC_PLTREL32
 28

	)

2319 
	#R_PPC_PLT16_LO
 29

	)

2320 
	#R_PPC_PLT16_HI
 30

	)

2321 
	#R_PPC_PLT16_HA
 31

	)

2322 
	#R_PPC_SDAREL16
 32

	)

2323 
	#R_PPC_SECTOFF
 33

	)

2324 
	#R_PPC_SECTOFF_LO
 34

	)

2325 
	#R_PPC_SECTOFF_HI
 35

	)

2326 
	#R_PPC_SECTOFF_HA
 36

	)

2329 
	#R_PPC_TLS
 67

	)

2330 
	#R_PPC_DTPMOD32
 68

	)

2331 
	#R_PPC_TPREL16
 69

	)

2332 
	#R_PPC_TPREL16_LO
 70

	)

2333 
	#R_PPC_TPREL16_HI
 71

	)

2334 
	#R_PPC_TPREL16_HA
 72

	)

2335 
	#R_PPC_TPREL32
 73

	)

2336 
	#R_PPC_DTPREL16
 74

	)

2337 
	#R_PPC_DTPREL16_LO
 75

	)

2338 
	#R_PPC_DTPREL16_HI
 76

	)

2339 
	#R_PPC_DTPREL16_HA
 77

	)

2340 
	#R_PPC_DTPREL32
 78

	)

2341 
	#R_PPC_GOT_TLSGD16
 79

	)

2342 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2343 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2344 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2345 
	#R_PPC_GOT_TLSLD16
 83

	)

2346 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2347 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2348 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2349 
	#R_PPC_GOT_TPREL16
 87

	)

2350 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2351 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2352 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2353 
	#R_PPC_GOT_DTPREL16
 91

	)

2354 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2355 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2356 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2357 
	#R_PPC_TLSGD
 95

	)

2358 
	#R_PPC_TLSLD
 96

	)

2362 
	#R_PPC_EMB_NADDR32
 101

	)

2363 
	#R_PPC_EMB_NADDR16
 102

	)

2364 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2365 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2366 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2367 
	#R_PPC_EMB_SDAI16
 106

	)

2368 
	#R_PPC_EMB_SDA2I16
 107

	)

2369 
	#R_PPC_EMB_SDA2REL
 108

	)

2370 
	#R_PPC_EMB_SDA21
 109

	)

2371 
	#R_PPC_EMB_MRKREF
 110

	)

2372 
	#R_PPC_EMB_RELSEC16
 111

	)

2373 
	#R_PPC_EMB_RELST_LO
 112

	)

2374 
	#R_PPC_EMB_RELST_HI
 113

	)

2375 
	#R_PPC_EMB_RELST_HA
 114

	)

2376 
	#R_PPC_EMB_BIT_FLD
 115

	)

2377 
	#R_PPC_EMB_RELSDA
 116

	)

2380 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2381 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2382 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2383 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2384 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2385 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2388 
	#R_PPC_IRELATIVE
 248

	)

2391 
	#R_PPC_REL16
 249

	)

2392 
	#R_PPC_REL16_LO
 250

	)

2393 
	#R_PPC_REL16_HI
 251

	)

2394 
	#R_PPC_REL16_HA
 252

	)

2398 
	#R_PPC_TOC16
 255

	)

2401 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2402 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2403 
	#DT_PPC_NUM
 2

	)

2406 
	#PPC_OPT_TLS
 1

	)

2409 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2410 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2411 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2412 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2413 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2414 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2415 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2416 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2417 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2418 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2419 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2420 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2421 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2422 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2423 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2424 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2425 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2426 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2428 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2429 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2430 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2431 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2433 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2434 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2435 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2436 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2437 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2438 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2439 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2440 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2442 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2443 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2444 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2445 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2446 
	#R_PPC64_ADDR30
 37

	)

2447 
	#R_PPC64_ADDR64
 38

	)

2448 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2449 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2450 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2451 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2452 
	#R_PPC64_UADDR64
 43

	)

2453 
	#R_PPC64_REL64
 44

	)

2454 
	#R_PPC64_PLT64
 45

	)

2455 
	#R_PPC64_PLTREL64
 46

	)

2456 
	#R_PPC64_TOC16
 47

	)

2457 
	#R_PPC64_TOC16_LO
 48

	)

2458 
	#R_PPC64_TOC16_HI
 49

	)

2459 
	#R_PPC64_TOC16_HA
 50

	)

2460 
	#R_PPC64_TOC
 51

	)

2461 
	#R_PPC64_PLTGOT16
 52

	)

2462 
	#R_PPC64_PLTGOT16_LO
 53

	)

2463 
	#R_PPC64_PLTGOT16_HI
 54

	)

2464 
	#R_PPC64_PLTGOT16_HA
 55

	)

2466 
	#R_PPC64_ADDR16_DS
 56

	)

2467 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2468 
	#R_PPC64_GOT16_DS
 58

	)

2469 
	#R_PPC64_GOT16_LO_DS
 59

	)

2470 
	#R_PPC64_PLT16_LO_DS
 60

	)

2471 
	#R_PPC64_SECTOFF_DS
 61

	)

2472 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2473 
	#R_PPC64_TOC16_DS
 63

	)

2474 
	#R_PPC64_TOC16_LO_DS
 64

	)

2475 
	#R_PPC64_PLTGOT16_DS
 65

	)

2476 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2479 
	#R_PPC64_TLS
 67

	)

2480 
	#R_PPC64_DTPMOD64
 68

	)

2481 
	#R_PPC64_TPREL16
 69

	)

2482 
	#R_PPC64_TPREL16_LO
 70

	)

2483 
	#R_PPC64_TPREL16_HI
 71

	)

2484 
	#R_PPC64_TPREL16_HA
 72

	)

2485 
	#R_PPC64_TPREL64
 73

	)

2486 
	#R_PPC64_DTPREL16
 74

	)

2487 
	#R_PPC64_DTPREL16_LO
 75

	)

2488 
	#R_PPC64_DTPREL16_HI
 76

	)

2489 
	#R_PPC64_DTPREL16_HA
 77

	)

2490 
	#R_PPC64_DTPREL64
 78

	)

2491 
	#R_PPC64_GOT_TLSGD16
 79

	)

2492 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2493 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2494 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2495 
	#R_PPC64_GOT_TLSLD16
 83

	)

2496 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2497 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2498 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2499 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2500 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2501 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2502 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2503 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2504 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2505 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2506 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2507 
	#R_PPC64_TPREL16_DS
 95

	)

2508 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2509 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2510 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2511 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2512 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2513 
	#R_PPC64_DTPREL16_DS
 101

	)

2514 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2515 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2516 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2517 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2518 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2519 
	#R_PPC64_TLSGD
 107

	)

2520 
	#R_PPC64_TLSLD
 108

	)

2521 
	#R_PPC64_TOCSAVE
 109

	)

2524 
	#R_PPC64_ADDR16_HIGH
 110

	)

2525 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2526 
	#R_PPC64_TPREL16_HIGH
 112

	)

2527 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2528 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2529 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2532 
	#R_PPC64_JMP_IREL
 247

	)

2533 
	#R_PPC64_IRELATIVE
 248

	)

2534 
	#R_PPC64_REL16
 249

	)

2535 
	#R_PPC64_REL16_LO
 250

	)

2536 
	#R_PPC64_REL16_HI
 251

	)

2537 
	#R_PPC64_REL16_HA
 252

	)

2543 
	#EF_PPC64_ABI
 3

	)

2546 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2547 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2548 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2549 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2550 
	#DT_PPC64_NUM
 4

	)

2553 
	#PPC64_OPT_TLS
 1

	)

2554 
	#PPC64_OPT_MULTI_TOC
 2

	)

2555 
	#PPC64_OPT_LOCALENTRY
 4

	)

2558 
	#STO_PPC64_LOCAL_BIT
 5

	)

2559 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2560 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2561 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2567 
	#EF_ARM_RELEXEC
 0x01

	)

2568 
	#EF_ARM_HASENTRY
 0x02

	)

2569 
	#EF_ARM_INTERWORK
 0x04

	)

2570 
	#EF_ARM_APCS_26
 0x08

	)

2571 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2572 
	#EF_ARM_PIC
 0x20

	)

2573 
	#EF_ARM_ALIGN8
 0x40

	)

2574 
	#EF_ARM_NEW_ABI
 0x80

	)

2575 
	#EF_ARM_OLD_ABI
 0x100

	)

2576 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2577 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2578 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2580 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2581 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2586 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2587 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2588 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2589 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2592 
	#EF_ARM_BE8
 0x00800000

	)

2593 
	#EF_ARM_LE8
 0x00400000

	)

2595 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2596 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2597 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2598 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2599 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2600 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2601 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2604 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2605 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2608 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2609 
	#SHF_ARM_COMDEF
 0x80000000

	)

2613 
	#PF_ARM_SB
 0x10000000

	)

2615 
	#PF_ARM_PI
 0x20000000

	)

2616 
	#PF_ARM_ABS
 0x40000000

	)

2619 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2622 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2623 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2624 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2629 
	#R_AARCH64_NONE
 0

	)

2632 
	#R_AARCH64_P32_ABS32
 1

	)

2633 
	#R_AARCH64_P32_COPY
 180

	)

2634 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2635 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2636 
	#R_AARCH64_P32_RELATIVE
 183

	)

2637 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2638 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2639 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2640 
	#R_AARCH64_P32_TLSDESC
 187

	)

2641 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2644 
	#R_AARCH64_ABS64
 257

	)

2645 
	#R_AARCH64_ABS32
 258

	)

2646 
	#R_AARCH64_ABS16
 259

	)

2647 
	#R_AARCH64_PREL64
 260

	)

2648 
	#R_AARCH64_PREL32
 261

	)

2649 
	#R_AARCH64_PREL16
 262

	)

2650 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2651 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2652 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2653 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2654 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2655 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2656 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2657 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2658 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2659 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2660 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2661 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2662 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2663 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2664 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2665 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2666 
	#R_AARCH64_TSTBR14
 279

	)

2667 
	#R_AARCH64_CONDBR19
 280

	)

2668 
	#R_AARCH64_JUMP26
 282

	)

2669 
	#R_AARCH64_CALL26
 283

	)

2670 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2671 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2672 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2673 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2674 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2675 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2676 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2677 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2678 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2679 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2680 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2681 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2682 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2683 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2684 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2685 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2686 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2687 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2688 
	#R_AARCH64_GOTREL64
 307

	)

2689 
	#R_AARCH64_GOTREL32
 308

	)

2690 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2691 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2692 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2693 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2694 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2695 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2696 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2697 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2698 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2699 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2700 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2701 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2702 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2703 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2704 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2705 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2706 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2707 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2708 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2709 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2710 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2711 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2712 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2713 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2714 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2715 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2716 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2717 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2718 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2719 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2720 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2721 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2722 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2723 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2724 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2725 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2726 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2727 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2728 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2729 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2730 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2731 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2732 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2733 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2734 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2735 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2736 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2737 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2738 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2739 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2740 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2741 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2742 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2743 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2744 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2745 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2746 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2747 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2748 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2749 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2750 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2751 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2752 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2753 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2754 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2755 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2756 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2757 
	#R_AARCH64_COPY
 1024

	)

2758 
	#R_AARCH64_GLOB_DAT
 1025

	)

2759 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2760 
	#R_AARCH64_RELATIVE
 1027

	)

2761 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2762 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2763 
	#R_AARCH64_TLS_TPREL
 1030

	)

2764 
	#R_AARCH64_TLSDESC
 1031

	)

2765 
	#R_AARCH64_IRELATIVE
 1032

	)

2769 
	#R_ARM_NONE
 0

	)

2770 
	#R_ARM_PC24
 1

	)

2772 
	#R_ARM_ABS32
 2

	)

2773 
	#R_ARM_REL32
 3

	)

2774 
	#R_ARM_PC13
 4

	)

2775 
	#R_ARM_ABS16
 5

	)

2776 
	#R_ARM_ABS12
 6

	)

2777 
	#R_ARM_THM_ABS5
 7

	)

2778 
	#R_ARM_ABS8
 8

	)

2779 
	#R_ARM_SBREL32
 9

	)

2780 
	#R_ARM_THM_PC22
 10

	)

2781 
	#R_ARM_THM_PC8
 11

	)

2783 
	#R_ARM_AMP_VCALL9
 12

	)

2784 
	#R_ARM_SWI24
 13

	)

2785 
	#R_ARM_TLS_DESC
 13

	)

2786 
	#R_ARM_THM_SWI8
 14

	)

2787 
	#R_ARM_XPC25
 15

	)

2788 
	#R_ARM_THM_XPC22
 16

	)

2789 
	#R_ARM_TLS_DTPMOD32
 17

	)

2790 
	#R_ARM_TLS_DTPOFF32
 18

	)

2791 
	#R_ARM_TLS_TPOFF32
 19

	)

2792 
	#R_ARM_COPY
 20

	)

2793 
	#R_ARM_GLOB_DAT
 21

	)

2794 
	#R_ARM_JUMP_SLOT
 22

	)

2795 
	#R_ARM_RELATIVE
 23

	)

2796 
	#R_ARM_GOTOFF
 24

	)

2797 
	#R_ARM_GOTPC
 25

	)

2798 
	#R_ARM_GOT32
 26

	)

2799 
	#R_ARM_PLT32
 27

	)

2800 
	#R_ARM_CALL
 28

	)

2801 
	#R_ARM_JUMP24
 29

	)

2803 
	#R_ARM_THM_JUMP24
 30

	)

2804 
	#R_ARM_BASE_ABS
 31

	)

2805 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2806 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2807 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2808 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2809 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2810 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2811 
	#R_ARM_TARGET1
 38

	)

2812 
	#R_ARM_SBREL31
 39

	)

2813 
	#R_ARM_V4BX
 40

	)

2814 
	#R_ARM_TARGET2
 41

	)

2815 
	#R_ARM_PREL31
 42

	)

2816 
	#R_ARM_MOVW_ABS_NC
 43

	)

2817 
	#R_ARM_MOVT_ABS
 44

	)

2818 
	#R_ARM_MOVW_PREL_NC
 45

	)

2819 
	#R_ARM_MOVT_PREL
 46

	)

2820 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2821 
	#R_ARM_THM_MOVT_ABS
 48

	)

2823 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2825 
	#R_ARM_THM_MOVT_PREL
 50

	)

2827 
	#R_ARM_THM_JUMP19
 51

	)

2829 
	#R_ARM_THM_JUMP6
 52

	)

2831 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2833 
	#R_ARM_THM_PC12
 54

	)

2835 
	#R_ARM_ABS32_NOI
 55

	)

2836 
	#R_ARM_REL32_NOI
 56

	)

2837 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2838 
	#R_ARM_ALU_PC_G0
 58

	)

2839 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2840 
	#R_ARM_ALU_PC_G1
 60

	)

2841 
	#R_ARM_ALU_PC_G2
 61

	)

2842 
	#R_ARM_LDR_PC_G1
 62

	)

2843 
	#R_ARM_LDR_PC_G2
 63

	)

2844 
	#R_ARM_LDRS_PC_G0
 64

	)

2846 
	#R_ARM_LDRS_PC_G1
 65

	)

2848 
	#R_ARM_LDRS_PC_G2
 66

	)

2850 
	#R_ARM_LDC_PC_G0
 67

	)

2851 
	#R_ARM_LDC_PC_G1
 68

	)

2852 
	#R_ARM_LDC_PC_G2
 69

	)

2853 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2854 
	#R_ARM_ALU_SB_G0
 71

	)

2855 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2856 
	#R_ARM_ALU_SB_G1
 73

	)

2857 
	#R_ARM_ALU_SB_G2
 74

	)

2858 
	#R_ARM_LDR_SB_G0
 75

	)

2860 
	#R_ARM_LDR_SB_G1
 76

	)

2862 
	#R_ARM_LDR_SB_G2
 77

	)

2864 
	#R_ARM_LDRS_SB_G0
 78

	)

2866 
	#R_ARM_LDRS_SB_G1
 79

	)

2868 
	#R_ARM_LDRS_SB_G2
 80

	)

2870 
	#R_ARM_LDC_SB_G0
 81

	)

2871 
	#R_ARM_LDC_SB_G1
 82

	)

2872 
	#R_ARM_LDC_SB_G2
 83

	)

2873 
	#R_ARM_MOVW_BREL_NC
 84

	)

2875 
	#R_ARM_MOVT_BREL
 85

	)

2877 
	#R_ARM_MOVW_BREL
 86

	)

2879 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2881 
	#R_ARM_THM_MOVT_BREL
 88

	)

2883 
	#R_ARM_THM_MOVW_BREL
 89

	)

2885 
	#R_ARM_TLS_GOTDESC
 90

	)

2886 
	#R_ARM_TLS_CALL
 91

	)

2887 
	#R_ARM_TLS_DESCSEQ
 92

	)

2888 
	#R_ARM_THM_TLS_CALL
 93

	)

2889 
	#R_ARM_PLT32_ABS
 94

	)

2890 
	#R_ARM_GOT_ABS
 95

	)

2891 
	#R_ARM_GOT_PREL
 96

	)

2892 
	#R_ARM_GOT_BREL12
 97

	)

2894 
	#R_ARM_GOTOFF12
 98

	)

2896 
	#R_ARM_GOTRELAX
 99

	)

2897 
	#R_ARM_GNU_VTENTRY
 100

	)

2898 
	#R_ARM_GNU_VTINHERIT
 101

	)

2899 
	#R_ARM_THM_PC11
 102

	)

2900 
	#R_ARM_THM_PC9
 103

	)

2902 
	#R_ARM_TLS_GD32
 104

	)

2904 
	#R_ARM_TLS_LDM32
 105

	)

2906 
	#R_ARM_TLS_LDO32
 106

	)

2908 
	#R_ARM_TLS_IE32
 107

	)

2910 
	#R_ARM_TLS_LE32
 108

	)

2912 
	#R_ARM_TLS_LDO12
 109

	)

2914 
	#R_ARM_TLS_LE12
 110

	)

2916 
	#R_ARM_TLS_IE12GP
 111

	)

2918 
	#R_ARM_ME_TOO
 128

	)

2919 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2920 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2921 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2922 
	#R_ARM_THM_GOT_BREL12
 131

	)

2924 
	#R_ARM_IRELATIVE
 160

	)

2925 
	#R_ARM_RXPC25
 249

	)

2926 
	#R_ARM_RSBREL32
 250

	)

2927 
	#R_ARM_THM_RPC22
 251

	)

2928 
	#R_ARM_RREL32
 252

	)

2929 
	#R_ARM_RABS22
 253

	)

2930 
	#R_ARM_RPC24
 254

	)

2931 
	#R_ARM_RBASE
 255

	)

2933 
	#R_ARM_NUM
 256

	)

2938 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2939 
	#EF_IA_64_ABI64
 0x00000010

	)

2940 
	#EF_IA_64_ARCH
 0xff000000

	)

2943 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2944 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2945 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2946 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2947 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2950 
	#PF_IA_64_NORECOV
 0x80000000

	)

2953 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2954 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2957 
	#SHF_IA_64_SHORT
 0x10000000

	)

2958 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2961 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2962 
	#DT_IA_64_NUM
 1

	)

2965 
	#R_IA64_NONE
 0x00

	)

2966 
	#R_IA64_IMM14
 0x21

	)

2967 
	#R_IA64_IMM22
 0x22

	)

2968 
	#R_IA64_IMM64
 0x23

	)

2969 
	#R_IA64_DIR32MSB
 0x24

	)

2970 
	#R_IA64_DIR32LSB
 0x25

	)

2971 
	#R_IA64_DIR64MSB
 0x26

	)

2972 
	#R_IA64_DIR64LSB
 0x27

	)

2973 
	#R_IA64_GPREL22
 0x2®

	)

2974 
	#R_IA64_GPREL64I
 0x2b

	)

2975 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2976 
	#R_IA64_GPREL32LSB
 0x2d

	)

2977 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2978 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2979 
	#R_IA64_LTOFF22
 0x32

	)

2980 
	#R_IA64_LTOFF64I
 0x33

	)

2981 
	#R_IA64_PLTOFF22
 0x3®

	)

2982 
	#R_IA64_PLTOFF64I
 0x3b

	)

2983 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2984 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2985 
	#R_IA64_FPTR64I
 0x43

	)

2986 
	#R_IA64_FPTR32MSB
 0x44

	)

2987 
	#R_IA64_FPTR32LSB
 0x45

	)

2988 
	#R_IA64_FPTR64MSB
 0x46

	)

2989 
	#R_IA64_FPTR64LSB
 0x47

	)

2990 
	#R_IA64_PCREL60B
 0x48

	)

2991 
	#R_IA64_PCREL21B
 0x49

	)

2992 
	#R_IA64_PCREL21M
 0x4®

	)

2993 
	#R_IA64_PCREL21F
 0x4b

	)

2994 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2995 
	#R_IA64_PCREL32LSB
 0x4d

	)

2996 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2997 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2998 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2999 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3000 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3001 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3002 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3003 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3004 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3005 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3006 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3007 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3008 
	#R_IA64_SECREL32MSB
 0x64

	)

3009 
	#R_IA64_SECREL32LSB
 0x65

	)

3010 
	#R_IA64_SECREL64MSB
 0x66

	)

3011 
	#R_IA64_SECREL64LSB
 0x67

	)

3012 
	#R_IA64_REL32MSB
 0x6¯

	)

3013 
	#R_IA64_REL32LSB
 0x6d

	)

3014 
	#R_IA64_REL64MSB
 0x6ê

	)

3015 
	#R_IA64_REL64LSB
 0x6‡

	)

3016 
	#R_IA64_LTV32MSB
 0x74

	)

3017 
	#R_IA64_LTV32LSB
 0x75

	)

3018 
	#R_IA64_LTV64MSB
 0x76

	)

3019 
	#R_IA64_LTV64LSB
 0x77

	)

3020 
	#R_IA64_PCREL21BI
 0x79

	)

3021 
	#R_IA64_PCREL22
 0x7®

	)

3022 
	#R_IA64_PCREL64I
 0x7b

	)

3023 
	#R_IA64_IPLTMSB
 0x80

	)

3024 
	#R_IA64_IPLTLSB
 0x81

	)

3025 
	#R_IA64_COPY
 0x84

	)

3026 
	#R_IA64_SUB
 0x85

	)

3027 
	#R_IA64_LTOFF22X
 0x86

	)

3028 
	#R_IA64_LDXMOV
 0x87

	)

3029 
	#R_IA64_TPREL14
 0x91

	)

3030 
	#R_IA64_TPREL22
 0x92

	)

3031 
	#R_IA64_TPREL64I
 0x93

	)

3032 
	#R_IA64_TPREL64MSB
 0x96

	)

3033 
	#R_IA64_TPREL64LSB
 0x97

	)

3034 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3035 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3036 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3037 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3038 
	#R_IA64_DTPREL14
 0xb1

	)

3039 
	#R_IA64_DTPREL22
 0xb2

	)

3040 
	#R_IA64_DTPREL64I
 0xb3

	)

3041 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3042 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3043 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3044 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3045 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3050 
	#EF_SH_MACH_MASK
 0x1f

	)

3051 
	#EF_SH_UNKNOWN
 0x0

	)

3052 
	#EF_SH1
 0x1

	)

3053 
	#EF_SH2
 0x2

	)

3054 
	#EF_SH3
 0x3

	)

3055 
	#EF_SH_DSP
 0x4

	)

3056 
	#EF_SH3_DSP
 0x5

	)

3057 
	#EF_SH4AL_DSP
 0x6

	)

3058 
	#EF_SH3E
 0x8

	)

3059 
	#EF_SH4
 0x9

	)

3060 
	#EF_SH2E
 0xb

	)

3061 
	#EF_SH4A
 0xc

	)

3062 
	#EF_SH2A
 0xd

	)

3063 
	#EF_SH4_NOFPU
 0x10

	)

3064 
	#EF_SH4A_NOFPU
 0x11

	)

3065 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3066 
	#EF_SH2A_NOFPU
 0x13

	)

3067 
	#EF_SH3_NOMMU
 0x14

	)

3068 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3069 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3070 
	#EF_SH2A_SH4
 0x17

	)

3071 
	#EF_SH2A_SH3E
 0x18

	)

3074 
	#R_SH_NONE
 0

	)

3075 
	#R_SH_DIR32
 1

	)

3076 
	#R_SH_REL32
 2

	)

3077 
	#R_SH_DIR8WPN
 3

	)

3078 
	#R_SH_IND12W
 4

	)

3079 
	#R_SH_DIR8WPL
 5

	)

3080 
	#R_SH_DIR8WPZ
 6

	)

3081 
	#R_SH_DIR8BP
 7

	)

3082 
	#R_SH_DIR8W
 8

	)

3083 
	#R_SH_DIR8L
 9

	)

3084 
	#R_SH_SWITCH16
 25

	)

3085 
	#R_SH_SWITCH32
 26

	)

3086 
	#R_SH_USES
 27

	)

3087 
	#R_SH_COUNT
 28

	)

3088 
	#R_SH_ALIGN
 29

	)

3089 
	#R_SH_CODE
 30

	)

3090 
	#R_SH_DATA
 31

	)

3091 
	#R_SH_LABEL
 32

	)

3092 
	#R_SH_SWITCH8
 33

	)

3093 
	#R_SH_GNU_VTINHERIT
 34

	)

3094 
	#R_SH_GNU_VTENTRY
 35

	)

3095 
	#R_SH_TLS_GD_32
 144

	)

3096 
	#R_SH_TLS_LD_32
 145

	)

3097 
	#R_SH_TLS_LDO_32
 146

	)

3098 
	#R_SH_TLS_IE_32
 147

	)

3099 
	#R_SH_TLS_LE_32
 148

	)

3100 
	#R_SH_TLS_DTPMOD32
 149

	)

3101 
	#R_SH_TLS_DTPOFF32
 150

	)

3102 
	#R_SH_TLS_TPOFF32
 151

	)

3103 
	#R_SH_GOT32
 160

	)

3104 
	#R_SH_PLT32
 161

	)

3105 
	#R_SH_COPY
 162

	)

3106 
	#R_SH_GLOB_DAT
 163

	)

3107 
	#R_SH_JMP_SLOT
 164

	)

3108 
	#R_SH_RELATIVE
 165

	)

3109 
	#R_SH_GOTOFF
 166

	)

3110 
	#R_SH_GOTPC
 167

	)

3112 
	#R_SH_NUM
 256

	)

3118 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3122 
	#R_390_NONE
 0

	)

3123 
	#R_390_8
 1

	)

3124 
	#R_390_12
 2

	)

3125 
	#R_390_16
 3

	)

3126 
	#R_390_32
 4

	)

3127 
	#R_390_PC32
 5

	)

3128 
	#R_390_GOT12
 6

	)

3129 
	#R_390_GOT32
 7

	)

3130 
	#R_390_PLT32
 8

	)

3131 
	#R_390_COPY
 9

	)

3132 
	#R_390_GLOB_DAT
 10

	)

3133 
	#R_390_JMP_SLOT
 11

	)

3134 
	#R_390_RELATIVE
 12

	)

3135 
	#R_390_GOTOFF32
 13

	)

3136 
	#R_390_GOTPC
 14

	)

3137 
	#R_390_GOT16
 15

	)

3138 
	#R_390_PC16
 16

	)

3139 
	#R_390_PC16DBL
 17

	)

3140 
	#R_390_PLT16DBL
 18

	)

3141 
	#R_390_PC32DBL
 19

	)

3142 
	#R_390_PLT32DBL
 20

	)

3143 
	#R_390_GOTPCDBL
 21

	)

3144 
	#R_390_64
 22

	)

3145 
	#R_390_PC64
 23

	)

3146 
	#R_390_GOT64
 24

	)

3147 
	#R_390_PLT64
 25

	)

3148 
	#R_390_GOTENT
 26

	)

3149 
	#R_390_GOTOFF16
 27

	)

3150 
	#R_390_GOTOFF64
 28

	)

3151 
	#R_390_GOTPLT12
 29

	)

3152 
	#R_390_GOTPLT16
 30

	)

3153 
	#R_390_GOTPLT32
 31

	)

3154 
	#R_390_GOTPLT64
 32

	)

3155 
	#R_390_GOTPLTENT
 33

	)

3156 
	#R_390_PLTOFF16
 34

	)

3157 
	#R_390_PLTOFF32
 35

	)

3158 
	#R_390_PLTOFF64
 36

	)

3159 
	#R_390_TLS_LOAD
 37

	)

3160 
	#R_390_TLS_GDCALL
 38

	)

3162 
	#R_390_TLS_LDCALL
 39

	)

3164 
	#R_390_TLS_GD32
 40

	)

3166 
	#R_390_TLS_GD64
 41

	)

3168 
	#R_390_TLS_GOTIE12
 42

	)

3170 
	#R_390_TLS_GOTIE32
 43

	)

3172 
	#R_390_TLS_GOTIE64
 44

	)

3174 
	#R_390_TLS_LDM32
 45

	)

3176 
	#R_390_TLS_LDM64
 46

	)

3178 
	#R_390_TLS_IE32
 47

	)

3180 
	#R_390_TLS_IE64
 48

	)

3182 
	#R_390_TLS_IEENT
 49

	)

3184 
	#R_390_TLS_LE32
 50

	)

3186 
	#R_390_TLS_LE64
 51

	)

3188 
	#R_390_TLS_LDO32
 52

	)

3190 
	#R_390_TLS_LDO64
 53

	)

3192 
	#R_390_TLS_DTPMOD
 54

	)

3193 
	#R_390_TLS_DTPOFF
 55

	)

3194 
	#R_390_TLS_TPOFF
 56

	)

3196 
	#R_390_20
 57

	)

3197 
	#R_390_GOT20
 58

	)

3198 
	#R_390_GOTPLT20
 59

	)

3199 
	#R_390_TLS_GOTIE20
 60

	)

3201 
	#R_390_IRELATIVE
 61

	)

3203 
	#R_390_NUM
 62

	)

3207 
	#R_CRIS_NONE
 0

	)

3208 
	#R_CRIS_8
 1

	)

3209 
	#R_CRIS_16
 2

	)

3210 
	#R_CRIS_32
 3

	)

3211 
	#R_CRIS_8_PCREL
 4

	)

3212 
	#R_CRIS_16_PCREL
 5

	)

3213 
	#R_CRIS_32_PCREL
 6

	)

3214 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3215 
	#R_CRIS_GNU_VTENTRY
 8

	)

3216 
	#R_CRIS_COPY
 9

	)

3217 
	#R_CRIS_GLOB_DAT
 10

	)

3218 
	#R_CRIS_JUMP_SLOT
 11

	)

3219 
	#R_CRIS_RELATIVE
 12

	)

3220 
	#R_CRIS_16_GOT
 13

	)

3221 
	#R_CRIS_32_GOT
 14

	)

3222 
	#R_CRIS_16_GOTPLT
 15

	)

3223 
	#R_CRIS_32_GOTPLT
 16

	)

3224 
	#R_CRIS_32_GOTREL
 17

	)

3225 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3226 
	#R_CRIS_32_PLT_PCREL
 19

	)

3228 
	#R_CRIS_NUM
 20

	)

3232 
	#R_X86_64_NONE
 0

	)

3233 
	#R_X86_64_64
 1

	)

3234 
	#R_X86_64_PC32
 2

	)

3235 
	#R_X86_64_GOT32
 3

	)

3236 
	#R_X86_64_PLT32
 4

	)

3237 
	#R_X86_64_COPY
 5

	)

3238 
	#R_X86_64_GLOB_DAT
 6

	)

3239 
	#R_X86_64_JUMP_SLOT
 7

	)

3240 
	#R_X86_64_RELATIVE
 8

	)

3241 
	#R_X86_64_GOTPCREL
 9

	)

3243 
	#R_X86_64_32
 10

	)

3244 
	#R_X86_64_32S
 11

	)

3245 
	#R_X86_64_16
 12

	)

3246 
	#R_X86_64_PC16
 13

	)

3247 
	#R_X86_64_8
 14

	)

3248 
	#R_X86_64_PC8
 15

	)

3249 
	#R_X86_64_DTPMOD64
 16

	)

3250 
	#R_X86_64_DTPOFF64
 17

	)

3251 
	#R_X86_64_TPOFF64
 18

	)

3252 
	#R_X86_64_TLSGD
 19

	)

3254 
	#R_X86_64_TLSLD
 20

	)

3256 
	#R_X86_64_DTPOFF32
 21

	)

3257 
	#R_X86_64_GOTTPOFF
 22

	)

3259 
	#R_X86_64_TPOFF32
 23

	)

3260 
	#R_X86_64_PC64
 24

	)

3261 
	#R_X86_64_GOTOFF64
 25

	)

3262 
	#R_X86_64_GOTPC32
 26

	)

3264 
	#R_X86_64_GOT64
 27

	)

3265 
	#R_X86_64_GOTPCREL64
 28

	)

3267 
	#R_X86_64_GOTPC64
 29

	)

3268 
	#R_X86_64_GOTPLT64
 30

	)

3269 
	#R_X86_64_PLTOFF64
 31

	)

3271 
	#R_X86_64_SIZE32
 32

	)

3272 
	#R_X86_64_SIZE64
 33

	)

3273 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3274 
	#R_X86_64_TLSDESC_CALL
 35

	)

3276 
	#R_X86_64_TLSDESC
 36

	)

3277 
	#R_X86_64_IRELATIVE
 37

	)

3278 
	#R_X86_64_RELATIVE64
 38

	)

3281 
	#R_X86_64_GOTPCRELX
 41

	)

3284 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3287 
	#R_X86_64_NUM
 43

	)

3291 
	#R_MN10300_NONE
 0

	)

3292 
	#R_MN10300_32
 1

	)

3293 
	#R_MN10300_16
 2

	)

3294 
	#R_MN10300_8
 3

	)

3295 
	#R_MN10300_PCREL32
 4

	)

3296 
	#R_MN10300_PCREL16
 5

	)

3297 
	#R_MN10300_PCREL8
 6

	)

3298 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3299 
	#R_MN10300_GNU_VTENTRY
 8

	)

3300 
	#R_MN10300_24
 9

	)

3301 
	#R_MN10300_GOTPC32
 10

	)

3302 
	#R_MN10300_GOTPC16
 11

	)

3303 
	#R_MN10300_GOTOFF32
 12

	)

3304 
	#R_MN10300_GOTOFF24
 13

	)

3305 
	#R_MN10300_GOTOFF16
 14

	)

3306 
	#R_MN10300_PLT32
 15

	)

3307 
	#R_MN10300_PLT16
 16

	)

3308 
	#R_MN10300_GOT32
 17

	)

3309 
	#R_MN10300_GOT24
 18

	)

3310 
	#R_MN10300_GOT16
 19

	)

3311 
	#R_MN10300_COPY
 20

	)

3312 
	#R_MN10300_GLOB_DAT
 21

	)

3313 
	#R_MN10300_JMP_SLOT
 22

	)

3314 
	#R_MN10300_RELATIVE
 23

	)

3315 
	#R_MN10300_TLS_GD
 24

	)

3316 
	#R_MN10300_TLS_LD
 25

	)

3317 
	#R_MN10300_TLS_LDO
 26

	)

3318 
	#R_MN10300_TLS_GOTIE
 27

	)

3320 
	#R_MN10300_TLS_IE
 28

	)

3322 
	#R_MN10300_TLS_LE
 29

	)

3324 
	#R_MN10300_TLS_DTPMOD
 30

	)

3325 
	#R_MN10300_TLS_DTPOFF
 31

	)

3326 
	#R_MN10300_TLS_TPOFF
 32

	)

3327 
	#R_MN10300_SYM_DIFF
 33

	)

3329 
	#R_MN10300_ALIGN
 34

	)

3331 
	#R_MN10300_NUM
 35

	)

3335 
	#R_M32R_NONE
 0

	)

3336 
	#R_M32R_16
 1

	)

3337 
	#R_M32R_32
 2

	)

3338 
	#R_M32R_24
 3

	)

3339 
	#R_M32R_10_PCREL
 4

	)

3340 
	#R_M32R_18_PCREL
 5

	)

3341 
	#R_M32R_26_PCREL
 6

	)

3342 
	#R_M32R_HI16_ULO
 7

	)

3343 
	#R_M32R_HI16_SLO
 8

	)

3344 
	#R_M32R_LO16
 9

	)

3345 
	#R_M32R_SDA16
 10

	)

3346 
	#R_M32R_GNU_VTINHERIT
 11

	)

3347 
	#R_M32R_GNU_VTENTRY
 12

	)

3349 
	#R_M32R_16_RELA
 33

	)

3350 
	#R_M32R_32_RELA
 34

	)

3351 
	#R_M32R_24_RELA
 35

	)

3352 
	#R_M32R_10_PCREL_RELA
 36

	)

3353 
	#R_M32R_18_PCREL_RELA
 37

	)

3354 
	#R_M32R_26_PCREL_RELA
 38

	)

3355 
	#R_M32R_HI16_ULO_RELA
 39

	)

3356 
	#R_M32R_HI16_SLO_RELA
 40

	)

3357 
	#R_M32R_LO16_RELA
 41

	)

3358 
	#R_M32R_SDA16_RELA
 42

	)

3359 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3360 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3361 
	#R_M32R_REL32
 45

	)

3363 
	#R_M32R_GOT24
 48

	)

3364 
	#R_M32R_26_PLTREL
 49

	)

3365 
	#R_M32R_COPY
 50

	)

3366 
	#R_M32R_GLOB_DAT
 51

	)

3367 
	#R_M32R_JMP_SLOT
 52

	)

3368 
	#R_M32R_RELATIVE
 53

	)

3369 
	#R_M32R_GOTOFF
 54

	)

3370 
	#R_M32R_GOTPC24
 55

	)

3371 
	#R_M32R_GOT16_HI_ULO
 56

	)

3373 
	#R_M32R_GOT16_HI_SLO
 57

	)

3375 
	#R_M32R_GOT16_LO
 58

	)

3376 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3378 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3380 
	#R_M32R_GOTPC_LO
 61

	)

3382 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3384 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3386 
	#R_M32R_GOTOFF_LO
 64

	)

3387 
	#R_M32R_NUM
 256

	)

3390 
	#R_MICROBLAZE_NONE
 0

	)

3391 
	#R_MICROBLAZE_32
 1

	)

3392 
	#R_MICROBLAZE_32_PCREL
 2

	)

3393 
	#R_MICROBLAZE_64_PCREL
 3

	)

3394 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3395 
	#R_MICROBLAZE_64
 5

	)

3396 
	#R_MICROBLAZE_32_LO
 6

	)

3397 
	#R_MICROBLAZE_SRO32
 7

	)

3398 
	#R_MICROBLAZE_SRW32
 8

	)

3399 
	#R_MICROBLAZE_64_NONE
 9

	)

3400 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3401 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3402 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3403 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3404 
	#R_MICROBLAZE_GOT_64
 14

	)

3405 
	#R_MICROBLAZE_PLT_64
 15

	)

3406 
	#R_MICROBLAZE_REL
 16

	)

3407 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3408 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3409 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3410 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3411 
	#R_MICROBLAZE_COPY
 21

	)

3412 
	#R_MICROBLAZE_TLS
 22

	)

3413 
	#R_MICROBLAZE_TLSGD
 23

	)

3414 
	#R_MICROBLAZE_TLSLD
 24

	)

3415 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3416 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3417 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3418 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3419 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3422 
	#DT_NIOS2_GP
 0x70000002

	)

3425 
	#R_NIOS2_NONE
 0

	)

3426 
	#R_NIOS2_S16
 1

	)

3427 
	#R_NIOS2_U16
 2

	)

3428 
	#R_NIOS2_PCREL16
 3

	)

3429 
	#R_NIOS2_CALL26
 4

	)

3430 
	#R_NIOS2_IMM5
 5

	)

3431 
	#R_NIOS2_CACHE_OPX
 6

	)

3432 
	#R_NIOS2_IMM6
 7

	)

3433 
	#R_NIOS2_IMM8
 8

	)

3434 
	#R_NIOS2_HI16
 9

	)

3435 
	#R_NIOS2_LO16
 10

	)

3436 
	#R_NIOS2_HIADJ16
 11

	)

3437 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3438 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3439 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3440 
	#R_NIOS2_GPREL
 15

	)

3441 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3442 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3443 
	#R_NIOS2_UJMP
 18

	)

3444 
	#R_NIOS2_CJMP
 19

	)

3445 
	#R_NIOS2_CALLR
 20

	)

3446 
	#R_NIOS2_ALIGN
 21

	)

3448 
	#R_NIOS2_GOT16
 22

	)

3449 
	#R_NIOS2_CALL16
 23

	)

3450 
	#R_NIOS2_GOTOFF_LO
 24

	)

3451 
	#R_NIOS2_GOTOFF_HA
 25

	)

3452 
	#R_NIOS2_PCREL_LO
 26

	)

3453 
	#R_NIOS2_PCREL_HA
 27

	)

3454 
	#R_NIOS2_TLS_GD16
 28

	)

3455 
	#R_NIOS2_TLS_LDM16
 29

	)

3456 
	#R_NIOS2_TLS_LDO16
 30

	)

3457 
	#R_NIOS2_TLS_IE16
 31

	)

3458 
	#R_NIOS2_TLS_LE16
 32

	)

3459 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3460 
	#R_NIOS2_TLS_DTPREL
 34

	)

3461 
	#R_NIOS2_TLS_TPREL
 35

	)

3462 
	#R_NIOS2_COPY
 36

	)

3463 
	#R_NIOS2_GLOB_DAT
 37

	)

3464 
	#R_NIOS2_JUMP_SLOT
 38

	)

3465 
	#R_NIOS2_RELATIVE
 39

	)

3466 
	#R_NIOS2_GOTOFF
 40

	)

3467 
	#R_NIOS2_CALL26_NOAT
 41

	)

3468 
	#R_NIOS2_GOT_LO
 42

	)

3469 
	#R_NIOS2_GOT_HA
 43

	)

3470 
	#R_NIOS2_CALL_LO
 44

	)

3471 
	#R_NIOS2_CALL_HA
 45

	)

3474 
	#R_TILEPRO_NONE
 0

	)

3475 
	#R_TILEPRO_32
 1

	)

3476 
	#R_TILEPRO_16
 2

	)

3477 
	#R_TILEPRO_8
 3

	)

3478 
	#R_TILEPRO_32_PCREL
 4

	)

3479 
	#R_TILEPRO_16_PCREL
 5

	)

3480 
	#R_TILEPRO_8_PCREL
 6

	)

3481 
	#R_TILEPRO_LO16
 7

	)

3482 
	#R_TILEPRO_HI16
 8

	)

3483 
	#R_TILEPRO_HA16
 9

	)

3484 
	#R_TILEPRO_COPY
 10

	)

3485 
	#R_TILEPRO_GLOB_DAT
 11

	)

3486 
	#R_TILEPRO_JMP_SLOT
 12

	)

3487 
	#R_TILEPRO_RELATIVE
 13

	)

3488 
	#R_TILEPRO_BROFF_X1
 14

	)

3489 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3490 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3491 
	#R_TILEPRO_IMM8_X0
 17

	)

3492 
	#R_TILEPRO_IMM8_Y0
 18

	)

3493 
	#R_TILEPRO_IMM8_X1
 19

	)

3494 
	#R_TILEPRO_IMM8_Y1
 20

	)

3495 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3496 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3497 
	#R_TILEPRO_IMM16_X0
 23

	)

3498 
	#R_TILEPRO_IMM16_X1
 24

	)

3499 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3500 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3501 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3502 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3503 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3504 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3505 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3506 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3507 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3508 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3509 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3510 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3511 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3512 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3513 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3514 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3515 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3516 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3517 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3518 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3519 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3520 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3521 
	#R_TILEPRO_MMSTART_X0
 47

	)

3522 
	#R_TILEPRO_MMEND_X0
 48

	)

3523 
	#R_TILEPRO_MMSTART_X1
 49

	)

3524 
	#R_TILEPRO_MMEND_X1
 50

	)

3525 
	#R_TILEPRO_SHAMT_X0
 51

	)

3526 
	#R_TILEPRO_SHAMT_X1
 52

	)

3527 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3528 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3529 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3531 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3532 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3533 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3534 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3535 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3536 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3537 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3538 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3539 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3540 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3541 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3542 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3543 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3544 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3545 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3546 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3547 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3548 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3549 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3550 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3551 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3552 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3553 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3554 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3555 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3556 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3557 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3558 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3559 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3560 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3561 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3562 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3563 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3565 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3566 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3568 
	#R_TILEPRO_NUM
 130

	)

3572 
	#R_TILEGX_NONE
 0

	)

3573 
	#R_TILEGX_64
 1

	)

3574 
	#R_TILEGX_32
 2

	)

3575 
	#R_TILEGX_16
 3

	)

3576 
	#R_TILEGX_8
 4

	)

3577 
	#R_TILEGX_64_PCREL
 5

	)

3578 
	#R_TILEGX_32_PCREL
 6

	)

3579 
	#R_TILEGX_16_PCREL
 7

	)

3580 
	#R_TILEGX_8_PCREL
 8

	)

3581 
	#R_TILEGX_HW0
 9

	)

3582 
	#R_TILEGX_HW1
 10

	)

3583 
	#R_TILEGX_HW2
 11

	)

3584 
	#R_TILEGX_HW3
 12

	)

3585 
	#R_TILEGX_HW0_LAST
 13

	)

3586 
	#R_TILEGX_HW1_LAST
 14

	)

3587 
	#R_TILEGX_HW2_LAST
 15

	)

3588 
	#R_TILEGX_COPY
 16

	)

3589 
	#R_TILEGX_GLOB_DAT
 17

	)

3590 
	#R_TILEGX_JMP_SLOT
 18

	)

3591 
	#R_TILEGX_RELATIVE
 19

	)

3592 
	#R_TILEGX_BROFF_X1
 20

	)

3593 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3594 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3595 
	#R_TILEGX_IMM8_X0
 23

	)

3596 
	#R_TILEGX_IMM8_Y0
 24

	)

3597 
	#R_TILEGX_IMM8_X1
 25

	)

3598 
	#R_TILEGX_IMM8_Y1
 26

	)

3599 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3600 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3601 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3602 
	#R_TILEGX_MMSTART_X0
 30

	)

3603 
	#R_TILEGX_MMEND_X0
 31

	)

3604 
	#R_TILEGX_SHAMT_X0
 32

	)

3605 
	#R_TILEGX_SHAMT_X1
 33

	)

3606 
	#R_TILEGX_SHAMT_Y0
 34

	)

3607 
	#R_TILEGX_SHAMT_Y1
 35

	)

3608 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3609 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3610 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3611 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3612 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3613 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3614 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3615 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3616 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3617 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3618 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3619 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3620 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3621 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3622 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3623 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3624 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3625 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3626 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3627 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3628 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3629 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3630 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3631 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3632 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3633 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3634 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3635 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3636 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3637 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3638 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3639 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3640 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3641 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3642 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3643 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3644 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3645 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3646 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3647 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3648 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3649 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3650 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3651 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3652 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3653 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3654 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3655 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3656 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3657 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3658 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3659 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3660 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3661 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3663 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3664 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3665 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3666 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3667 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3668 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3669 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3670 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3671 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3672 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3673 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3674 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3676 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3677 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3678 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3679 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3680 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3681 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3682 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3683 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3684 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3685 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3686 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3687 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3688 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3689 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3690 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3691 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3693 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3694 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3696 
	#R_TILEGX_NUM
 130

	)

3699 
	#EF_RISCV_RVC
 0x0001

	)

3700 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3701 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3702 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3703 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3704 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3707 
	#R_RISCV_NONE
 0

	)

3708 
	#R_RISCV_32
 1

	)

3709 
	#R_RISCV_64
 2

	)

3710 
	#R_RISCV_RELATIVE
 3

	)

3711 
	#R_RISCV_COPY
 4

	)

3712 
	#R_RISCV_JUMP_SLOT
 5

	)

3713 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3714 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3715 
	#R_RISCV_TLS_DTPREL32
 8

	)

3716 
	#R_RISCV_TLS_DTPREL64
 9

	)

3717 
	#R_RISCV_TLS_TPREL32
 10

	)

3718 
	#R_RISCV_TLS_TPREL64
 11

	)

3722 
	#R_BPF_NONE
 0

	)

3723 
	#R_BPF_MAP_FD
 1

	)

3727 
	#R_METAG_HIADDR16
 0

	)

3728 
	#R_METAG_LOADDR16
 1

	)

3729 
	#R_METAG_ADDR32
 2

	)

3730 
	#R_METAG_NONE
 3

	)

3731 
	#R_METAG_RELBRANCH
 4

	)

3732 
	#R_METAG_GETSETOFF
 5

	)

3735 
	#R_METAG_REG32OP1
 6

	)

3736 
	#R_METAG_REG32OP2
 7

	)

3737 
	#R_METAG_REG32OP3
 8

	)

3738 
	#R_METAG_REG16OP1
 9

	)

3739 
	#R_METAG_REG16OP2
 10

	)

3740 
	#R_METAG_REG16OP3
 11

	)

3741 
	#R_METAG_REG32OP4
 12

	)

3743 
	#R_METAG_HIOG
 13

	)

3744 
	#R_METAG_LOOG
 14

	)

3746 
	#R_METAG_REL8
 15

	)

3747 
	#R_METAG_REL16
 16

	)

3750 
	#R_METAG_GNU_VTINHERIT
 30

	)

3751 
	#R_METAG_GNU_VTENTRY
 31

	)

3754 
	#R_METAG_HI16_GOTOFF
 32

	)

3755 
	#R_METAG_LO16_GOTOFF
 33

	)

3756 
	#R_METAG_GETSET_GOTOFF
 34

	)

3757 
	#R_METAG_GETSET_GOT
 35

	)

3758 
	#R_METAG_HI16_GOTPC
 36

	)

3759 
	#R_METAG_LO16_GOTPC
 37

	)

3760 
	#R_METAG_HI16_PLT
 38

	)

3761 
	#R_METAG_LO16_PLT
 39

	)

3762 
	#R_METAG_RELBRANCH_PLT
 40

	)

3763 
	#R_METAG_GOTOFF
 41

	)

3764 
	#R_METAG_PLT
 42

	)

3765 
	#R_METAG_COPY
 43

	)

3766 
	#R_METAG_JMP_SLOT
 44

	)

3767 
	#R_METAG_RELATIVE
 45

	)

3768 
	#R_METAG_GLOB_DAT
 46

	)

3771 
	#R_METAG_TLS_GD
 47

	)

3772 
	#R_METAG_TLS_LDM
 48

	)

3773 
	#R_METAG_TLS_LDO_HI16
 49

	)

3774 
	#R_METAG_TLS_LDO_LO16
 50

	)

3775 
	#R_METAG_TLS_LDO
 51

	)

3776 
	#R_METAG_TLS_IE
 52

	)

3777 
	#R_METAG_TLS_IENONPIC
 53

	)

3778 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

3779 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

3780 
	#R_METAG_TLS_TPOFF
 56

	)

3781 
	#R_METAG_TLS_DTPMOD
 57

	)

3782 
	#R_METAG_TLS_DTPOFF
 58

	)

3783 
	#R_METAG_TLS_LE
 59

	)

3784 
	#R_METAG_TLS_LE_HI16
 60

	)

3785 
	#R_METAG_TLS_LE_LO16
 61

	)

3787 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

50 #i‚de‡
__îr‹_t_deföed


51 
	#__îr‹_t_deföed
 1

	)

52 
	tîr‹_t
;

57 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 
f˙é
 (
__fd
, 
__cmd
, ...);

156 #i‚de‡
__USE_FILE_OFFSET64


157 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__REDIRECT


160 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

161 
	`__n⁄nuŒ
 ((1));

163 
	#›í
 
›í64


	)

166 #ifde‡
__USE_LARGEFILE64


167 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

170 #ifde‡
__USE_ATFILE


180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

184 #ifde‡
__REDIRECT


185 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

186 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

188 
	#›í©
 
›í©64


	)

191 #ifde‡
__USE_LARGEFILE64


192 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

193 
	`__n⁄nuŒ
 ((2));

202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__REDIRECT


206 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

207 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

209 
	#¸ót
 
¸ót64


	)

212 #ifde‡
__USE_LARGEFILE64


213 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

216 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

217 && !
deföed
 
__USE_POSIX
))

226 
	#F_ULOCK
 0

	)

227 
	#F_LOCK
 1

	)

228 
	#F_TLOCK
 2

	)

229 
	#F_TEST
 3

	)

231 #i‚de‡
__USE_FILE_OFFSET64


232 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

234 #ifde‡
__REDIRECT


235 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

237 
	#lockf
 
lockf64


	)

240 #ifde‡
__USE_LARGEFILE64


241 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

245 #ifde‡
__USE_XOPEN2K


248 #i‚de‡
__USE_FILE_OFFSET64


249 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

250 
__advi£
Ë
__THROW
;

252 #ifde‡
__REDIRECT_NTH


253 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

254 
__off64_t
 
__Àn
, 
__advi£
),

255 
posix_Ádvi£64
);

257 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

260 #ifde‡
__USE_LARGEFILE64


261 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

262 
__advi£
Ë
__THROW
;

270 #i‚de‡
__USE_FILE_OFFSET64


271 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

273 #ifde‡
__REDIRECT


274 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

275 
__off64_t
 
__Àn
),

276 
posix_ÁŒoˇã64
);

278 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

281 #ifde‡
__USE_LARGEFILE64


282 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

288 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

289 && 
deföed
 
__va_¨g_∑ck_Àn


290 
	~<bôs/f˙é2.h
>

293 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

181 #ifdef 
__USE_POSIX


183 
	~<bôs/posix1_lim.h
>

186 #ifdef 
__USE_POSIX2


187 
	~<bôs/posix2_lim.h
>

190 #ifdef 
__USE_XOPEN


191 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 #i‡
deföed
 
log
 && deföed 
__GNUC__


30 #w¨nög 
A
 
ma¸o
 
ˇŒed
 
log
 
was
 
Æªady
 
deföed
 
whí
 <
m©h
.
h
> wa†
ö˛uded
.

31 #w¨nög 
This
 
wûl
 
ˇu£
 
compû©i⁄
 
¥obÀms
.

34 
	g__BEGIN_DECLS


37 
	~<bôs/ty≥s.h
>

40 
	~<bôs/m©h-ve˘‹.h
>

43 
	~<bôs/Êﬂä.h
>

47 #i‡
__GNUC_PREREQ
 (3, 3)

48 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
 ())

	)

55 
	#HUGE_VAL
 1e10000

	)

57 #ifde‡
__USE_ISOC99


58 #i‡
__GNUC_PREREQ
 (3, 3)

59 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
 ())

	)

60 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
 ())

	)

62 
	#HUGE_VALF
 1e10000f

	)

63 
	#HUGE_VALL
 1e10000L

	)

66 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

67 
	#HUGE_VAL_F16
 (
	`__buûtö_huge_vÆf16
 ())

	)

69 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

70 
	#HUGE_VAL_F32
 (
	`__buûtö_huge_vÆf32
 ())

	)

72 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

73 
	#HUGE_VAL_F64
 (
	`__buûtö_huge_vÆf64
 ())

	)

75 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

76 
	#HUGE_VAL_F128
 (
	`__buûtö_huge_vÆf128
 ())

	)

78 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

79 
	#HUGE_VAL_F32X
 (
	`__buûtö_huge_vÆf32x
 ())

	)

81 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

82 
	#HUGE_VAL_F64X
 (
	`__buûtö_huge_vÆf64x
 ())

	)

84 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

85 
	#HUGE_VAL_F128X
 (
	`__buûtö_huge_vÆf128x
 ())

	)

88 #ifde‡
__USE_ISOC99


90 #i‡
__GNUC_PREREQ
 (3, 3)

91 
	#INFINITY
 (
	`__buûtö_öff
 ())

	)

93 
	#INFINITY
 
HUGE_VALF


	)

97 #i‡
__GNUC_PREREQ
 (3, 3)

98 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

103 
	#NAN
 (0.0‡/ 0.0f)

	)

107 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

109 #i‡
__GNUC_PREREQ
 (3, 3)

110 
	#SNANF
 (
	`__buûtö_«nsf
 (""))

	)

111 
	#SNAN
 (
	`__buûtö_«ns
 (""))

	)

112 
	#SNANL
 (
	`__buûtö_«n¶
 (""))

	)

115 #i‡
__HAVE_FLOAT16
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

116 
	#SNANF16
 (
	`__buûtö_«nsf16
 (""))

	)

118 #i‡
__HAVE_FLOAT32
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

119 
	#SNANF32
 (
	`__buûtö_«nsf32
 (""))

	)

121 #i‡
__HAVE_FLOAT64
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

122 
	#SNANF64
 (
	`__buûtö_«nsf64
 (""))

	)

124 #i‡
__HAVE_FLOAT128
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

125 
	#SNANF128
 (
	`__buûtö_«nsf128
 (""))

	)

127 #i‡
__HAVE_FLOAT32X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

128 
	#SNANF32X
 (
	`__buûtö_«nsf32x
 (""))

	)

130 #i‡
__HAVE_FLOAT64X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

131 
	#SNANF64X
 (
	`__buûtö_«nsf64x
 (""))

	)

133 #i‡
__HAVE_FLOAT128X
 && 
__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
	#SNANF128X
 (
	`__buûtö_«nsf128x
 (""))

	)

138 
	~<bôs/Êt-evÆ-mëhod.h
>

140 #ifde‡
__USE_ISOC99


148 #i‡
__GLIBC_FLT_EVAL_METHOD
 == 0 || __GLIBC_FLT_EVAL_METHOD == 16

149 
	tÊﬂt_t
;

150 
	tdoubÀ_t
;

151 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 1

152 
	tÊﬂt_t
;

153 
	tdoubÀ_t
;

154 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 2

155 
	tÊﬂt_t
;

156 
	tdoubÀ_t
;

157 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 32

158 
_Flﬂt32
 
	tÊﬂt_t
;

159 
	tdoubÀ_t
;

160 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 33

161 
_Flﬂt32x
 
	tÊﬂt_t
;

162 
_Flﬂt32x
 
	tdoubÀ_t
;

163 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 64

164 
_Flﬂt64
 
	tÊﬂt_t
;

165 
_Flﬂt64
 
	tdoubÀ_t
;

166 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 65

167 
_Flﬂt64x
 
	tÊﬂt_t
;

168 
_Flﬂt64x
 
	tdoubÀ_t
;

169 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 128

170 
_Flﬂt128
 
	tÊﬂt_t
;

171 
_Flﬂt128
 
	tdoubÀ_t
;

172 #ñi‡
__GLIBC_FLT_EVAL_METHOD
 == 129

173 
_Flﬂt128x
 
	tÊﬂt_t
;

174 
_Flﬂt128x
 
	tdoubÀ_t
;

190 
	~<bôs/Â-logb.h
>

191 #ifde‡
__USE_ISOC99


192 #i‡
__FP_LOGB0_IS_MIN


193 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

195 
	#FP_ILOGB0
 (-2147483647)

	)

197 #i‡
__FP_LOGBNAN_IS_MIN


198 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

200 
	#FP_ILOGBNAN
 2147483647

	)

203 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

204 #i‡
__WORDSIZE
 == 32

205 
	#__FP_LONG_MAX
 0x7fffffffL

	)

207 
	#__FP_LONG_MAX
 0x7fffffffffffffffL

	)

209 #i‡
__FP_LOGB0_IS_MIN


210 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
 - 1)

	)

212 
	#FP_LLOGB0
 (-
__FP_LONG_MAX
)

	)

214 #i‡
__FP_LOGBNAN_IS_MIN


215 
	#FP_LLOGBNAN
 (-
__FP_LONG_MAX
 - 1)

	)

217 
	#FP_LLOGBNAN
 
__FP_LONG_MAX


	)

233 
	~<bôs/Â-Á°.h
>

235 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

239 
	mFP_INT_UPWARD
 =

240 
	#FP_INT_UPWARD
 0

	)

241 
FP_INT_UPWARD
,

242 
	mFP_INT_DOWNWARD
 =

243 
	#FP_INT_DOWNWARD
 1

	)

244 
FP_INT_DOWNWARD
,

245 
	mFP_INT_TOWARDZERO
 =

246 
	#FP_INT_TOWARDZERO
 2

	)

247 
FP_INT_TOWARDZERO
,

248 
	mFP_INT_TONEARESTFROMZERO
 =

249 
	#FP_INT_TONEARESTFROMZERO
 3

	)

250 
FP_INT_TONEARESTFROMZERO
,

251 
	mFP_INT_TONEAREST
 =

252 
	#FP_INT_TONEAREST
 4

	)

253 
FP_INT_TONEAREST
,

262 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

264 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

265 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

266 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

268 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

269 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

270 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

272 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

273 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

274 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

275 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

276 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

277 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

278 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

279 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

280 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

281 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

282 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

283 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

285 
	#_MdoubÀ_
 

	)

286 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

287 
	#__MATH_DECLARING_DOUBLE
 1

	)

288 
	#__MATH_DECLARING_FLOATN
 0

	)

289 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

290 
	~<bôs/m©hˇŒs.h
>

291 #unde‡
_MdoubÀ_


292 #unde‡
__MATH_PRECNAME


293 #unde‡
__MATH_DECLARING_DOUBLE


294 #unde‡
__MATH_DECLARING_FLOATN


296 #ifde‡
__USE_ISOC99


302 
	#_MdoubÀ_
 

	)

303 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

304 
	#__MATH_DECLARING_DOUBLE
 0

	)

305 
	#__MATH_DECLARING_FLOATN
 0

	)

306 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

307 
	~<bôs/m©hˇŒs.h
>

308 #unde‡
_MdoubÀ_


309 #unde‡
__MATH_PRECNAME


310 #unde‡
__MATH_DECLARING_DOUBLE


311 #unde‡
__MATH_DECLARING_FLOATN


313 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

314 || 
deföed
 
__LDBL_COMPAT
 \

315 || 
deföed
 
_LIBC_TEST


316 #ifde‡
__LDBL_COMPAT


318 #ifde‡
__USE_ISOC99


319 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

321 #ifde‡
__REDIRECT_NTH


322 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

323 
__∆dbl_√xâow¨df
)

324 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

326 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

327 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

328 (
__x
, 
__y
),

329 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

333 #unde‡
__MATHDECL_1


334 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

335 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

336 
¨gs
, 
Æüs
)

	)

337 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

338 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

344 
	#_MdoubÀ_
 

	)

345 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

346 
	#__MATH_DECLARING_DOUBLE
 0

	)

347 
	#__MATH_DECLARING_FLOATN
 0

	)

348 
	#__MATH_DECLARE_LDOUBLE
 1

	)

349 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

350 
	~<bôs/m©hˇŒs.h
>

351 #unde‡
_MdoubÀ_


352 #unde‡
__MATH_PRECNAME


353 #unde‡
__MATH_DECLARING_DOUBLE


354 #unde‡
__MATH_DECLARING_FLOATN


363 #i‡
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)

364 
	#_MdoubÀ_
 
_Flﬂt16


	)

365 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f16
##
	)
r

366 
	#__MATH_DECLARING_DOUBLE
 0

	)

367 
	#__MATH_DECLARING_FLOATN
 1

	)

368 #i‡
__HAVE_DISTINCT_FLOAT16


369 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

371 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

372 
	~<bôs/m©hˇŒs.h
>

374 #unde‡
_MdoubÀ_


375 #unde‡
__MATH_PRECNAME


376 #unde‡
__MATH_DECLARING_DOUBLE


377 #unde‡
__MATH_DECLARING_FLOATN


380 #i‡
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)

381 
	#_MdoubÀ_
 
_Flﬂt32


	)

382 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32
##
	)
r

383 
	#__MATH_DECLARING_DOUBLE
 0

	)

384 
	#__MATH_DECLARING_FLOATN
 1

	)

385 #i‡
__HAVE_DISTINCT_FLOAT32


386 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

388 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

389 
	~<bôs/m©hˇŒs.h
>

391 #unde‡
_MdoubÀ_


392 #unde‡
__MATH_PRECNAME


393 #unde‡
__MATH_DECLARING_DOUBLE


394 #unde‡
__MATH_DECLARING_FLOATN


397 #i‡
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)

398 
	#_MdoubÀ_
 
_Flﬂt64


	)

399 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64
##
	)
r

400 
	#__MATH_DECLARING_DOUBLE
 0

	)

401 
	#__MATH_DECLARING_FLOATN
 1

	)

402 #i‡
__HAVE_DISTINCT_FLOAT64


403 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

405 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

406 
	~<bôs/m©hˇŒs.h
>

408 #unde‡
_MdoubÀ_


409 #unde‡
__MATH_PRECNAME


410 #unde‡
__MATH_DECLARING_DOUBLE


411 #unde‡
__MATH_DECLARING_FLOATN


414 #i‡
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)

415 
	#_MdoubÀ_
 
_Flﬂt128


	)

416 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128
##
	)
r

417 
	#__MATH_DECLARING_DOUBLE
 0

	)

418 
	#__MATH_DECLARING_FLOATN
 1

	)

419 #i‡
__HAVE_DISTINCT_FLOAT128


420 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

422 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

423 
	~<bôs/m©hˇŒs.h
>

425 #unde‡
_MdoubÀ_


426 #unde‡
__MATH_PRECNAME


427 #unde‡
__MATH_DECLARING_DOUBLE


428 #unde‡
__MATH_DECLARING_FLOATN


431 #i‡
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)

432 
	#_MdoubÀ_
 
_Flﬂt32x


	)

433 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f32x
##
	)
r

434 
	#__MATH_DECLARING_DOUBLE
 0

	)

435 
	#__MATH_DECLARING_FLOATN
 1

	)

436 #i‡
__HAVE_DISTINCT_FLOAT32X


437 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

439 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

440 
	~<bôs/m©hˇŒs.h
>

442 #unde‡
_MdoubÀ_


443 #unde‡
__MATH_PRECNAME


444 #unde‡
__MATH_DECLARING_DOUBLE


445 #unde‡
__MATH_DECLARING_FLOATN


448 #i‡
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)

449 
	#_MdoubÀ_
 
_Flﬂt64x


	)

450 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f64x
##
	)
r

451 
	#__MATH_DECLARING_DOUBLE
 0

	)

452 
	#__MATH_DECLARING_FLOATN
 1

	)

453 #i‡
__HAVE_DISTINCT_FLOAT64X


454 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

456 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

457 
	~<bôs/m©hˇŒs.h
>

459 #unde‡
_MdoubÀ_


460 #unde‡
__MATH_PRECNAME


461 #unde‡
__MATH_DECLARING_DOUBLE


462 #unde‡
__MATH_DECLARING_FLOATN


465 #i‡
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)

466 
	#_MdoubÀ_
 
_Flﬂt128x


	)

467 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f128x
##
	)
r

468 
	#__MATH_DECLARING_DOUBLE
 0

	)

469 
	#__MATH_DECLARING_FLOATN
 1

	)

470 #i‡
__HAVE_DISTINCT_FLOAT128X


471 
	~<bôs/m©hˇŒs-hñ≥r-fun˘i⁄s.h
>

473 #i‡
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

474 
	~<bôs/m©hˇŒs.h
>

476 #unde‡
_MdoubÀ_


477 #unde‡
__MATH_PRECNAME


478 #unde‡
__MATH_DECLARING_DOUBLE


479 #unde‡
__MATH_DECLARING_FLOATN


482 #unde‡
__MATHDECL_1


483 #unde‡
__MATHDECL


484 #unde‡
__MATHCALL


487 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


489 
signgam
;

492 #i‡(
__HAVE_DISTINCT_FLOAT16
 \

493 || 
__HAVE_DISTINCT_FLOAT32
 \

494 || 
__HAVE_DISTINCT_FLOAT64
 \

495 || 
__HAVE_DISTINCT_FLOAT32X
 \

496 || 
__HAVE_DISTINCT_FLOAT64X
 \

497 || 
__HAVE_DISTINCT_FLOAT128X
)

510 #ifde‡
__NO_LONG_DOUBLE_MATH


511 #i‡
__HAVE_DISTINCT_FLOAT128


514 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

515 ( (
TG_ARG
Ë= (Ë? 
FUNC
 ## 
f
 
ARGS
 : FUNC ARGS)

	)

516 #ñi‡
__HAVE_DISTINCT_FLOAT128


517 #i‡
__HAVE_GENERIC_SELECTION


518 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT32


519 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
Ë
_Flﬂt32
: FUNC ## 
f
 ARGS,

	)

521 
	#__MATH_TG_F32
(
FUNC
, 
ARGS
)

	)

523 #i‡
__HAVE_FLOATN_NOT_TYPEDEF
 && 
__HAVE_FLOAT64X


524 #i‡
__HAVE_FLOAT64X_LONG_DOUBLE


525 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
l
 ARGS,

	)

527 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
Ë
_Flﬂt64x
: FUNC ## 
f128
 ARGS,

	)

530 
	#__MATH_TG_F64X
(
FUNC
, 
ARGS
)

	)

532 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

533 
	`_Gíîic
 ((
TG_ARG
), \

534 : 
FUNC
 ## 
f
 
ARGS
, \

535 
	`__MATH_TG_F32
 (
FUNC
, 
ARGS
) \

536 : 
FUNC
 
ARGS
, \

537 : 
FUNC
 ## 
l
 
ARGS
, \

538 
	`__MATH_TG_F64X
 (
FUNC
, 
ARGS
) \

539 
_Flﬂt128
: 
FUNC
 ## 
f128
 
ARGS
)

	)

541 #i‡
__HAVE_FLOATN_NOT_TYPEDEF


544 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

545 
__buûtö_choo£_ex¥
 \

546 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

547 
FUNC
 ## 
f
 
ARGS
, \

548 
__buûtö_choo£_ex¥
 \

549 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

550 
FUNC
 
ARGS
, \

551 
__buûtö_choo£_ex¥
 \

552 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
TG_ARG
), ), \

553 
FUNC
 ## 
l
 
ARGS
, \

554 
FUNC
 ## 
f128
 
ARGS
)))

	)

557 
	#__MATH_TG
(
TG_ARG
, 
FUNC
, 
ARGS
) \

558 ( (
TG_ARG
) ==  () \

559 ? 
FUNC
 ## 
f
 
ARGS
 \

560 :  (
TG_ARG
) ==  () \

561 ? 
FUNC
 
ARGS
 \

562 : 
FUNC
 ## 
l
 
ARGS
)

	)

566 #ifde‡
__USE_ISOC99


571 
FP_NAN
 =

572 
	#FP_NAN
 0

	)

573 
FP_NAN
,

574 
FP_INFINITE
 =

575 
	#FP_INFINITE
 1

	)

576 
FP_INFINITE
,

577 
FP_ZERO
 =

578 
	#FP_ZERO
 2

	)

579 
FP_ZERO
,

580 
FP_SUBNORMAL
 =

581 
	#FP_SUBNORMAL
 3

	)

582 
FP_SUBNORMAL
,

583 
FP_NORMAL
 =

584 
	#FP_NORMAL
 4

	)

585 
FP_NORMAL


593 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

594 && (!
deföed
 
__OPTIMIZE_SIZE__
 || deföed 
__˝lu•lus
)

601 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

602 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

604 
	#Â˛assify
(
x
Ë
	`__MATH_TG
 ((x), 
__Â˛assify
, (x))

	)

608 #i‡
	`__GNUC_PREREQ
 (6,0)

609 
	#signbô
(
x
Ë
	`__buûtö_signbô
 (x)

	)

610 #ñi‡
deföed
 
__˝lu•lus


618 
	#signbô
(
x
Ë
	`__buûtö_signbôl
 (x)

	)

619 #ñi‡
	`__GNUC_PREREQ
 (4,0)

620 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__buûtö_signbô
, (x))

	)

622 
	#signbô
(
x
Ë
	`__MATH_TG
 ((x), 
__signbô
, (x))

	)

626 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


627 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

629 
	#isföôe
(
x
Ë
	`__MATH_TG
 ((x), 
__föôe
, (x))

	)

633 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


634 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

636 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

641 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


642 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

644 
	#i¢™
(
x
Ë
	`__MATH_TG
 ((x), 
__i¢™
, (x))

	)

648 #i‡
__HAVE_DISTINCT_FLOAT128
 && !
	`__GNUC_PREREQ
 (7,0) \

649 && !
deföed
 
__SUPPORT_SNAN__
 && !deföed 
__˝lu•lus


655 
	#isöf
(
x
) \

656 (
	`__buûtö_ty≥s_com∑tibÀ_p
 (
	`__ty≥of
 (
x
), 
_Flﬂt128
) \

657 ? 
	`__isöff128
 (
x
Ë: 
	`__buûtö_isöf_sign
 (x))

	)

658 #ñi‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


659 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

661 
	#isöf
(
x
Ë
	`__MATH_TG
 ((x), 
__isöf
, (x))

	)

665 
	#MATH_ERRNO
 1

	)

666 
	#MATH_ERREXCEPT
 2

	)

673 #ifde‡
__FAST_MATH__


674 
	#m©h_îrh™dlög
 0

	)

675 #ñi‡
deföed
 
__NO_MATH_ERRNO__


676 
	#m©h_îrh™dlög
 (
MATH_ERREXCEPT
)

	)

678 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

683 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

684 
	~<bôs/isˇn⁄iˇl.h
>

687 #i‚de‡
__˝lu•lus


688 
	#issig«lög
(
x
Ë
	`__MATH_TG
 ((x), 
__issig«lög
, (x))

	)

697 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lögf
 (__val); }

698 
ölöe
 
	`issig«lög
 (
__vÆ
Ë{  
	`__issig«lög
 (__val); }

699 
ölöe
 

700 
	`issig«lög
 (
__vÆ
)

702 #ifde‡
__NO_LONG_DOUBLE_MATH


703  
	`__issig«lög
 (
__vÆ
);

705  
	`__issig«lögl
 (
__vÆ
);

708 #i‡
__HAVE_DISTINCT_FLOAT128


709 
ölöe
 
	`issig«lög
 (
_Flﬂt128
 
__vÆ
Ë{  
	`__issig«lögf128
 (__val); }

711 
	}
}

715 
	#issubn‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_SUBNORMAL
)

	)

718 #i‚de‡
__˝lu•lus


719 #ifde‡
__SUPPORT_SNAN__


720 
	#iszîo
(
x
Ë(
	`Â˛assify
 (xË=
FP_ZERO
)

	)

722 
	#iszîo
(
x
Ë(((
	`__ty≥of
 (x)Ë(x)Ë=0)

	)

726 #ifde‡
__SUPPORT_SNAN__


727 
ölöe
 

728 
iszîo
 (
__vÆ
)

730  
__Â˛assifyf
 (
__vÆ
Ë=
FP_ZERO
;

732 
ölöe
 

733 
iszîo
 (
__vÆ
)

735  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

737 
ölöe
 

738 
iszîo
 (
__vÆ
)

740 #ifde‡
__NO_LONG_DOUBLE_MATH


741  
__Â˛assify
 (
__vÆ
Ë=
FP_ZERO
;

743  
__Â˛assifyl
 (
__vÆ
Ë=
FP_ZERO
;

746 #i‡
__HAVE_DISTINCT_FLOAT128


747 
ölöe
 

748 
iszîo
 (
_Flﬂt128
 
__vÆ
)

750  
__Â˛assifyf128
 (
__vÆ
Ë=
FP_ZERO
;

754 
ãm∂©e
 <
˛ass
 
__T
> 
ölöe
 
boﬁ


755 
iszîo
 (
__T
 
__vÆ
)

757  
__vÆ
 == 0;

764 #ifde‡
__USE_XOPEN


766 
	#MAXFLOAT
 3.40282347e+38F

	)

771 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


772 
	#M_E
 2.7182818284590452354

	)

773 
	#M_LOG2E
 1.4426950408889634074

	)

774 
	#M_LOG10E
 0.43429448190325182765

	)

775 
	#M_LN2
 0.69314718055994530942

	)

776 
	#M_LN10
 2.30258509299404568402

	)

777 
	#M_PI
 3.14159265358979323846

	)

778 
	#M_PI_2
 1.57079632679489661923

	)

779 
	#M_PI_4
 0.78539816339744830962

	)

780 
	#M_1_PI
 0.31830988618379067154

	)

781 
	#M_2_PI
 0.63661977236758134308

	)

782 
	#M_2_SQRTPI
 1.12837916709551257390

	)

783 
	#M_SQRT2
 1.41421356237309504880

	)

784 
	#M_SQRT1_2
 0.70710678118654752440

	)

790 #ifde‡
__USE_GNU


791 
	#M_El
 2.718281828459045235360287471352662498L

	)

792 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

793 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

794 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

795 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

796 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

797 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

798 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

799 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

800 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

801 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

802 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

803 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

806 #i‡
__HAVE_FLOAT16
 && 
deföed
 
__USE_GNU


807 
	#M_Ef16
 
	`__f16
 (2.718281828459045235360287471352662498Ë

	)

808 
	#M_LOG2Ef16
 
	`__f16
 (1.442695040888963407359924681001892137Ë

	)

809 
	#M_LOG10Ef16
 
	`__f16
 (0.434294481903251827651128918916605082Ë

	)

810 
	#M_LN2f16
 
	`__f16
 (0.693147180559945309417232121458176568Ë

	)

811 
	#M_LN10f16
 
	`__f16
 (2.302585092994045684017991454684364208Ë

	)

812 
	#M_PIf16
 
	`__f16
 (3.141592653589793238462643383279502884Ë

	)

813 
	#M_PI_2f16
 
	`__f16
 (1.570796326794896619231321691639751442Ë

	)

814 
	#M_PI_4f16
 
	`__f16
 (0.785398163397448309615660845819875721Ë

	)

815 
	#M_1_PIf16
 
	`__f16
 (0.318309886183790671537767526745028724Ë

	)

816 
	#M_2_PIf16
 
	`__f16
 (0.636619772367581343075535053490057448Ë

	)

817 
	#M_2_SQRTPIf16
 
	`__f16
 (1.128379167095512573896158903121545172Ë

	)

818 
	#M_SQRT2f16
 
	`__f16
 (1.414213562373095048801688724209698079Ë

	)

819 
	#M_SQRT1_2f16
 
	`__f16
 (0.707106781186547524400844362104849039Ë

	)

822 #i‡
__HAVE_FLOAT32
 && 
deföed
 
__USE_GNU


823 
	#M_Ef32
 
	`__f32
 (2.718281828459045235360287471352662498Ë

	)

824 
	#M_LOG2Ef32
 
	`__f32
 (1.442695040888963407359924681001892137Ë

	)

825 
	#M_LOG10Ef32
 
	`__f32
 (0.434294481903251827651128918916605082Ë

	)

826 
	#M_LN2f32
 
	`__f32
 (0.693147180559945309417232121458176568Ë

	)

827 
	#M_LN10f32
 
	`__f32
 (2.302585092994045684017991454684364208Ë

	)

828 
	#M_PIf32
 
	`__f32
 (3.141592653589793238462643383279502884Ë

	)

829 
	#M_PI_2f32
 
	`__f32
 (1.570796326794896619231321691639751442Ë

	)

830 
	#M_PI_4f32
 
	`__f32
 (0.785398163397448309615660845819875721Ë

	)

831 
	#M_1_PIf32
 
	`__f32
 (0.318309886183790671537767526745028724Ë

	)

832 
	#M_2_PIf32
 
	`__f32
 (0.636619772367581343075535053490057448Ë

	)

833 
	#M_2_SQRTPIf32
 
	`__f32
 (1.128379167095512573896158903121545172Ë

	)

834 
	#M_SQRT2f32
 
	`__f32
 (1.414213562373095048801688724209698079Ë

	)

835 
	#M_SQRT1_2f32
 
	`__f32
 (0.707106781186547524400844362104849039Ë

	)

838 #i‡
__HAVE_FLOAT64
 && 
deföed
 
__USE_GNU


839 
	#M_Ef64
 
	`__f64
 (2.718281828459045235360287471352662498Ë

	)

840 
	#M_LOG2Ef64
 
	`__f64
 (1.442695040888963407359924681001892137Ë

	)

841 
	#M_LOG10Ef64
 
	`__f64
 (0.434294481903251827651128918916605082Ë

	)

842 
	#M_LN2f64
 
	`__f64
 (0.693147180559945309417232121458176568Ë

	)

843 
	#M_LN10f64
 
	`__f64
 (2.302585092994045684017991454684364208Ë

	)

844 
	#M_PIf64
 
	`__f64
 (3.141592653589793238462643383279502884Ë

	)

845 
	#M_PI_2f64
 
	`__f64
 (1.570796326794896619231321691639751442Ë

	)

846 
	#M_PI_4f64
 
	`__f64
 (0.785398163397448309615660845819875721Ë

	)

847 
	#M_1_PIf64
 
	`__f64
 (0.318309886183790671537767526745028724Ë

	)

848 
	#M_2_PIf64
 
	`__f64
 (0.636619772367581343075535053490057448Ë

	)

849 
	#M_2_SQRTPIf64
 
	`__f64
 (1.128379167095512573896158903121545172Ë

	)

850 
	#M_SQRT2f64
 
	`__f64
 (1.414213562373095048801688724209698079Ë

	)

851 
	#M_SQRT1_2f64
 
	`__f64
 (0.707106781186547524400844362104849039Ë

	)

854 #i‡
__HAVE_FLOAT128
 && 
deföed
 
__USE_GNU


855 
	#M_Ef128
 
	`__f128
 (2.718281828459045235360287471352662498Ë

	)

856 
	#M_LOG2Ef128
 
	`__f128
 (1.442695040888963407359924681001892137Ë

	)

857 
	#M_LOG10Ef128
 
	`__f128
 (0.434294481903251827651128918916605082Ë

	)

858 
	#M_LN2f128
 
	`__f128
 (0.693147180559945309417232121458176568Ë

	)

859 
	#M_LN10f128
 
	`__f128
 (2.302585092994045684017991454684364208Ë

	)

860 
	#M_PIf128
 
	`__f128
 (3.141592653589793238462643383279502884Ë

	)

861 
	#M_PI_2f128
 
	`__f128
 (1.570796326794896619231321691639751442Ë

	)

862 
	#M_PI_4f128
 
	`__f128
 (0.785398163397448309615660845819875721Ë

	)

863 
	#M_1_PIf128
 
	`__f128
 (0.318309886183790671537767526745028724Ë

	)

864 
	#M_2_PIf128
 
	`__f128
 (0.636619772367581343075535053490057448Ë

	)

865 
	#M_2_SQRTPIf128
 
	`__f128
 (1.128379167095512573896158903121545172Ë

	)

866 
	#M_SQRT2f128
 
	`__f128
 (1.414213562373095048801688724209698079Ë

	)

867 
	#M_SQRT1_2f128
 
	`__f128
 (0.707106781186547524400844362104849039Ë

	)

870 #i‡
__HAVE_FLOAT32X
 && 
deföed
 
__USE_GNU


871 
	#M_Ef32x
 
	`__f32x
 (2.718281828459045235360287471352662498Ë

	)

872 
	#M_LOG2Ef32x
 
	`__f32x
 (1.442695040888963407359924681001892137Ë

	)

873 
	#M_LOG10Ef32x
 
	`__f32x
 (0.434294481903251827651128918916605082Ë

	)

874 
	#M_LN2f32x
 
	`__f32x
 (0.693147180559945309417232121458176568Ë

	)

875 
	#M_LN10f32x
 
	`__f32x
 (2.302585092994045684017991454684364208Ë

	)

876 
	#M_PIf32x
 
	`__f32x
 (3.141592653589793238462643383279502884Ë

	)

877 
	#M_PI_2f32x
 
	`__f32x
 (1.570796326794896619231321691639751442Ë

	)

878 
	#M_PI_4f32x
 
	`__f32x
 (0.785398163397448309615660845819875721Ë

	)

879 
	#M_1_PIf32x
 
	`__f32x
 (0.318309886183790671537767526745028724Ë

	)

880 
	#M_2_PIf32x
 
	`__f32x
 (0.636619772367581343075535053490057448Ë

	)

881 
	#M_2_SQRTPIf32x
 
	`__f32x
 (1.128379167095512573896158903121545172Ë

	)

882 
	#M_SQRT2f32x
 
	`__f32x
 (1.414213562373095048801688724209698079Ë

	)

883 
	#M_SQRT1_2f32x
 
	`__f32x
 (0.707106781186547524400844362104849039Ë

	)

886 #i‡
__HAVE_FLOAT64X
 && 
deföed
 
__USE_GNU


887 
	#M_Ef64x
 
	`__f64x
 (2.718281828459045235360287471352662498Ë

	)

888 
	#M_LOG2Ef64x
 
	`__f64x
 (1.442695040888963407359924681001892137Ë

	)

889 
	#M_LOG10Ef64x
 
	`__f64x
 (0.434294481903251827651128918916605082Ë

	)

890 
	#M_LN2f64x
 
	`__f64x
 (0.693147180559945309417232121458176568Ë

	)

891 
	#M_LN10f64x
 
	`__f64x
 (2.302585092994045684017991454684364208Ë

	)

892 
	#M_PIf64x
 
	`__f64x
 (3.141592653589793238462643383279502884Ë

	)

893 
	#M_PI_2f64x
 
	`__f64x
 (1.570796326794896619231321691639751442Ë

	)

894 
	#M_PI_4f64x
 
	`__f64x
 (0.785398163397448309615660845819875721Ë

	)

895 
	#M_1_PIf64x
 
	`__f64x
 (0.318309886183790671537767526745028724Ë

	)

896 
	#M_2_PIf64x
 
	`__f64x
 (0.636619772367581343075535053490057448Ë

	)

897 
	#M_2_SQRTPIf64x
 
	`__f64x
 (1.128379167095512573896158903121545172Ë

	)

898 
	#M_SQRT2f64x
 
	`__f64x
 (1.414213562373095048801688724209698079Ë

	)

899 
	#M_SQRT1_2f64x
 
	`__f64x
 (0.707106781186547524400844362104849039Ë

	)

902 #i‡
__HAVE_FLOAT128X
 && 
deföed
 
__USE_GNU


909 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


910 
	#__NO_MATH_INLINES
 1

	)

913 #ifde‡
__USE_ISOC99


914 #i‡
__GNUC_PREREQ
 (3, 1)

921 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

922 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

923 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

924 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

925 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

926 
	#isun‹dîed
(
x
, 
y
Ë
	`__buûtö_isun‹dîed
(x, y)

	)

928 
	#isgª©î
(
x
, 
y
) \

929 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

930 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; }))

	)

931 
	#isgª©îequÆ
(
x
, 
y
) \

932 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

933 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

934 
	#i¶ess
(
x
, 
y
) \

935 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

936 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

937 
	#i¶es£quÆ
(
x
, 
y
) \

938 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

939 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

940 
	#i¶essgª©î
(
x
, 
y
) \

941 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__x
 = (x); __ty≥of__ (
y
Ë
__y
 = (y); \

942 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x !__y; }))

	)

944 
	#isun‹dîed
(
x
, 
y
) \

945 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of__
 (
x
Ë
__u
 = (x); __ty≥of__ (
y
Ë
__v
 = (y); \

946 
__u
 !
__v
 && (__u !__u || __v !__v); }))

	)

951 #ifde‡
__USE_EXTERN_INLINES


952 
	~<bôs/m©hölöe.h
>

957 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

960 
	#_MdoubÀ_
 

	)

961 
	#__MATH_DECLARING_DOUBLE
 1

	)

962 
	#__MATH_DECLARING_FLOATN
 0

	)

963 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

964 
fun˘i⁄
 ## 
ªíå™t


	)

965 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

966 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

967 
	~<bôs/m©h-föôe.h
>

968 #unde‡
_MdoubÀ_


969 #unde‡
__MATH_DECLARING_DOUBLE


970 #unde‡
__MATH_DECLARING_FLOATN


971 #unde‡
__REDIRFROM_X


972 #unde‡
__REDIRTO_X


976 #ifde‡
__USE_ISOC99


979 
	#_MdoubÀ_
 

	)

980 
	#__MATH_DECLARING_DOUBLE
 0

	)

981 
	#__MATH_DECLARING_FLOATN
 0

	)

982 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

983 
fun˘i⁄
 ## 
f
 ## 
ªíå™t


	)

984 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

985 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

986 
	~<bôs/m©h-föôe.h
>

987 #unde‡
_MdoubÀ_


988 #unde‡
__MATH_DECLARING_DOUBLE


989 #unde‡
__MATH_DECLARING_FLOATN


990 #unde‡
__REDIRFROM_X


991 #unde‡
__REDIRTO_X


994 #ifde‡
__MATH_DECLARE_LDOUBLE


995 
	#_MdoubÀ_
 

	)

996 
	#__MATH_DECLARING_DOUBLE
 0

	)

997 
	#__MATH_DECLARING_FLOATN
 0

	)

998 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

999 
fun˘i⁄
 ## 
l
 ## 
ªíå™t


	)

1000 #ifde‡
__NO_LONG_DOUBLE_MATH


1001 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1002 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1004 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1005 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1007 
	~<bôs/m©h-föôe.h
>

1008 #unde‡
_MdoubÀ_


1009 #unde‡
__MATH_DECLARING_DOUBLE


1010 #unde‡
__MATH_DECLARING_FLOATN


1011 #unde‡
__REDIRFROM_X


1012 #unde‡
__REDIRTO_X


1019 #i‡(
__HAVE_DISTINCT_FLOAT16
 || (
__HAVE_FLOAT16
 && !
deföed
 
_LIBC
)) \

1020 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1021 
	#_MdoubÀ_
 
_Flﬂt16


	)

1022 
	#__MATH_DECLARING_DOUBLE
 0

	)

1023 
	#__MATH_DECLARING_FLOATN
 1

	)

1024 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1025 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t


	)

1026 #i‡
__HAVE_DISTINCT_FLOAT16


1027 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1028 
__
 ## 
fun˘i⁄
 ## 
f16
 ## 
ªíå™t
 ## 
_föôe


	)

1032 
	~<bôs/m©h-föôe.h
>

1033 #unde‡
_MdoubÀ_


1034 #unde‡
__MATH_DECLARING_DOUBLE


1035 #unde‡
__MATH_DECLARING_FLOATN


1036 #unde‡
__REDIRFROM_X


1037 #unde‡
__REDIRTO_X


1040 #i‡(
__HAVE_DISTINCT_FLOAT32
 || (
__HAVE_FLOAT32
 && !
deföed
 
_LIBC
)) \

1041 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1042 
	#_MdoubÀ_
 
_Flﬂt32


	)

1043 
	#__MATH_DECLARING_DOUBLE
 0

	)

1044 
	#__MATH_DECLARING_FLOATN
 1

	)

1045 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1046 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t


	)

1047 #i‡
__HAVE_DISTINCT_FLOAT32


1048 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1049 
__
 ## 
fun˘i⁄
 ## 
f32
 ## 
ªíå™t
 ## 
_föôe


	)

1051 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1052 
__
 ## 
fun˘i⁄
 ## 
f
 ## 
ªíå™t
 ## 
_föôe


	)

1054 
	~<bôs/m©h-föôe.h
>

1055 #unde‡
_MdoubÀ_


1056 #unde‡
__MATH_DECLARING_DOUBLE


1057 #unde‡
__MATH_DECLARING_FLOATN


1058 #unde‡
__REDIRFROM_X


1059 #unde‡
__REDIRTO_X


1062 #i‡(
__HAVE_DISTINCT_FLOAT64
 || (
__HAVE_FLOAT64
 && !
deföed
 
_LIBC
)) \

1063 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1064 
	#_MdoubÀ_
 
_Flﬂt64


	)

1065 
	#__MATH_DECLARING_DOUBLE
 0

	)

1066 
	#__MATH_DECLARING_FLOATN
 1

	)

1067 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1068 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t


	)

1069 #i‡
__HAVE_DISTINCT_FLOAT64


1070 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1071 
__
 ## 
fun˘i⁄
 ## 
f64
 ## 
ªíå™t
 ## 
_föôe


	)

1073 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1074 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1076 
	~<bôs/m©h-föôe.h
>

1077 #unde‡
_MdoubÀ_


1078 #unde‡
__MATH_DECLARING_DOUBLE


1079 #unde‡
__MATH_DECLARING_FLOATN


1080 #unde‡
__REDIRFROM_X


1081 #unde‡
__REDIRTO_X


1084 #i‡(
__HAVE_DISTINCT_FLOAT128
 || (
__HAVE_FLOAT128
 && !
deföed
 
_LIBC
)) \

1085 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1086 
	#_MdoubÀ_
 
_Flﬂt128


	)

1087 
	#__MATH_DECLARING_DOUBLE
 0

	)

1088 
	#__MATH_DECLARING_FLOATN
 1

	)

1089 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1090 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t


	)

1091 #i‡
__HAVE_DISTINCT_FLOAT128


1092 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1093 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1095 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1096 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1098 
	~<bôs/m©h-föôe.h
>

1099 #unde‡
_MdoubÀ_


1100 #unde‡
__MATH_DECLARING_DOUBLE


1101 #unde‡
__MATH_DECLARING_FLOATN


1102 #unde‡
__REDIRFROM_X


1103 #unde‡
__REDIRTO_X


1106 #i‡(
__HAVE_DISTINCT_FLOAT32X
 || (
__HAVE_FLOAT32X
 && !
deföed
 
_LIBC
)) \

1107 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1108 
	#_MdoubÀ_
 
_Flﬂt32x


	)

1109 
	#__MATH_DECLARING_DOUBLE
 0

	)

1110 
	#__MATH_DECLARING_FLOATN
 1

	)

1111 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1112 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t


	)

1113 #i‡
__HAVE_DISTINCT_FLOAT32X


1114 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1115 
__
 ## 
fun˘i⁄
 ## 
f32x
 ## 
ªíå™t
 ## 
_föôe


	)

1117 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1118 
__
 ## 
fun˘i⁄
 ## 
ªíå™t
 ## 
_föôe


	)

1120 
	~<bôs/m©h-föôe.h
>

1121 #unde‡
_MdoubÀ_


1122 #unde‡
__MATH_DECLARING_DOUBLE


1123 #unde‡
__MATH_DECLARING_FLOATN


1124 #unde‡
__REDIRFROM_X


1125 #unde‡
__REDIRTO_X


1128 #i‡(
__HAVE_DISTINCT_FLOAT64X
 || (
__HAVE_FLOAT64X
 && !
deföed
 
_LIBC
)) \

1129 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1130 
	#_MdoubÀ_
 
_Flﬂt64x


	)

1131 
	#__MATH_DECLARING_DOUBLE
 0

	)

1132 
	#__MATH_DECLARING_FLOATN
 1

	)

1133 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1134 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t


	)

1135 #i‡
__HAVE_DISTINCT_FLOAT64X


1136 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1137 
__
 ## 
fun˘i⁄
 ## 
f64x
 ## 
ªíå™t
 ## 
_föôe


	)

1138 #ñi‡
__HAVE_FLOAT64X_LONG_DOUBLE


1139 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1140 
__
 ## 
fun˘i⁄
 ## 
l
 ## 
ªíå™t
 ## 
_föôe


	)

1142 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1143 
__
 ## 
fun˘i⁄
 ## 
f128
 ## 
ªíå™t
 ## 
_föôe


	)

1145 
	~<bôs/m©h-föôe.h
>

1146 #unde‡
_MdoubÀ_


1147 #unde‡
__MATH_DECLARING_DOUBLE


1148 #unde‡
__MATH_DECLARING_FLOATN


1149 #unde‡
__REDIRFROM_X


1150 #unde‡
__REDIRTO_X


1153 #i‡(
__HAVE_DISTINCT_FLOAT128X
 || (
__HAVE_FLOAT128X
 && !
deföed
 
_LIBC
)) \

1154 && 
	$__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

1155 
	#_MdoubÀ_
 
_Flﬂt128x


	)

1156 
	#__MATH_DECLARING_DOUBLE
 0

	)

1157 
	#__MATH_DECLARING_FLOATN
 1

	)

1158 
	#__REDIRFROM_X
(
fun˘i⁄
, 
ªíå™t
) \

1159 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t


	)

1160 #i‡
__HAVE_DISTINCT_FLOAT128X


1161 
	#__REDIRTO_X
(
fun˘i⁄
, 
ªíå™t
) \

1162 
__
 ## 
fun˘i⁄
 ## 
f128x
 ## 
ªíå™t
 ## 
_föôe


	)

1166 
	~<bôs/m©h-föôe.h
>

1167 #unde‡
_MdoubÀ_


1168 #unde‡
__MATH_DECLARING_DOUBLE


1169 #unde‡
__MATH_DECLARING_FLOATN


1170 #unde‡
__REDIRFROM_X


1171 #unde‡
__REDIRTO_X


1176 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

1179 #i‡
__FLT_EVAL_METHOD__
 == 2 || __FLT_EVAL_METHOD__ > 64

1180 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0L)

	)

1181 #ñi‡
__FLT_EVAL_METHOD__
 == 1 || __FLT_EVAL_METHOD__ > 32

1182 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0)

	)

1183 #ñi‡
__FLT_EVAL_METHOD__
 == 0 || __FLT_EVAL_METHOD__ == 32

1184 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (yË+ 0.0f)

	)

1186 
	#__MATH_EVAL_FMT2
(
x
, 
y
Ë((xË+ (y))

	)

1191 #i‡!
deföed
 
__˝lu•lus
 || (__˝lu•lu†< 201103L && !deföed 
__GNUC__
)

1192 
	#i£qsig
(
x
, 
y
) \

1193 
	`__MATH_TG
 (
	`__MATH_EVAL_FMT2
 (
x
, 
y
), 
__i£qsig
, ((x), (y)))

	)

1206 
ãm∂©e
<
ty≥«me
> 
__i£qsig_ty≥
;

1208 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1210 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1212  
	`__i£qsigf
 (
__x
, 
__y
);

1216 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1218 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1220  
	`__i£qsig
 (
__x
, 
__y
);

1224 
ãm∂©e
<> 
__i£qsig_ty≥
<>

1226 
	`__ˇŒ
 (
__x
, 
__y
Ë
	`throw
 ()

1228 #i‚de‡
__NO_LONG_DOUBLE_MATH


1229  
	`__i£qsigl
 (
__x
, 
__y
);

1231  
	`__i£qsig
 (
__x
, 
__y
);

1236 #i‡
__HAVE_DISTINCT_FLOAT128


1237 
ãm∂©e
<> 
__i£qsig_ty≥
<
_Flﬂt128
>

1239 
	`__ˇŒ
 (
_Flﬂt128
 
__x
, _Flﬂt128 
__y
Ë
	`throw
 ()

1241  
	`__i£qsigf128
 (
__x
, 
__y
);

1246 
ãm∂©e
<
ty≥«me
 
_T1
,Åy≥«mê
_T2
>

1247 
ölöe
 

1248 
	`i£qsig
 (
_T1
 
__x
, 
_T2
 
__y
Ë
	`throw
 ()

1250 #i‡
__˝lu•lus
 >= 201103L

1251 
	`de˛ty≥
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1253 
	`__ty≥of
 (
	t__MATH_EVAL_FMT2
 (
	t__x
, 
	t__y
)Ë
	t_T3
;

1255  
__i£qsig_ty≥
<
_T3
>::
	`__ˇŒ
 (
__x
, 
__y
);

1258 
	}
}

1263 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<bôs/°döt-uöä.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‡!
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‡!
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 
uöt16_t
 
	m__u6_addr16
[8];

217 
uöt32_t
 
	m__u6_addr32
[4];

218 } 
	m__ö6_u
;

219 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

220 #ifde‡
__USE_MISC


221 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

222 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

227 c⁄° 
ö6_addr
 
ö6addr_™y
;

228 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

229 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

230 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

232 
	#INET_ADDRSTRLEN
 16

	)

233 
	#INET6_ADDRSTRLEN
 46

	)

237 
	ssockaddr_ö


239 
__SOCKADDR_COMMON
 (
sö_
);

240 
ö_p‹t_t
 
	msö_p‹t
;

241 
ö_addr
 
	msö_addr
;

244 
	msö_zîo
[ (
sockaddr
) -

245 
__SOCKADDR_COMMON_SIZE
 -

246  (
ö_p‹t_t
) -

247  (
ö_addr
)];

250 #i‡!
__USE_KERNEL_IPV6_DEFS


252 
	ssockaddr_ö6


254 
__SOCKADDR_COMMON
 (
sö6_
);

255 
ö_p‹t_t
 
	msö6_p‹t
;

256 
uöt32_t
 
	msö6_Êowöfo
;

257 
ö6_addr
 
	msö6_addr
;

258 
uöt32_t
 
	msö6_sc›e_id
;

262 #ifde‡
__USE_MISC


264 
	sù_mªq


267 
ö_addr
 
	mimr_mu…üddr
;

270 
ö_addr
 
	mimr_öãrÁ˚
;

273 
	sù_mªq_sour˚


276 
ö_addr
 
	mimr_mu…üddr
;

279 
ö_addr
 
	mimr_öãrÁ˚
;

282 
ö_addr
 
	mimr_sour˚addr
;

286 #i‡!
__USE_KERNEL_IPV6_DEFS


288 
	sùv6_mªq


291 
ö6_addr
 
	mùv6mr_mu…üddr
;

294 
	mùv6mr_öãrÁ˚
;

298 #ifde‡
__USE_MISC


300 
	sgroup_ªq


303 
uöt32_t
 
	mgr_öãrÁ˚
;

306 
sockaddr_°‹age
 
	mgr_group
;

309 
	sgroup_sour˚_ªq


312 
uöt32_t
 
	mg§_öãrÁ˚
;

315 
sockaddr_°‹age
 
	mg§_group
;

318 
sockaddr_°‹age
 
	mg§_sour˚
;

323 
	sù_msfûãr


326 
ö_addr
 
	mimsf_mu…üddr
;

329 
ö_addr
 
	mimsf_öãrÁ˚
;

332 
uöt32_t
 
	mimsf_fmode
;

335 
uöt32_t
 
	mimsf_num§c
;

337 
ö_addr
 
	mimsf_¶i°
[1];

340 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

341 -  (
ö_addr
) \

342 + (
num§c
Ë*  (
ö_addr
))

	)

344 
	sgroup_fûãr


347 
uöt32_t
 
	mgf_öãrÁ˚
;

350 
sockaddr_°‹age
 
	mgf_group
;

353 
uöt32_t
 
	mgf_fmode
;

356 
uöt32_t
 
	mgf_num§c
;

358 
sockaddr_°‹age
 
	mgf_¶i°
[1];

361 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

362 -  (
sockaddr_°‹age
) \

363 + ((
num§c
) \

364 *  (
sockaddr_°‹age
)))

	)

374 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

375 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

376 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

382 
	~<ídün.h
>

385 
	~<bôs/byãsw≠.h
>

386 
	~<bôs/uöä-idítôy.h
>

388 #ifde‡
__OPTIMIZE__


392 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


395 
	#¡ohl
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

396 
	#¡ohs
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

397 
	#ht⁄l
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

398 
	#ht⁄s
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

400 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


401 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

402 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

403 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

404 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

409 #ifde‡
__GNUC__


410 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (
__exãnsi⁄__
 \

412 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

413 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

414 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

415 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

416 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =0; 
	}
}))

	)

418 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

422 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

423 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

424 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

426 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

431 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 (
__a
->
__ö6_u
.
__u6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

436 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

437 (
__exãnsi⁄__
 \

438 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

439 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

440 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

441 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

443 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

444 (
__exãnsi⁄__
 \

445 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

446 
__a
->
__ö6_u
.
__u6_addr32
[0] == 0 \

447 && 
__a
->
__ö6_u
.
__u6_addr32
[1] == 0 \

448 && 
__a
->
__ö6_u
.
__u6_addr32
[2] == 0 \

449 && 
	`¡ohl
 (
__a
->
__ö6_u
.
__u6_addr32
[3]Ë> 1; }))

	)

451 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

455 
__a
->
__ö6_u
.
__u6_addr32
[0] =
__b
->__in6_u.__u6_addr32[0] \

456 && 
__a
->
__ö6_u
.
__u6_addr32
[1] =
__b
->__in6_u.__u6_addr32[1] \

457 && 
__a
->
__ö6_u
.
__u6_addr32
[2] =
__b
->__in6_u.__u6_addr32[2] \

458 && 
__a
->
__ö6_u
.
__u6_addr32
[3] =
__b
->__ö6_u.__u6_addr32[3]; }))

	)

460 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

461 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

466 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

467 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

472 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

473 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

474 =
	`ht⁄l
 (0x„800000))

	)

476 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

477 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

478 =
	`ht⁄l
 (0x„c00000))

	)

480 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

485 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

486 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

489 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

491 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

492 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

498 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

500 #ifde‡
__USE_MISC


502 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

505 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

506 
__THROW
;

510 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

514 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

518 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

522 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

526 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

531 #ifde‡
__USE_GNU


532 
cmsghdr
;

534 #i‡!
__USE_KERNEL_IPV6_DEFS


536 
	sö6_pktöfo


538 
ö6_addr
 
ùi6_addr
;

539 
ùi6_ifödex
;

543 
	sù6_mtuöfo


545 
sockaddr_ö6
 
ù6m_addr
;

546 
uöt32_t
 
ù6m_mtu
;

551 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

552 
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

554 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

555 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

556 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

557 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

558 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

559 
__mu…x
, 
__∂usy
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

562 
uöt8_t
 **
__çåp
)

563 
__THROW
 
__©åibuã_dïªˇãd__
;

564 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

565 
uöt8_t
 **
__çåp
, 
__ty≥
)

566 
__THROW
 
__©åibuã_dïªˇãd__
;

570 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

571 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

572 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

573 **
__d©abuÂ
Ë
__THROW
;

574 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

575 
__THROW
;

576 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

577 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

578 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

579 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

580 **
__d©abuÂ
Ë
__THROW
;

581 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

582 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

583 **
__d©abuÂ
Ë
__THROW
;

584 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

589 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

590 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

591 
__£gmíts
Ë
__THROW
;

592 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

593 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

594 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

595 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

596 
__THROW
;

602 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

603 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

604 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

605 
__THROW
;

608 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

609 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

610 
uöt32_t
 
__num§c
,

611 c⁄° 
ö_addr
 *
__¶i°
)

612 
__THROW
;

616 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

617 c⁄° 
sockaddr
 *
__group
,

618 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

619 
uöt32_t
 *
__num§c
,

620 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

623 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

624 c⁄° 
sockaddr
 *
__group
,

625 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

626 
uöt32_t
 
__num§c
,

627 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

630 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

64 
	#TCP_NOTSENT_LOWAT
 25

	)

66 
	#TCP_CC_INFO
 26

	)

68 
	#TCP_SAVE_SYN
 27

	)

70 
	#TCP_SAVED_SYN
 28

	)

72 
	#TCP_REPAIR_WINDOW
 29

	)

73 
	#TCP_FASTOPEN_CONNECT
 30

	)

74 
	#TCP_ULP
 31

	)

75 
	#TCP_MD5SIG_EXT
 32

	)

77 #ifde‡
__USE_MISC


78 
	~<sys/ty≥s.h
>

79 
	~<sys/sockë.h
>

80 
	~<°döt.h
>

82 
uöt32_t
 
	tt˝_£q
;

87 
	st˝hdr


89 
__exãnsi⁄__
 union

93 
uöt16_t
 
	mth_•‹t
;

94 
uöt16_t
 
	mth_dp‹t
;

95 
t˝_£q
 
	mth_£q
;

96 
t˝_£q
 
	mth_ack
;

97 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


98 
uöt8_t
 
	mth_x2
:4;

99 
uöt8_t
 
	mth_off
:4;

101 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


102 
uöt8_t
 
	mth_off
:4;

103 
uöt8_t
 
	mth_x2
:4;

105 
uöt8_t
 
	mth_Êags
;

106 
	#TH_FIN
 0x01

	)

107 
	#TH_SYN
 0x02

	)

108 
	#TH_RST
 0x04

	)

109 
	#TH_PUSH
 0x08

	)

110 
	#TH_ACK
 0x10

	)

111 
	#TH_URG
 0x20

	)

112 
uöt16_t
 
	mth_wö
;

113 
uöt16_t
 
	mth_sum
;

114 
uöt16_t
 
	mth_uΩ
;

118 
uöt16_t
 
	msour˚
;

119 
uöt16_t
 
	mde°
;

120 
uöt32_t
 
	m£q
;

121 
uöt32_t
 
	mack_£q
;

122 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


123 
uöt16_t
 
	mªs1
:4;

124 
uöt16_t
 
	mdoff
:4;

125 
uöt16_t
 
	mfö
:1;

126 
uöt16_t
 
	msyn
:1;

127 
uöt16_t
 
	mr°
:1;

128 
uöt16_t
 
	mpsh
:1;

129 
uöt16_t
 
	mack
:1;

130 
uöt16_t
 
	murg
:1;

131 
uöt16_t
 
	mªs2
:2;

132 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


133 
uöt16_t
 
	mdoff
:4;

134 
uöt16_t
 
	mªs1
:4;

135 
uöt16_t
 
	mªs2
:2;

136 
uöt16_t
 
	murg
:1;

137 
uöt16_t
 
	mack
:1;

138 
uöt16_t
 
	mpsh
:1;

139 
uöt16_t
 
	mr°
:1;

140 
uöt16_t
 
	msyn
:1;

141 
uöt16_t
 
	mfö
:1;

145 
uöt16_t
 
	mwödow
;

146 
uöt16_t
 
	mcheck
;

147 
uöt16_t
 
	murg_±r
;

154 
	mTCP_ESTABLISHED
 = 1,

155 
	mTCP_SYN_SENT
,

156 
	mTCP_SYN_RECV
,

157 
	mTCP_FIN_WAIT1
,

158 
	mTCP_FIN_WAIT2
,

159 
	mTCP_TIME_WAIT
,

160 
	mTCP_CLOSE
,

161 
	mTCP_CLOSE_WAIT
,

162 
	mTCP_LAST_ACK
,

163 
	mTCP_LISTEN
,

164 
	mTCP_CLOSING


167 
	#TCPOPT_EOL
 0

	)

168 
	#TCPOPT_NOP
 1

	)

169 
	#TCPOPT_MAXSEG
 2

	)

170 
	#TCPOLEN_MAXSEG
 4

	)

171 
	#TCPOPT_WINDOW
 3

	)

172 
	#TCPOLEN_WINDOW
 3

	)

173 
	#TCPOPT_SACK_PERMITTED
 4

	)

174 
	#TCPOLEN_SACK_PERMITTED
 2

	)

175 
	#TCPOPT_SACK
 5

	)

176 
	#TCPOPT_TIMESTAMP
 8

	)

177 
	#TCPOLEN_TIMESTAMP
 10

	)

178 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

180 
	#TCPOPT_TSTAMP_HDR
 \

181 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

189 
	#TCP_MSS
 512

	)

191 
	#TCP_MAXWIN
 65535

	)

193 
	#TCP_MAX_WINSHIFT
 14

	)

195 
	#SOL_TCP
 6

	)

198 
	#TCPI_OPT_TIMESTAMPS
 1

	)

199 
	#TCPI_OPT_SACK
 2

	)

200 
	#TCPI_OPT_WSCALE
 4

	)

201 
	#TCPI_OPT_ECN
 8

	)

202 
	#TCPI_OPT_ECN_SEEN
 16

	)

203 
	#TCPI_OPT_SYN_DATA
 32

	)

206 
	et˝_ˇ_°©e


208 
	mTCP_CA_O≥n
 = 0,

209 
	mTCP_CA_Dis‹dî
 = 1,

210 
	mTCP_CA_CWR
 = 2,

211 
	mTCP_CA_Recovîy
 = 3,

212 
	mTCP_CA_Loss
 = 4

215 
	st˝_öfo


217 
uöt8_t
 
	mt˝i_°©e
;

218 
uöt8_t
 
	mt˝i_ˇ_°©e
;

219 
uöt8_t
 
	mt˝i_ªå™smôs
;

220 
uöt8_t
 
	mt˝i_¥obes
;

221 
uöt8_t
 
	mt˝i_backoff
;

222 
uöt8_t
 
	mt˝i_›ti⁄s
;

223 
uöt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

225 
uöt32_t
 
	mt˝i_πo
;

226 
uöt32_t
 
	mt˝i_©o
;

227 
uöt32_t
 
	mt˝i_¢d_mss
;

228 
uöt32_t
 
	mt˝i_rcv_mss
;

230 
uöt32_t
 
	mt˝i_u«cked
;

231 
uöt32_t
 
	mt˝i_ßcked
;

232 
uöt32_t
 
	mt˝i_lo°
;

233 
uöt32_t
 
	mt˝i_ªå™s
;

234 
uöt32_t
 
	mt˝i_Áckës
;

237 
uöt32_t
 
	mt˝i_œ°_d©a_£¡
;

238 
uöt32_t
 
	mt˝i_œ°_ack_£¡
;

239 
uöt32_t
 
	mt˝i_œ°_d©a_ªcv
;

240 
uöt32_t
 
	mt˝i_œ°_ack_ªcv
;

243 
uöt32_t
 
	mt˝i_pmtu
;

244 
uöt32_t
 
	mt˝i_rcv_s°hªsh
;

245 
uöt32_t
 
	mt˝i_πt
;

246 
uöt32_t
 
	mt˝i_πtv¨
;

247 
uöt32_t
 
	mt˝i_¢d_s°hªsh
;

248 
uöt32_t
 
	mt˝i_¢d_cwnd
;

249 
uöt32_t
 
	mt˝i_advmss
;

250 
uöt32_t
 
	mt˝i_ª‹dîög
;

252 
uöt32_t
 
	mt˝i_rcv_πt
;

253 
uöt32_t
 
	mt˝i_rcv_•a˚
;

255 
uöt32_t
 
	mt˝i_tŸÆ_ªå™s
;

260 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

263 
	#TCP_MD5SIG_FLAG_PREFIX
 1

	)

265 
	st˝_md5sig


267 
sockaddr_°‹age
 
	mt˝m_addr
;

268 
uöt8_t
 
	mt˝m_Êags
;

269 
uöt8_t
 
	mt˝m_¥efixÀn
;

270 
uöt16_t
 
	mt˝m_keyÀn
;

271 
uöt32_t
 
	m__t˝m_∑d
;

272 
uöt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

276 
	st˝_ª∑ú_›t


278 
uöt32_t
 
	m›t_code
;

279 
uöt32_t
 
	m›t_vÆ
;

285 
	mTCP_NO_QUEUE
,

286 
	mTCP_RECV_QUEUE
,

287 
	mTCP_SEND_QUEUE
,

288 
	mTCP_QUEUES_NR
,

292 
	#TCP_COOKIE_MIN
 8

	)

293 
	#TCP_COOKIE_MAX
 16

	)

294 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

297 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

298 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

302 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

303 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

305 
	#TCP_MSS_DEFAULT
 536U

	)

306 
	#TCP_MSS_DESIRED
 1220U

	)

308 
	st˝_cookõ_å™ß˘i⁄s


310 
uöt16_t
 
	mt˝˘_Êags
;

311 
uöt8_t
 
	m__t˝˘_∑d1
;

312 
uöt8_t
 
	mt˝˘_cookõ_desúed
;

313 
uöt16_t
 
	mt˝˘_s_d©a_desúed
;

314 
uöt16_t
 
	mt˝˘_u£d
;

315 
uöt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

319 
	st˝_ª∑ú_wödow


321 
uöt32_t
 
	m¢d_wl1
;

322 
uöt32_t
 
	m¢d_wnd
;

323 
uöt32_t
 
	mmax_wödow
;

324 
uöt32_t
 
	mrcv_wnd
;

325 
uöt32_t
 
	mrcv_wup
;

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

35 
	mPTHREAD_CREATE_JOINABLE
,

36 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

37 
	mPTHREAD_CREATE_DETACHED


38 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

45 
	mPTHREAD_MUTEX_TIMED_NP
,

46 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

47 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

48 
	mPTHREAD_MUTEX_ADAPTIVE_NP


49 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


51 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

52 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

53 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

54 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


56 #ifde‡
__USE_GNU


58 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


63 #ifde‡
__USE_XOPEN2K


67 
	mPTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_ROBUST
,

70 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


75 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


79 
	mPTHREAD_PRIO_NONE
,

80 
	mPTHREAD_PRIO_INHERIT
,

81 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

99 
	#PTHREAD_MUTEX_INITIALIZER
 \

100 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

101 #ifde‡
__USE_GNU


102 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

104 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

106 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

107 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


127 #i‡
__WORDSIZE
 == 64

128 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

133 
	#PTHREAD_RWLOCK_INITIALIZER
 \

134 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

135 #ifde‡
__USE_GNU


136 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

139 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

141 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


142 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

143 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

144 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

146 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

147 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

148 0 } }

	)

158 
	mPTHREAD_INHERIT_SCHED
,

159 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

160 
	mPTHREAD_EXPLICIT_SCHED


161 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

168 
	mPTHREAD_SCOPE_SYSTEM
,

169 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

170 
	mPTHREAD_SCOPE_PROCESS


171 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

178 
	mPTHREAD_PROCESS_PRIVATE
,

179 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

180 
	mPTHREAD_PROCESS_SHARED


181 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

187 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

191 
	s_±hªad_˛ónup_buf„r


193 (*
	m__routöe
) (*);

194 *
	m__¨g
;

195 
	m__ˇn˚…y≥
;

196 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

202 
	mPTHREAD_CANCEL_ENABLE
,

203 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

204 
	mPTHREAD_CANCEL_DISABLE


205 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

209 
	mPTHREAD_CANCEL_DEFERRED
,

210 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

211 
	mPTHREAD_CANCEL_ASYNCHRONOUS


212 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

214 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

218 
	#PTHREAD_ONCE_INIT
 0

	)

221 #ifde‡
__USE_XOPEN2K


225 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

229 
__BEGIN_DECLS


234 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

235 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

236 *(*
__°¨t_routöe
) (*),

237 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

243 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

251 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

253 #ifde‡
__USE_GNU


256 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

264 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

265 c⁄° 
time•ec
 *
__ab°ime
);

272 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

276 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

279 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

280 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

288 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

296 *
__dëach°©e
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

300 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

301 
__dëach°©e
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

306 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

307 
size_t
 *
__gu¨dsize
)

308 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

311 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

312 
size_t
 
__gu¨dsize
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1));

317 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

318 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

322 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

323 c⁄° 
sched_∑øm
 *
__ª°ri˘


324 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

327 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


337 
__©å
, *
__ª°ri˘
 
__öhîô
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

341 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

342 
__öhîô
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

348 *
__ª°ri˘
 
__sc›e
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

352 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

356 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


357 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

358 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

364 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

365 *
__°ackaddr
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

369 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


370 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

376 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

377 
size_t
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1));

380 #ifde‡
__USE_XOPEN2K


382 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

383 **
__ª°ri˘
 
__°ackaddr
,

384 
size_t
 *
__ª°ri˘
 
__°acksize
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

390 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

391 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

394 #ifde‡
__USE_GNU


397 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 c⁄° 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

405 
size_t
 
__˝u£tsize
,

406 
˝u_£t_t
 *
__˝u£t
)

407 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

410 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

415 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

416 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

422 
__THROW
 
	`__n⁄nuŒ
 ((2));

430 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

431 c⁄° 
sched_∑øm
 *
__∑øm
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

436 *
__ª°ri˘
 
__pﬁicy
,

437 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

441 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

442 
__THROW
;

445 #ifde‡
__USE_GNU


447 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

448 
size_t
 
__buÊí
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

452 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

453 
__THROW
 
	`__n⁄nuŒ
 ((2));

457 #ifde‡
__USE_UNIX98


459 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

462 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

465 #ifde‡
__USE_GNU


470 
	$±hªad_yõld
 (Ë
__THROW
;

475 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

476 c⁄° 
˝u_£t_t
 *
__˝u£t
)

477 
__THROW
 
	`__n⁄nuŒ
 ((3));

480 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

481 
˝u_£t_t
 *
__˝u£t
)

482 
__THROW
 
	`__n⁄nuŒ
 ((3));

495 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

496 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

507 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

511 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

514 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

519 
	`±hªad_ã°ˇn˚l
 ();

528 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

529 
__mask_was_ßved
;

530 } 
__ˇn˚l_jmp_buf
[1];

531 *
__∑d
[4];

532 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

535 #i‚de‡
__˛ónup_f˘_©åibuã


536 
	#__˛ónup_f˘_©åibuã


	)

541 
	s__±hªad_˛ónup_‰ame


543 (*
__ˇn˚l_routöe
) (*);

544 *
__ˇn˚l_¨g
;

545 
__do_ô
;

546 
__ˇn˚l_ty≥
;

549 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


550 #ifde‡
__˝lu•lus


552 ˛as†
	c__±hªad_˛ónup_˛ass


554 (*
__ˇn˚l_routöe
) (*);

555 *
__ˇn˚l_¨g
;

556 
__do_ô
;

557 
__ˇn˚l_ty≥
;

559 
public
:

560 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

561 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

562 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

563 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

564 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

565 &
__ˇn˚l_ty≥
); 
	}
}

566 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

576 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

578 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

582 
	#±hªad_˛ónup_p›
(
execuã
) \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

586 #ifde‡
__USE_GNU


590 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

592 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

593 
__˛‰ame
.
	`__de„r
 ()

	)

598 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

599 
__˛‰ame
.
	`__ª°‹e
 (); \

600 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

601 } 0)

	)

608 
__exã∫_ölöe
 

609 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

611 i‡(
__‰ame
->
__do_ô
)

612 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

613 
	}
}

622 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 };

	)

631 
	#±hªad_˛ónup_p›
(
execuã
) \

632 
__˛‰ame
.
__do_ô
 = (
execuã
); \

633 } 0)

	)

635 #ifde‡
__USE_GNU


639 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

641 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

642 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

643 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

644 .
__do_ô
 = 1 }; \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

646 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

651 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

652 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

653 
__˛‰ame
.
__do_ô
 = (
execuã
); \

654 } 0)

	)

665 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

667 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

668 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

669 *
__ˇn˚l_¨g
 = (
¨g
); \

670 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

671 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

672 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

679 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 dÿ{

	)

681 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

682 
__˛ónup_f˘_©åibuã
;

686 
	#±hªad_˛ónup_p›
(
execuã
) \

689 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 i‡(
execuã
) \

691 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

692 } 0)

	)

693 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

694 
__˛ónup_f˘_©åibuã
;

696 #ifde‡
__USE_GNU


700 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

702 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

703 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

704 *
__ˇn˚l_¨g
 = (
¨g
); \

705 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

706 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

707 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

709 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

710 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

714 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

715 dÿ{

	)

716 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

717 
__˛ónup_f˘_©åibuã
;

722 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

725 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

726 i‡(
execuã
) \

727 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

728 
	}
} 0)

	)

729 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

730 
__˛ónup_f˘_©åibuã
;

734 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

735 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

736 #i‚de‡
SHARED


737 
	`__©åibuã__
 ((
__wók__
))

743 
__jmp_buf_èg
;

744 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

750 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

751 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

752 
__THROW
 
	`__n⁄nuŒ
 ((1));

755 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1));

759 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

760 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

763 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

764 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

766 #ifde‡
__USE_XOPEN2K


768 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

769 c⁄° 
time•ec
 *
__ª°ri˘


770 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

774 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

775 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

779 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

780 
__ª°ri˘
 
__muãx
,

781 *
__ª°ri˘
 
__¥io˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

786 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

787 
__¥io˚ûög
,

788 *
__ª°ri˘
 
__ﬁd_˚ûög
)

789 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

792 #ifde‡
__USE_XOPEN2K8


794 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

796 #ifde‡
__USE_GNU


797 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

807 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

816 
__ª°ri˘
 
__©å
,

817 *
__ª°ri˘
 
__psh¨ed
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

821 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

822 
__psh¨ed
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


827 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


828 
__©å
, *
__ª°ri˘
 
__köd
)

829 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

834 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

840 
__ª°ri˘
 
__©å
,

841 *
__ª°ri˘
 
__¥Ÿocﬁ
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

846 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

847 
__¥Ÿocﬁ
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

852 
__ª°ri˘
 
__©å
,

853 *
__ª°ri˘
 
__¥io˚ûög
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

857 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

858 
__¥io˚ûög
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 #ifde‡
__USE_XOPEN2K


863 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

864 *
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

868 *
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

873 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

874 
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

878 
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


889 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

890 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


891 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

894 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

898 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

899 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

902 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

903 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

908 c⁄° 
time•ec
 *
__ª°ri˘


909 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

914 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

917 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

918 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

920 #ifde‡
__USE_XOPEN2K


922 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

923 c⁄° 
time•ec
 *
__ª°ri˘


924 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

928 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

929 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

935 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1));

939 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1));

943 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

944 
__ª°ri˘
 
__©å
,

945 *
__ª°ri˘
 
__psh¨ed
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

949 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

950 
__psh¨ed
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

955 
__ª°ri˘
 
__©å
,

956 *
__ª°ri˘
 
__¥ef
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

960 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

961 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

970 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

971 
__THROW
 
	`__n⁄nuŒ
 ((1));

974 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

975 
__THROW
 
	`__n⁄nuŒ
 ((1));

978 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

979 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

982 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

983 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

990 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

991 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

992 
	`__n⁄nuŒ
 ((1, 2));

1001 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1002 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1003 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1004 
	`__n⁄nuŒ
 ((1, 2, 3));

1009 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1));

1013 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1018 
__ª°ri˘
 
__©å
,

1019 *
__ª°ri˘
 
__psh¨ed
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1023 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1024 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1026 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1029 
__ª°ri˘
 
__©å
,

1030 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1034 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1035 
__˛ockid_t
 
__˛ock_id
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 #ifde‡
__USE_XOPEN2K


1045 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1049 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1050 
__THROW
 
	`__n⁄nuŒ
 ((1));

1053 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1054 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1057 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1058 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1061 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1062 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1070 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1071 
__©å
, 
__cou¡
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1076 
__THROW
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1080 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1084 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1));

1088 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1093 
__ª°ri˘
 
__©å
,

1094 *
__ª°ri˘
 
__psh¨ed
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1098 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1099 
__psh¨ed
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1113 (*
__de°r_fun˘i⁄
) (*))

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1120 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1123 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1124 c⁄° *
__poöãr
Ë
__THROW
 ;

1127 #ifde‡
__USE_XOPEN2K


1129 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1130 
__˛ockid_t
 *
__˛ock_id
)

1131 
__THROW
 
	`__n⁄nuŒ
 ((2));

1146 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1147 (*
__∑ª¡
) (),

1148 (*
__chûd
Ë()Ë
__THROW
;

1151 #ifde‡
__USE_EXTERN_INLINES


1153 
__exã∫_ölöe
 

1154 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1156  
__thªad1
 =
__thªad2
;

1157 
	}
}

1160 
	g__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

28 
	~<bôs/£m≠h‹e.h
>

31 
__BEGIN_DECLS


35 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

36 
__THROW
;

38 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

41 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

44 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

47 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

53 
	`£m_waô
 (
£m_t
 *
__£m
);

55 #ifde‡
__USE_XOPEN2K


60 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

61 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

65 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

68 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

71 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

72 
__THROW
;

75 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 sig√d 
	töt_Àa°8_t
;

44 
	töt_Àa°16_t
;

45 
	töt_Àa°32_t
;

46 #i‡
__WORDSIZE
 == 64

47 
	töt_Àa°64_t
;

49 
__exãnsi⁄__


50 
	töt_Àa°64_t
;

54 
	tuöt_Àa°8_t
;

55 
	tuöt_Àa°16_t
;

56 
	tuöt_Àa°32_t
;

57 #i‡
__WORDSIZE
 == 64

58 
	tuöt_Àa°64_t
;

60 
__exãnsi⁄__


61 
	tuöt_Àa°64_t
;

68 sig√d 
	töt_Á°8_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Á°16_t
;

71 
	töt_Á°32_t
;

72 
	töt_Á°64_t
;

74 
	töt_Á°16_t
;

75 
	töt_Á°32_t
;

76 
__exãnsi⁄__


77 
	töt_Á°64_t
;

81 
	tuöt_Á°8_t
;

82 #i‡
__WORDSIZE
 == 64

83 
	tuöt_Á°16_t
;

84 
	tuöt_Á°32_t
;

85 
	tuöt_Á°64_t
;

87 
	tuöt_Á°16_t
;

88 
	tuöt_Á°32_t
;

89 
__exãnsi⁄__


90 
	tuöt_Á°64_t
;

95 #i‡
__WORDSIZE
 == 64

96 #i‚de‡
__öçå_t_deföed


97 
	töçå_t
;

98 
	#__öçå_t_deföed


	)

100 
	tuöçå_t
;

102 #i‚de‡
__öçå_t_deföed


103 
	töçå_t
;

104 
	#__öçå_t_deföed


	)

106 
	tuöçå_t
;

111 
__ötmax_t
 
	tötmax_t
;

112 
__uötmax_t
 
	tuötmax_t
;

115 #i‡
__WORDSIZE
 == 64

116 
	#__INT64_C
(
c
Ë¯## 
L


	)

117 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

119 
	#__INT64_C
(
c
Ë¯## 
LL


	)

120 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

126 
	#INT8_MIN
 (-128)

	)

127 
	#INT16_MIN
 (-32767-1)

	)

128 
	#INT32_MIN
 (-2147483647-1)

	)

129 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

131 
	#INT8_MAX
 (127)

	)

132 
	#INT16_MAX
 (32767)

	)

133 
	#INT32_MAX
 (2147483647)

	)

134 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

137 
	#UINT8_MAX
 (255)

	)

138 
	#UINT16_MAX
 (65535)

	)

139 
	#UINT32_MAX
 (4294967295U)

	)

140 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

144 
	#INT_LEAST8_MIN
 (-128)

	)

145 
	#INT_LEAST16_MIN
 (-32767-1)

	)

146 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

147 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

149 
	#INT_LEAST8_MAX
 (127)

	)

150 
	#INT_LEAST16_MAX
 (32767)

	)

151 
	#INT_LEAST32_MAX
 (2147483647)

	)

152 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

155 
	#UINT_LEAST8_MAX
 (255)

	)

156 
	#UINT_LEAST16_MAX
 (65535)

	)

157 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

158 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

162 
	#INT_FAST8_MIN
 (-128)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

165 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

167 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

168 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

170 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

172 
	#INT_FAST8_MAX
 (127)

	)

173 #i‡
__WORDSIZE
 == 64

174 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

175 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

177 
	#INT_FAST16_MAX
 (2147483647)

	)

178 
	#INT_FAST32_MAX
 (2147483647)

	)

180 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

183 
	#UINT_FAST8_MAX
 (255)

	)

184 #i‡
__WORDSIZE
 == 64

185 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

186 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

188 
	#UINT_FAST16_MAX
 (4294967295U)

	)

189 
	#UINT_FAST32_MAX
 (4294967295U)

	)

191 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 #i‡
__WORDSIZE
 == 64

196 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

197 
	#INTPTR_MAX
 (9223372036854775807L)

	)

198 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

200 
	#INTPTR_MIN
 (-2147483647-1)

	)

201 
	#INTPTR_MAX
 (2147483647)

	)

202 
	#UINTPTR_MAX
 (4294967295U)

	)

207 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

209 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

220 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

222 #i‡
__WORDSIZE32_PTRDIFF_LONG


223 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

224 
	#PTRDIFF_MAX
 (2147483647L)

	)

226 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

227 
	#PTRDIFF_MAX
 (2147483647)

	)

232 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

233 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

236 #i‡
__WORDSIZE
 == 64

237 
	#SIZE_MAX
 (18446744073709551615UL)

	)

239 #i‡
__WORDSIZE32_SIZE_ULONG


240 
	#SIZE_MAX
 (4294967295UL)

	)

242 
	#SIZE_MAX
 (4294967295U)

	)

247 #i‚de‡
WCHAR_MIN


249 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

250 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

254 
	#WINT_MIN
 (0u)

	)

255 
	#WINT_MAX
 (4294967295u)

	)

258 
	#INT8_C
(
c
Ë
	)
c

259 
	#INT16_C
(
c
Ë
	)
c

260 
	#INT32_C
(
c
Ë
	)
c

261 #i‡
__WORDSIZE
 == 64

262 
	#INT64_C
(
c
Ë¯## 
L


	)

264 
	#INT64_C
(
c
Ë¯## 
LL


	)

268 
	#UINT8_C
(
c
Ë
	)
c

269 
	#UINT16_C
(
c
Ë
	)
c

270 
	#UINT32_C
(
c
Ë¯## 
U


	)

271 #i‡
__WORDSIZE
 == 64

272 
	#UINT64_C
(
c
Ë¯## 
UL


	)

274 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

278 #i‡
__WORDSIZE
 == 64

279 
	#INTMAX_C
(
c
Ë¯## 
L


	)

280 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

282 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

283 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

286 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

288 
	#INT8_WIDTH
 8

	)

289 
	#UINT8_WIDTH
 8

	)

290 
	#INT16_WIDTH
 16

	)

291 
	#UINT16_WIDTH
 16

	)

292 
	#INT32_WIDTH
 32

	)

293 
	#UINT32_WIDTH
 32

	)

294 
	#INT64_WIDTH
 64

	)

295 
	#UINT64_WIDTH
 64

	)

297 
	#INT_LEAST8_WIDTH
 8

	)

298 
	#UINT_LEAST8_WIDTH
 8

	)

299 
	#INT_LEAST16_WIDTH
 16

	)

300 
	#UINT_LEAST16_WIDTH
 16

	)

301 
	#INT_LEAST32_WIDTH
 32

	)

302 
	#UINT_LEAST32_WIDTH
 32

	)

303 
	#INT_LEAST64_WIDTH
 64

	)

304 
	#UINT_LEAST64_WIDTH
 64

	)

306 
	#INT_FAST8_WIDTH
 8

	)

307 
	#UINT_FAST8_WIDTH
 8

	)

308 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

309 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

310 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

311 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

312 
	#INT_FAST64_WIDTH
 64

	)

313 
	#UINT_FAST64_WIDTH
 64

	)

315 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

316 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

318 
	#INTMAX_WIDTH
 64

	)

319 
	#UINTMAX_WIDTH
 64

	)

321 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

322 
	#SIG_ATOMIC_WIDTH
 32

	)

323 
	#SIZE_WIDTH
 
__WORDSIZE


	)

324 
	#WCHAR_WIDTH
 32

	)

325 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	~<bôs/ty≥s/__FILE.h
>

37 
	~<bôs/ty≥s/FILE.h
>

39 
	#_STDIO_USES_IOSTREAM


	)

41 
	~<bôs/libio.h
>

43 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


44 #ifde‡
__GNUC__


45 #i‚de‡
_VA_LIST_DEFINED


46 
_G_va_li°
 
	tva_li°
;

47 
	#_VA_LIST_DEFINED


	)

50 
	~<°d¨g.h
>

54 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


55 #i‚de‡
__off_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__off_t
 
	toff_t
;

59 
__off64_t
 
	toff_t
;

61 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

69 #ifde‡
__USE_XOPEN2K8


70 #i‚de‡
__ssize_t_deföed


71 
__ssize_t
 
	tssize_t
;

72 
	#__ssize_t_deföed


	)

77 #i‚de‡
__USE_FILE_OFFSET64


78 
_G_Âos_t
 
	tÂos_t
;

80 
_G_Âos64_t
 
	tÂos_t
;

82 #ifde‡
__USE_LARGEFILE64


83 
_G_Âos64_t
 
	tÂos64_t
;

87 
	#_IOFBF
 0

	)

88 
	#_IOLBF
 1

	)

89 
	#_IONBF
 2

	)

93 #i‚de‡
BUFSIZ


94 
	#BUFSIZ
 
_IO_BUFSIZ


	)

100 #i‚de‡
EOF


101 
	#EOF
 (-1)

	)

107 
	#SEEK_SET
 0

	)

108 
	#SEEK_CUR
 1

	)

109 
	#SEEK_END
 2

	)

110 #ifde‡
__USE_GNU


111 
	#SEEK_DATA
 3

	)

112 
	#SEEK_HOLE
 4

	)

116 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


118 
	#P_tmpdú
 "/tmp"

	)

131 
	~<bôs/°dio_lim.h
>

135 
_IO_FILE
 *
°dö
;

136 
_IO_FILE
 *
°dout
;

137 
_IO_FILE
 *
°dîr
;

139 
	#°dö
 
°dö


	)

140 
	#°dout
 
°dout


	)

141 
	#°dîr
 
°dîr


	)

144 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

146 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

148 #ifde‡
__USE_ATFILE


150 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

151 c⁄° *
__√w
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

161 #ifde‡
__REDIRECT


162 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

164 
	#tmpfûe
 
tmpfûe64


	)

168 #ifde‡
__USE_LARGEFILE64


169 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

173 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

175 #ifde‡
__USE_MISC


178 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


190 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

191 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

199 
	`f˛o£
 (
FILE
 *
__°ªam
);

204 
	`fÊush
 (
FILE
 *
__°ªam
);

206 #ifde‡
__USE_MISC


213 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

216 #ifde‡
__USE_GNU


223 
	`f˛o£Æl
 ();

227 #i‚de‡
__USE_FILE_OFFSET64


232 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

233 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

238 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

239 c⁄° *
__ª°ri˘
 
__modes
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

242 #ifde‡
__REDIRECT


243 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

244 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

245 
__wur
;

246 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

247 c⁄° *
__ª°ri˘
 
__modes
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

249 
__wur
;

251 
	#f›í
 
f›í64


	)

252 
	#‰e›í
 
‰e›í64


	)

255 #ifde‡
__USE_LARGEFILE64


256 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

257 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

258 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

263 #ifdef 
__USE_POSIX


265 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

268 #ifdef 
__USE_GNU


271 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

272 c⁄° *
__ª°ri˘
 
__modes
,

273 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

276 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

278 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

279 
__THROW
 
__wur
;

284 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

290 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

294 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

295 
__modes
, 
size_t
 
__n
Ë
__THROW
;

297 #ifdef 
__USE_MISC


300 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

301 
size_t
 
__size
Ë
__THROW
;

304 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

312 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

313 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

318 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

320 
	$•rötf
 (*
__ª°ri˘
 
__s
,

321 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

327 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

328 
_G_va_li°
 
__¨g
);

333 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

335 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

336 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

338 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


340 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

341 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

342 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

344 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

345 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

346 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

349 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

352 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

353 
_G_va_li°
 
__¨g
)

354 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

355 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

356 c⁄° *
__ª°ri˘
 
__fmt
, ...)

357 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

358 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

359 c⁄° *
__ª°ri˘
 
__fmt
, ...)

360 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

363 #ifde‡
__USE_XOPEN2K8


365 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

366 
_G_va_li°
 
__¨g
)

367 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

368 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

369 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

377 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

378 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

383 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

385 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

386 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

388 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

389 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

390 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

391 #ifde‡
__REDIRECT


395 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

396 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

397 
__isoc99_fsˇnf
Ë
__wur
;

398 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

399 
__isoc99_sˇnf
Ë
__wur
;

400 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

401 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

402 
__isoc99_ssˇnf
);

404 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

405 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

406 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

407 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

408 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

409 
	#fsˇnf
 
__isoc99_fsˇnf


	)

410 
	#sˇnf
 
__isoc99_sˇnf


	)

411 
	#ssˇnf
 
__isoc99_ssˇnf


	)

415 #ifdef 
__USE_ISOC99


420 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

421 
_G_va_li°
 
__¨g
)

422 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

428 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

429 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

432 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

433 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

434 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

436 #i‡!
deföed
 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
vfsˇnf
,

444 (
FILE
 *
__ª°ri˘
 
__s
,

445 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

446 
__isoc99_vfsˇnf
)

447 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

448 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

449 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

450 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

451 
	`__REDIRECT_NTH
 (
vssˇnf
,

452 (c⁄° *
__ª°ri˘
 
__s
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
,

454 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

455 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

457 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
,

459 
_G_va_li°
 
__¨g
Ë
__wur
;

460 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

461 
_G_va_li°
 
__¨g
Ë
__wur
;

462 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

463 c⁄° *
__ª°ri˘
 
__f‹m©
,

464 
_G_va_li°
 
__¨g
Ë
__THROW
;

465 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

466 
	#vsˇnf
 
__isoc99_vsˇnf


	)

467 
	#vssˇnf
 
__isoc99_vssˇnf


	)

477 
	`fgëc
 (
FILE
 *
__°ªam
);

478 
	`gëc
 (
FILE
 *
__°ªam
);

484 
	`gëch¨
 ();

488 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

490 #ifde‡
__USE_POSIX199506


495 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

496 
	`gëch¨_u∆ocked
 ();

499 #ifde‡
__USE_MISC


506 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

517 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

518 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

524 
	`putch¨
 (
__c
);

528 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

530 #ifde‡
__USE_MISC


537 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

540 #ifde‡
__USE_POSIX199506


545 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

546 
	`putch¨_u∆ocked
 (
__c
);

550 #i‡
deföed
 
__USE_MISC
 \

551 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

553 
	`gëw
 (
FILE
 *
__°ªam
);

556 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

564 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

565 
__wur
;

567 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

577 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

580 #ifde‡
__USE_GNU


587 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

588 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

592 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

603 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

604 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

605 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

606 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

607 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

608 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

616 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

617 
size_t
 *
__ª°ri˘
 
__n
,

618 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

626 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

632 
	`puts
 (c⁄° *
__s
);

639 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

646 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

647 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

652 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

653 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

655 #ifde‡
__USE_GNU


662 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
);

666 #ifde‡
__USE_MISC


673 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

674 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

684 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

689 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

694 
	`ªwöd
 (
FILE
 *
__°ªam
);

701 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


702 #i‚de‡
__USE_FILE_OFFSET64


707 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

712 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

714 #ifde‡
__REDIRECT


715 
	`__REDIRECT
 (
f£eko
,

716 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

717 
f£eko64
);

718 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

720 
	#f£eko
 
f£eko64


	)

721 
	#·ñlo
 
·ñlo64


	)

726 #i‚de‡
__USE_FILE_OFFSET64


731 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

736 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

738 #ifde‡
__REDIRECT


739 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

740 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

741 
	`__REDIRECT
 (
f£ços
,

742 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

744 
	#fgëpos
 
fgëpos64


	)

745 
	#f£ços
 
f£ços64


	)

749 #ifde‡
__USE_LARGEFILE64


750 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

751 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

753 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

757 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

759 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

761 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

763 #ifde‡
__USE_MISC


765 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

766 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

767 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

775 
	`≥º‹
 (c⁄° *
__s
);

781 
	~<bôs/sys_îæi°.h
>

784 #ifdef 
__USE_POSIX


786 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

789 #ifde‡
__USE_MISC


791 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

795 #ifde‡
__USE_POSIX2


800 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

806 
	`p˛o£
 (
FILE
 *
__°ªam
);

810 #ifdef 
__USE_POSIX


812 *
	$˘îmid
 (*
__s
Ë
__THROW
;

816 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


818 *
	`cu£rid
 (*
__s
);

822 #ifdef 
__USE_GNU


823 
ob°ack
;

826 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

827 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

828 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

829 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

830 c⁄° *
__ª°ri˘
 
__f‹m©
,

831 
_G_va_li°
 
__¨gs
)

832 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

836 #ifde‡
__USE_POSIX199506


840 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

844 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

847 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

850 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


853 
	~<bôs/gë›t_posix.h
>

858 #ifde‡
__USE_EXTERN_INLINES


859 
	~<bôs/°dio.h
>

861 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


862 
	~<bôs/°dio2.h
>

864 #ifde‡
__LDBL_COMPAT


865 
	~<bôs/°dio-ldbl.h
>

868 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

25 
	~<bôs/libc-hódî-°¨t.h
>

28 
	#__√ed_size_t


	)

29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

31 
	~<°ddef.h
>

33 
	g__BEGIN_DECLS


35 
	#_STDLIB_H
 1

	)

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


39 
	~<bôs/waôÊags.h
>

40 
	~<bôs/waô°©us.h
>

43 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

44 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

45 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

46 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

47 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

48 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

49 #ifde‡
__WIFCONTINUED


50 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

55 
	~<bôs/Êﬂä.h
>

60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

74 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__exãnsi⁄__
 struct

78 
	mquŸ
;

79 
	mªm
;

80 } 
	tŒdiv_t
;

81 
	#__Œdiv_t_deföed
 1

	)

86 
	#RAND_MAX
 2147483647

	)

91 
	#EXIT_FAILURE
 1

	)

92 
	#EXIT_SUCCESS
 0

	)

96 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

97 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

101 
	$©of
 (c⁄° *
__≈å
)

102 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

104 
	$©oi
 (c⁄° *
__≈å
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

107 
	$©ﬁ
 (c⁄° *
__≈å
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

110 #ifde‡
__USE_ISOC99


112 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

113 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

117 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

118 **
__ª°ri˘
 
__íd±r
)

119 
__THROW
 
	`__n⁄nuŒ
 ((1));

121 #ifdef 
__USE_ISOC99


123 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

124 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

126 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

127 **
__ª°ri˘
 
__íd±r
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1));

133 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

134 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

135 **
__ª°ri˘
 
__íd±r
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

140 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

141 **
__ª°ri˘
 
__íd±r
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1));

145 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

146 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

147 **
__ª°ri˘
 
__íd±r
)

148 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

152 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

153 **
__ª°ri˘
 
__íd±r
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1));

157 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

158 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

159 **
__ª°ri˘
 
__íd±r
)

160 
__THROW
 
	`__n⁄nuŒ
 ((1));

163 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

164 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

169 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

170 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

176 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1));

180 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

181 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

182 
__THROW
 
	`__n⁄nuŒ
 ((1));

184 #ifde‡
__USE_MISC


186 
__exãnsi⁄__


187 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

191 
__exãnsi⁄__


192 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

193 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

194 
__THROW
 
	`__n⁄nuŒ
 ((1));

197 #ifde‡
__USE_ISOC99


199 
__exãnsi⁄__


200 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

204 
__exãnsi⁄__


205 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

206 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT
)

212 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

213 
__f
)

214 
__THROW
 
	`__n⁄nuŒ
 ((3));

216 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

217 
__f
)

218 
__THROW
 
	`__n⁄nuŒ
 ((3));

220 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

221 
__f
)

222 
__THROW
 
	`__n⁄nuŒ
 ((3));

225 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

226 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

227 
_Flﬂt16
 
__f
)

228 
__THROW
 
	`__n⁄nuŒ
 ((3));

231 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

232 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

233 
_Flﬂt32
 
__f
)

234 
__THROW
 
	`__n⁄nuŒ
 ((3));

237 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

238 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

239 
_Flﬂt64
 
__f
)

240 
__THROW
 
	`__n⁄nuŒ
 ((3));

243 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

244 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

245 
_Flﬂt128
 
__f
)

246 
__THROW
 
	`__n⁄nuŒ
 ((3));

249 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

250 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

251 
_Flﬂt32x
 
__f
)

252 
__THROW
 
	`__n⁄nuŒ
 ((3));

255 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

256 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

257 
_Flﬂt64x
 
__f
)

258 
__THROW
 
	`__n⁄nuŒ
 ((3));

261 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

262 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

263 
_Flﬂt128x
 
__f
)

264 
__THROW
 
	`__n⁄nuŒ
 ((3));

268 #ifde‡
__USE_GNU


272 
	~<bôs/ty≥s/loˇÀ_t.h
>

274 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

275 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

276 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

278 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

279 **
__ª°ri˘
 
__íd±r
,

280 
__ba£
, 
loˇÀ_t
 
__loc
)

281 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

283 
__exãnsi⁄__


284 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

285 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

286 
loˇÀ_t
 
__loc
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

289 
__exãnsi⁄__


290 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

291 **
__ª°ri˘
 
__íd±r
,

292 
__ba£
, 
loˇÀ_t
 
__loc
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

295 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

296 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

299 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

300 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

303 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
loˇÀ_t
 
__loc
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

308 #i‡
__HAVE_FLOAT16


309 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

310 **
__ª°ri˘
 
__íd±r
,

311 
loˇÀ_t
 
__loc
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

315 #i‡
__HAVE_FLOAT32


316 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

317 **
__ª°ri˘
 
__íd±r
,

318 
loˇÀ_t
 
__loc
)

319 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

322 #i‡
__HAVE_FLOAT64


323 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

324 **
__ª°ri˘
 
__íd±r
,

325 
loˇÀ_t
 
__loc
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

329 #i‡
__HAVE_FLOAT128


330 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 **
__ª°ri˘
 
__íd±r
,

332 
loˇÀ_t
 
__loc
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

336 #i‡
__HAVE_FLOAT32X


337 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 **
__ª°ri˘
 
__íd±r
,

339 
loˇÀ_t
 
__loc
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

343 #i‡
__HAVE_FLOAT64X


344 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

345 **
__ª°ri˘
 
__íd±r
,

346 
loˇÀ_t
 
__loc
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

350 #i‡
__HAVE_FLOAT128X


351 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

352 **
__ª°ri˘
 
__íd±r
,

353 
loˇÀ_t
 
__loc
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

359 #ifde‡
__USE_EXTERN_INLINES


360 
__exã∫_ölöe
 

361 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

363  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

364 
	}
}

365 
__exã∫_ölöe
 

366 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

368  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

369 
	}
}

371 #ifde‡
__USE_ISOC99


372 
__exãnsi⁄__
 
__exã∫_ölöe
 

373 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

375  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

376 
	}
}

381 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


385 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

388 
	$a64l
 (c⁄° *
__s
)

389 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


394 
	~<sys/ty≥s.h
>

401 
	$øndom
 (Ë
__THROW
;

404 
	$§™dom
 (
__£ed
Ë
__THROW
;

410 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

411 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

415 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

418 #ifde‡
__USE_MISC


423 
	søndom_d©a


425 
öt32_t
 *
Âå
;

426 
öt32_t
 *
Ωå
;

427 
öt32_t
 *
°©e
;

428 
ønd_ty≥
;

429 
ønd_deg
;

430 
ønd_£p
;

431 
öt32_t
 *
íd_±r
;

434 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

435 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

437 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

441 
size_t
 
__°©ñí
,

442 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

446 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

447 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$ønd
 (Ë
__THROW
;

455 
	$§™d
 (
__£ed
Ë
__THROW
;

457 #ifde‡
__USE_POSIX199506


459 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

463 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


467 
	$dønd48
 (Ë
__THROW
;

468 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

471 
	$Ã™d48
 (Ë
__THROW
;

472 
	$ƒ™d48
 (
__xsubi
[3])

473 
__THROW
 
	`__n⁄nuŒ
 ((1));

476 
	$mønd48
 (Ë
__THROW
;

477 
	$jønd48
 (
__xsubi
[3])

478 
__THROW
 
	`__n⁄nuŒ
 ((1));

481 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

482 *
	$£ed48
 (
__£ed16v
[3])

483 
__THROW
 
	`__n⁄nuŒ
 ((1));

484 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

486 #ifde‡
__USE_MISC


490 
	sdønd48_d©a


492 
__x
[3];

493 
__ﬁd_x
[3];

494 
__c
;

495 
__öô
;

496 
__exãnsi⁄__
 
__a
;

501 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

502 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

503 
	$î™d48_r
 (
__xsubi
[3],

504 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

505 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

508 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

509 *
__ª°ri˘
 
__ªsu…
)

510 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

511 
	$ƒ™d48_r
 (
__xsubi
[3],

512 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

513 *
__ª°ri˘
 
__ªsu…
)

514 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

517 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

518 *
__ª°ri˘
 
__ªsu…
)

519 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

520 
	$jønd48_r
 (
__xsubi
[3],

521 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

522 *
__ª°ri˘
 
__ªsu…
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

526 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

527 
__THROW
 
	`__n⁄nuŒ
 ((2));

529 
	$£ed48_r
 (
__£ed16v
[3],

530 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

532 
	$lc⁄g48_r
 (
__∑øm
[7],

533 
dønd48_d©a
 *
__buf„r
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

539 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

541 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

542 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

549 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

550 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

552 #ifde‡
__USE_GNU


558 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

559 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

563 
	$‰ì
 (*
__±r
Ë
__THROW
;

565 #ifde‡
__USE_MISC


566 
	~<Æloˇ.h
>

569 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

570 || 
deföed
 
__USE_MISC


572 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

575 #ifde‡
__USE_XOPEN2K


577 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

581 #ifde‡
__USE_ISOC11


583 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

584 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

588 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

592 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

594 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


596 #ifde‡
__˝lu•lus


597 "C++" 
	$©_quick_exô
 ((*
__func
) ())

598 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

600 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #ifdef 
__USE_MISC


607 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

614 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

616 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


620 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

623 #ifde‡
__USE_ISOC99


626 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

631 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_GNU


636 *
	$£cuª_gëív
 (c⁄° *
__«me
)

637 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


644 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

647 #ifde‡
__USE_XOPEN2K


650 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

651 
__THROW
 
	`__n⁄nuŒ
 ((2));

654 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifdef 
__USE_MISC


661 
	$˛óªnv
 (Ë
__THROW
;

665 #i‡
deföed
 
__USE_MISC
 \

666 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

672 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

675 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


684 #i‚de‡
__USE_FILE_OFFSET64


685 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

687 #ifde‡
__REDIRECT


688 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

689 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

691 
	#mk°emp
 
mk°emp64


	)

694 #ifde‡
__USE_LARGEFILE64


695 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

699 #ifde‡
__USE_MISC


706 #i‚de‡
__USE_FILE_OFFSET64


707 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

711 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

713 
	#mk°emps
 
mk°emps64


	)

716 #ifde‡
__USE_LARGEFILE64


717 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

718 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

722 #ifde‡
__USE_XOPEN2K8


728 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

731 #ifde‡
__USE_GNU


738 #i‚de‡
__USE_FILE_OFFSET64


739 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__REDIRECT


742 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

743 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

745 
	#mko°emp
 
mko°emp64


	)

748 #ifde‡
__USE_LARGEFILE64


749 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

758 #i‚de‡
__USE_FILE_OFFSET64


759 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

760 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

762 #ifde‡
__REDIRECT


763 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

764 
__Êags
), 
mko°emps64
)

765 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

767 
	#mko°emps
 
mko°emps64


	)

770 #ifde‡
__USE_LARGEFILE64


771 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

772 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

781 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

784 #ifdef 
__USE_GNU


787 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


797 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

798 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

803 #i‚de‡
__COMPAR_FN_T


804 
	#__COMPAR_FN_T


	)

805 (*
	t__com∑r_‚_t
) (const *, const *);

807 #ifdef 
__USE_GNU


808 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

811 #ifde‡
__USE_GNU


812 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

817 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

818 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

819 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

821 #ifde‡
__USE_EXTERN_INLINES


822 
	~<bôs/°dlib-b£¨ch.h
>

827 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

828 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

829 #ifde‡
__USE_GNU


830 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

831 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

832 
	`__n⁄nuŒ
 ((1, 4));

837 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

838 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

840 #ifde‡
__USE_ISOC99


841 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

842 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
div_t
 
	$div
 (
__numî
, 
__díom
)

850 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

852 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

854 #ifde‡
__USE_ISOC99


855 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

856 
__díom
)

857 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

861 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

862 || 
deföed
 
__USE_MISC


869 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

870 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

875 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

876 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

881 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

882 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

885 #ifde‡
__USE_MISC


887 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

888 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

889 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

890 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

891 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

892 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

893 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

894 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

899 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

900 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

901 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

902 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

903 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

904 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

906 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

907 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

908 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

910 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

911 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

912 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

913 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

919 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

922 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

923 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

926 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

930 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

931 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

934 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

935 
__THROW
;

938 #ifde‡
__USE_MISC


943 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

947 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


954 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

955 *c⁄° *
__ª°ri˘
 
__tokís
,

956 **
__ª°ri˘
 
__vÆuï
)

957 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

961 #ifde‡
__USE_XOPEN


963 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

969 #ifde‡
__USE_XOPEN2KXSI


971 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

974 #ifde‡
__USE_XOPEN_EXTENDED


979 
	$gø¡±
 (
__fd
Ë
__THROW
;

983 
	$u∆ock±
 (
__fd
Ë
__THROW
;

988 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

991 #ifde‡
__USE_GNU


995 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

996 
__THROW
 
	`__n⁄nuŒ
 ((2));

999 
	`gë±
 ();

1002 #ifde‡
__USE_MISC


1006 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1013 
	$ây¶Ÿ
 (Ë
__THROW
;

1016 
	~<bôs/°dlib-Êﬂt.h
>

1019 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1020 
	~<bôs/°dlib.h
>

1022 #ifde‡
__LDBL_COMPAT


1023 
	~<bôs/°dlib-ldbl.h
>

1026 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


53 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

54 
__c
, 
size_t
 
__n
)

55 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

63 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

64 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

67 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


70 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

71 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

72 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__OPTIMIZE__


76 
__exã∫_Æways_ölöe
 *

77 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


79  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

82 
__exã∫_Æways_ölöe
 const *

83 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
	}
}

90 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

91 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

94 #ifde‡
__USE_GNU


97 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


98 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

99 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

100 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

101 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


109 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

110 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

112 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

122 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

124 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

125 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

129 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

133 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

137 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

139 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

140 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

147 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

148 
__THROW
 
	`__n⁄nuŒ
 ((2));

150 #ifde‡
__USE_XOPEN2K8


152 
	~<bôs/ty≥s/loˇÀ_t.h
>

155 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

156 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

159 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

160 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

163 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

164 || 
	$__GLIBC_USE
 (
LIB_EXT2
))

166 *
	$°rdup
 (c⁄° *
__s
)

167 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

173 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

174 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

175 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


180 
	#°rdu∑
(
s
) \

181 (
__exãnsi⁄__
 \

183 c⁄° *
__ﬁd
 = (
s
); \

184 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

185 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

186 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

187 
	}
}))

	)

190 
	#°∫du∑
(
s
, 
n
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

196 
__√w
[
__Àn
] = '\0'; \

197 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

198 }))

	)

202 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


205 *
°rchr
 (*
__s
, 
__c
)

206 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

207 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

208 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

210 #ifde‡
__OPTIMIZE__


211 
__exã∫_Æways_ölöe
 *

212 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


214  
__buûtö_°rchr
 (
__s
, 
__c
);

217 
__exã∫_Æways_ölöe
 const *

218 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

225 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

226 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


232 *
	`°ºchr
 (*
__s
, 
__c
)

233 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

234 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

235 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__OPTIMIZE__


238 
__exã∫_Æways_ölöe
 *

239 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


241  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

244 
__exã∫_Æways_ölöe
 const *

245 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
	}
}

252 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

253 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

256 #ifde‡
__USE_GNU


259 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


260 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

261 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

263 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

266 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

276 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

279 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


282 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

283 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__OPTIMIZE__


288 
__exã∫_Æways_ölöe
 *

289 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


291  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

294 
__exã∫_Æways_ölöe
 const *

295 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


297  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

300 
	}
}

302 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

303 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

306 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


309 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

310 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

311 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

312 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__OPTIMIZE__


315 
__exã∫_Æways_ölöe
 *

316 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


318  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

321 
__exã∫_Æways_ölöe
 const *

322 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


324  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

327 
	}
}

329 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

336 
__THROW
 
	`__n⁄nuŒ
 ((2));

340 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

341 c⁄° *
__ª°ri˘
 
__dñim
,

342 **
__ª°ri˘
 
__ßve_±r
)

343 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

344 #ifde‡
__USE_POSIX


345 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

346 **
__ª°ri˘
 
__ßve_±r
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

350 #ifde‡
__USE_GNU


352 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


353 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

354 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

355 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

356 c⁄° *
__√edÀ
)

357 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

360 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 #ifde‡
__USE_GNU


368 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

369 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

374 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

375 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

378 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

384 
size_t
 
	$°æí
 (c⁄° *
__s
)

385 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

387 #ifdef 
__USE_XOPEN2K8


390 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

397 #ifde‡
__USE_XOPEN2K


405 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

410 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

411 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

413 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

414 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

420 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

425 #ifde‡
__USE_XOPEN2K8


427 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

430 #ifde‡
__USE_MISC


431 
	~<°rögs.h
>

435 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

439 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

440 c⁄° *
__ª°ri˘
 
__dñim
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 #ifdef 
__USE_XOPEN2K8


446 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

449 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

451 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

456 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

457 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

458 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

460 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifdef 
__USE_GNU


466 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

467 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

470 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

473 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

475 #i‚de‡
ba£«me


480 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


481 "C++" *
	$ba£«me
 (*
__fûíame
)

482 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

483 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

484 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

486 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 #i‡
	`__GNUC_PREREQ
 (3,4)

492 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


494 
	~<bôs/°rög_f‹tifõd.h
>

498 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

75 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

78 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

79 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

88 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
,

90 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

92 #ifde‡
__USE_XOPEN


95 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

96 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

97 
__THROW
;

100 #ifde‡
__USE_XOPEN2K8


104 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

105 c⁄° *
__ª°ri˘
 
__f‹m©
,

106 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

107 
loˇÀ_t
 
__loc
Ë
__THROW
;

110 #ifde‡
__USE_GNU


111 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

112 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

113 
loˇÀ_t
 
__loc
Ë
__THROW
;

119 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

123 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

125 #ifde‡
__USE_POSIX


128 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

129 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

133 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

134 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

139 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

142 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

144 #ifde‡
__USE_POSIX


149 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

150 *
__ª°ri˘
 
__buf
Ë
__THROW
;

153 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

154 *
__ª°ri˘
 
__buf
Ë
__THROW
;

159 *
__tz«me
[2];

160 
__daylight
;

161 
__timez⁄e
;

164 #ifdef 
__USE_POSIX


166 *
tz«me
[2];

170 
	$tz£t
 (Ë
__THROW
;

173 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


174 
daylight
;

175 
timez⁄e
;

178 #ifde‡
__USE_MISC


181 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

187 
	#__i¶óp
(
yór
) \

188 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

191 #ifde‡
__USE_MISC


196 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

199 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

202 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

206 #ifde‡
__USE_POSIX199309


211 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

212 
time•ec
 *
__ªmaöög
);

216 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

219 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

222 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

223 
__THROW
;

225 #ifde‡
__USE_XOPEN2K


230 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

231 c⁄° 
time•ec
 *
__ªq
,

232 
time•ec
 *
__ªm
);

235 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

240 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

241 
sigevít
 *
__ª°ri˘
 
__evp
,

242 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

245 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

248 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

249 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

250 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

253 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

254 
__THROW
;

257 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

261 #ifde‡
__USE_ISOC11


263 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #ifde‡
__USE_XOPEN_EXTENDED


280 
gëd©e_îr
;

289 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

292 #ifde‡
__USE_GNU


303 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

304 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

307 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #ifde‡
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	~<bôs/gë›t_posix.h
>

876 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


880 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 #i‡
deföed
 
__USE_MISC


887 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

898 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

900 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$vh™gup
 (Ë
__THROW
;

910 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

919 
size_t
 
__off£t
, 
__sˇÀ
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

930 *
	$gëu£rshñl
 (Ë
__THROW
;

931 
	$ídu£rshñl
 (Ë
__THROW
;

932 
	$£tu£rshñl
 (Ë
__THROW
;

938 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

942 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

945 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

949 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

957 
	`fsync
 (
__fd
);

960 #ifde‡
__USE_GNU


963 
	$syncfs
 (
__fd
Ë
__THROW
;

967 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


970 
	`gëho°id
 ();

973 
	$sync
 (Ë
__THROW
;

976 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


979 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

984 
	$gëdèbÀsize
 (Ë
__THROW
;

990 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


993 #i‚de‡
__USE_FILE_OFFSET64


994 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

997 #ifde‡
__REDIRECT_NTH


998 
	`__REDIRECT_NTH
 (
åunˇã
,

999 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1000 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1002 
	#åunˇã
 
åunˇã64


	)

1005 #ifde‡
__USE_LARGEFILE64


1006 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1012 #i‡
deföed
 
__USE_POSIX199309
 \

1013 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1016 #i‚de‡
__USE_FILE_OFFSET64


1017 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1019 #ifde‡
__REDIRECT_NTH


1020 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1021 
·runˇã64
Ë
__wur
;

1023 
	#·runˇã
 
·runˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1033 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1034 || 
deföed
 
__USE_MISC


1038 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1044 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1048 #ifde‡
__USE_MISC


1059 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1064 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1076 
	#F_ULOCK
 0

	)

1077 
	#F_LOCK
 1

	)

1078 
	#F_TLOCK
 2

	)

1079 
	#F_TEST
 3

	)

1081 #i‚de‡
__USE_FILE_OFFSET64


1082 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1084 #ifde‡
__REDIRECT


1085 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1086 
lockf64
Ë
__wur
;

1088 
	#lockf
 
lockf64


	)

1091 #ifde‡
__USE_LARGEFILE64


1092 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1097 #ifde‡
__USE_GNU


1102 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1103 (
__exãnsi⁄__
 \

1104 ({ 
__ªsu…
; \

1105 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1106 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1107 
__ªsu…
; 
	}
}))

	)

1110 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1111 
__outfd
, 
__off64_t
 *
__poutoff
,

1112 
size_t
 
__Àngth
, 
__Êags
);

1115 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1118 
fd©async
 (
__fûdes
);

1124 #ifdef 
__USE_XOPEN


1126 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1131 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1132 
__THROW
 
	`__n⁄nuŒ
 ((1));

1139 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1140 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1149 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1152 *
	`cu£rid
 (*
__s
);

1158 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1159 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1160 (*
__∑ª¡
) (),

1161 (*
__chûd
Ë()Ë
__THROW
;

1164 #ifde‡
__USE_MISC


1167 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur
;

1171 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1172 
	~<bôs/uni°d.h
>

1175 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.11"

	)

41 
	#ZLIB_VERNUM
 0x12b0

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 11

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

81 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

82 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

84 
öã∫Æ_°©e
;

86 
	sz_°ªam_s
 {

87 
z_c⁄°
 
Byãf
 *
√xt_ö
;

88 
uI¡
 
avaû_ö
;

89 
uL⁄g
 
tŸÆ_ö
;

91 
Byãf
 *
√xt_out
;

92 
uI¡
 
avaû_out
;

93 
uL⁄g
 
tŸÆ_out
;

95 
z_c⁄°
 *
msg
;

96 
öã∫Æ_°©e
 
FAR
 *
°©e
;

98 
Æloc_func
 
zÆloc
;

99 
‰ì_func
 
z‰ì
;

100 
voidpf
 
›aque
;

102 
d©a_ty≥
;

104 
uL⁄g
 
adÀr
;

105 
uL⁄g
 
ª£rved
;

106 } 
	tz_°ªam
;

108 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

114 
	sgz_hódî_s
 {

115 
ãxt
;

116 
uL⁄g
 
time
;

117 
xÊags
;

118 
os
;

119 
Byãf
 *
exåa
;

120 
uI¡
 
exåa_Àn
;

121 
uI¡
 
exåa_max
;

122 
Byãf
 *
«me
;

123 
uI¡
 
«me_max
;

124 
Byãf
 *
commít
;

125 
uI¡
 
comm_max
;

126 
h¸c
;

127 
d⁄e
;

129 } 
	tgz_hódî
;

131 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

168 
	#Z_NO_FLUSH
 0

	)

169 
	#Z_PARTIAL_FLUSH
 1

	)

170 
	#Z_SYNC_FLUSH
 2

	)

171 
	#Z_FULL_FLUSH
 3

	)

172 
	#Z_FINISH
 4

	)

173 
	#Z_BLOCK
 5

	)

174 
	#Z_TREES
 6

	)

177 
	#Z_OK
 0

	)

178 
	#Z_STREAM_END
 1

	)

179 
	#Z_NEED_DICT
 2

	)

180 
	#Z_ERRNO
 (-1)

	)

181 
	#Z_STREAM_ERROR
 (-2)

	)

182 
	#Z_DATA_ERROR
 (-3)

	)

183 
	#Z_MEM_ERROR
 (-4)

	)

184 
	#Z_BUF_ERROR
 (-5)

	)

185 
	#Z_VERSION_ERROR
 (-6)

	)

190 
	#Z_NO_COMPRESSION
 0

	)

191 
	#Z_BEST_SPEED
 1

	)

192 
	#Z_BEST_COMPRESSION
 9

	)

193 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

196 
	#Z_FILTERED
 1

	)

197 
	#Z_HUFFMAN_ONLY
 2

	)

198 
	#Z_RLE
 3

	)

199 
	#Z_FIXED
 4

	)

200 
	#Z_DEFAULT_STRATEGY
 0

	)

203 
	#Z_BINARY
 0

	)

204 
	#Z_TEXT
 1

	)

205 
	#Z_ASCII
 
Z_TEXT


	)

206 
	#Z_UNKNOWN
 2

	)

209 
	#Z_DEFLATED
 8

	)

212 
	#Z_NULL
 0

	)

214 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

220 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

250 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

363 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

400 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

520 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

611 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

612 c⁄° 
Byãf
 *
di˘i⁄¨y
,

613 
uI¡
 
di˘Lígth
));

655 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

656 
Byãf
 *
di˘i⁄¨y
,

657 
uI¡
 *
di˘Lígth
));

677 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

678 
z_°ªamp
 
sour˚
));

695 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

707 
Àvñ
,

708 
°øãgy
));

744 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

745 
good_Àngth
,

746 
max_œzy
,

747 
ni˚_Àngth
,

748 
max_chaö
));

761 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

762 
uL⁄g
 
sour˚Lí
));

776 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

777 *
≥ndög
,

778 *
bôs
));

791 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

792 
bôs
,

793 
vÆue
));

808 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

809 
gz_hódîp
 
hód
));

885 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

886 c⁄° 
Byãf
 *
di˘i⁄¨y
,

887 
uI¡
 
di˘Lígth
));

908 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

909 
Byãf
 *
di˘i⁄¨y
,

910 
uI¡
 *
di˘Lígth
));

923 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

942 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

943 
z_°ªamp
 
sour˚
));

958 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

968 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

969 
wödowBôs
));

982 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

983 
bôs
,

984 
vÆue
));

1003 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1031 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1032 
gz_hódîp
 
hód
));

1093 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1094 
	tz_c⁄°
 
	tFAR
 * FAR *));

1095 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1097 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1098 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1099 
out_func
 
out
, 
FAR
 *
out_desc
));

1167 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1175 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1216 #i‚de‡
Z_SOLO


1228 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1229 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1243 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1244 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1245 
Àvñ
));

1259 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1266 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1267 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1284 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1285 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1301 
gzFûe_s
 *
	tgzFûe
;

1341 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1364 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1380 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1391 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1421 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1422 
gzFûe
 
fûe
));

1447 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1448 
voidpc
 
buf
, 
Àn
));

1455 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1456 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1469 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1484 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1492 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1505 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1511 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1520 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1532 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1567 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1595 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1610 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1631 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1644 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1645 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1656 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1672 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1689 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1708 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1709 
z_size_t
 
Àn
));

1726 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1743 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1744 
z_size_t
 
Àn
));

1765 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1766 c⁄° *
vîsi⁄
, 
°ªam_size
));

1767 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1768 c⁄° *
vîsi⁄
, 
°ªam_size
));

1769 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1770 
wödowBôs
, 
memLevñ
,

1771 
°øãgy
, c⁄° *
vîsi⁄
,

1772 
°ªam_size
));

1773 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1774 c⁄° *
vîsi⁄
, 
°ªam_size
));

1775 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1776 
FAR
 *
wödow
,

1777 c⁄° *
vîsi⁄
,

1778 
°ªam_size
));

1779 #ifde‡
Z_PREFIX_SET


1780 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1781 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1782 
	#z_öÊ©eInô
(
°rm
) \

1783 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1784 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1785 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1786 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1787 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1788 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1789 ()(
z_°ªam
))

	)

1790 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1791 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1792 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1794 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1795 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1796 
	#öÊ©eInô
(
°rm
) \

1797 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1798 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1799 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1800 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1801 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1802 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1803 ()(
z_°ªam
))

	)

1804 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1805 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1806 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1809 #i‚de‡
Z_SOLO


1818 
	sgzFûe_s
 {

1819 
have
;

1820 *
√xt
;

1821 
z_off64_t
 
pos
;

1823 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1824 #ifde‡
Z_PREFIX_SET


1825 #unde‡
z_gzgëc


1826 
	#z_gzgëc
(
g
) \

1827 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1829 
	#gzgëc
(
g
) \

1830 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1839 #ifde‡
Z_LARGE64


1840 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1841 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1842 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1843 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1844 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1845 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1848 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1849 #ifde‡
Z_PREFIX_SET


1850 
	#z_gz›í
 
z_gz›í64


	)

1851 
	#z_gz£ek
 
z_gz£ek64


	)

1852 
	#z_gzãŒ
 
z_gzãŒ64


	)

1853 
	#z_gzoff£t
 
z_gzoff£t64


	)

1854 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1855 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1857 
	#gz›í
 
gz›í64


	)

1858 
	#gz£ek
 
gz£ek64


	)

1859 
	#gzãŒ
 
gzãŒ64


	)

1860 
	#gzoff£t
 
gzoff£t64


	)

1861 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1862 
	#¸c32_comböe
 
¸c32_comböe64


	)

1864 #i‚de‡
Z_LARGE64


1865 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1866 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1867 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1868 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1869 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1870 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1873 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1874 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1875 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1876 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1877 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1878 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1883 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1884 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1889 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1890 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1891 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1892 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1893 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1894 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
 ((
z_°ªamp
));

1895 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1896 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1897 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1898 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1899 c⁄° *
mode
));

1901 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1902 #i‚de‡
Z_SOLO


1903 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1904 c⁄° *
f‹m©
,

1905 
va_li°
 
va
));

1909 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

61 
	~<bôs/uöä-idítôy.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

80 
	#htobe16
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

81 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

82 
	#be16toh
(
x
Ë
	`__uöt16_idítôy
 (x)

	)

83 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

85 
	#htobe32
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

86 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

87 
	#be32toh
(
x
Ë
	`__uöt32_idítôy
 (x)

	)

88 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

90 
	#htobe64
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

91 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

92 
	#be64toh
(
x
Ë
	`__uöt64_idítôy
 (x)

	)

93 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

119 #unde‡
__USE_ISOC11


120 #unde‡
__USE_ISOC99


121 #unde‡
__USE_ISOC95


122 #unde‡
__USE_ISOCXX11


123 #unde‡
__USE_POSIX


124 #unde‡
__USE_POSIX2


125 #unde‡
__USE_POSIX199309


126 #unde‡
__USE_POSIX199506


127 #unde‡
__USE_XOPEN


128 #unde‡
__USE_XOPEN_EXTENDED


129 #unde‡
__USE_UNIX98


130 #unde‡
__USE_XOPEN2K


131 #unde‡
__USE_XOPEN2KXSI


132 #unde‡
__USE_XOPEN2K8


133 #unde‡
__USE_XOPEN2K8XSI


134 #unde‡
__USE_LARGEFILE


135 #unde‡
__USE_LARGEFILE64


136 #unde‡
__USE_FILE_OFFSET64


137 #unde‡
__USE_MISC


138 #unde‡
__USE_ATFILE


139 #unde‡
__USE_GNU


140 #unde‡
__USE_FORTIFY_LEVEL


141 #unde‡
__KERNEL_STRICT_NAMES


142 #unde‡
__GLIBC_USE_DEPRECATED_GETS


146 #i‚de‡
_LOOSE_KERNEL_NAMES


147 
	#__KERNEL_STRICT_NAMES


	)

157 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


158 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

159 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

161 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

168 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


169 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

170 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

172 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

176 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

182 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

183 && !
deföed
 
	g_DEFAULT_SOURCE


185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

190 #ifde‡
_GNU_SOURCE


191 #unde‡
_ISOC95_SOURCE


192 
	#_ISOC95_SOURCE
 1

	)

193 #unde‡
_ISOC99_SOURCE


194 
	#_ISOC99_SOURCE
 1

	)

195 #unde‡
_ISOC11_SOURCE


196 
	#_ISOC11_SOURCE
 1

	)

197 #unde‡
_POSIX_SOURCE


198 
	#_POSIX_SOURCE
 1

	)

199 #unde‡
_POSIX_C_SOURCE


200 
	#_POSIX_C_SOURCE
 200809L

	)

201 #unde‡
_XOPEN_SOURCE


202 
	#_XOPEN_SOURCE
 700

	)

203 #unde‡
_XOPEN_SOURCE_EXTENDED


204 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

205 #unde‡
_LARGEFILE64_SOURCE


206 
	#_LARGEFILE64_SOURCE
 1

	)

207 #unde‡
_DEFAULT_SOURCE


208 
	#_DEFAULT_SOURCE
 1

	)

209 #unde‡
_ATFILE_SOURCE


210 
	#_ATFILE_SOURCE
 1

	)

215 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

216 || (!
deföed
 
	g__STRICT_ANSI__
 \

217 && !
deföed
 
	g_ISOC99_SOURCE
 \

218 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

219 && !
deföed
 
	g_XOPEN_SOURCE
))

220 #unde‡
_DEFAULT_SOURCE


221 
	#_DEFAULT_SOURCE
 1

	)

225 #i‡(
deföed
 
_ISOC11_SOURCE
 \

226 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

227 
	#__USE_ISOC11
 1

	)

231 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

232 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

233 
	#__USE_ISOC99
 1

	)

237 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

238 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

239 
	#__USE_ISOC95
 1

	)

242 #ifde‡
__˝lu•lus


244 #i‡
__˝lu•lus
 >= 201703L

245 
	#__USE_ISOC11
 1

	)

249 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


250 
	#__USE_ISOCXX11
 1

	)

251 
	#__USE_ISOC99
 1

	)

258 #ifde‡
_DEFAULT_SOURCE


259 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


260 
	#__USE_POSIX_IMPLICITLY
 1

	)

262 #unde‡
_POSIX_SOURCE


263 
	#_POSIX_SOURCE
 1

	)

264 #unde‡
_POSIX_C_SOURCE


265 
	#_POSIX_C_SOURCE
 200809L

	)

268 #i‡((!
deföed
 
__STRICT_ANSI__
 \

269 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

270 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

271 
	#_POSIX_SOURCE
 1

	)

272 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

273 
	#_POSIX_C_SOURCE
 2

	)

274 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

275 
	#_POSIX_C_SOURCE
 199506L

	)

276 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

277 
	#_POSIX_C_SOURCE
 200112L

	)

279 
	#_POSIX_C_SOURCE
 200809L

	)

281 
	#__USE_POSIX_IMPLICITLY
 1

	)

290 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

291 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

292 
	#_POSIX_SOURCE
 1

	)

293 #unde‡
_POSIX_C_SOURCE


294 
	#_POSIX_C_SOURCE
 199506L

	)

297 #i‡(
deföed
 
_POSIX_SOURCE
 \

298 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

299 || 
deföed
 
_XOPEN_SOURCE
)

300 
	#__USE_POSIX
 1

	)

303 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


304 
	#__USE_POSIX2
 1

	)

307 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

308 
	#__USE_POSIX199309
 1

	)

311 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

312 
	#__USE_POSIX199506
 1

	)

315 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

316 
	#__USE_XOPEN2K
 1

	)

317 #unde‡
__USE_ISOC95


318 
	#__USE_ISOC95
 1

	)

319 #unde‡
__USE_ISOC99


320 
	#__USE_ISOC99
 1

	)

323 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

324 
	#__USE_XOPEN2K8
 1

	)

325 #unde‡
_ATFILE_SOURCE


326 
	#_ATFILE_SOURCE
 1

	)

329 #ifdef 
_XOPEN_SOURCE


330 
	#__USE_XOPEN
 1

	)

331 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

332 
	#__USE_XOPEN_EXTENDED
 1

	)

333 
	#__USE_UNIX98
 1

	)

334 #unde‡
_LARGEFILE_SOURCE


335 
	#_LARGEFILE_SOURCE
 1

	)

336 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

337 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

338 
	#__USE_XOPEN2K8
 1

	)

339 
	#__USE_XOPEN2K8XSI
 1

	)

341 
	#__USE_XOPEN2K
 1

	)

342 
	#__USE_XOPEN2KXSI
 1

	)

343 #unde‡
__USE_ISOC95


344 
	#__USE_ISOC95
 1

	)

345 #unde‡
__USE_ISOC99


346 
	#__USE_ISOC99
 1

	)

349 #ifde‡
_XOPEN_SOURCE_EXTENDED


350 
	#__USE_XOPEN_EXTENDED
 1

	)

355 #ifde‡
_LARGEFILE_SOURCE


356 
	#__USE_LARGEFILE
 1

	)

359 #ifde‡
_LARGEFILE64_SOURCE


360 
	#__USE_LARGEFILE64
 1

	)

363 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

364 
	#__USE_FILE_OFFSET64
 1

	)

367 #i‡
deföed
 
_DEFAULT_SOURCE


368 
	#__USE_MISC
 1

	)

371 #ifdef 
_ATFILE_SOURCE


372 
	#__USE_ATFILE
 1

	)

375 #ifdef 
_GNU_SOURCE


376 
	#__USE_GNU
 1

	)

379 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

380 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

381 #i‡
_FORTIFY_SOURCE
 > 1

382 
	#__USE_FORTIFY_LEVEL
 2

	)

384 
	#__USE_FORTIFY_LEVEL
 1

	)

387 
	#__USE_FORTIFY_LEVEL
 0

	)

394 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


395 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

397 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

402 
	~<°dc-¥edef.h
>

410 #unde‡
__GNU_LIBRARY__


411 
	#__GNU_LIBRARY__
 6

	)

415 
	#__GLIBC__
 2

	)

416 
	#__GLIBC_MINOR__
 27

	)

418 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

419 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

422 #i‚de‡
__ASSEMBLER__


423 #i‚de‡
_SYS_CDEFS_H


424 
	~<sys/cdefs.h
>

429 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


430 
	#__USE_LARGEFILE
 1

	)

431 
	#__USE_LARGEFILE64
 1

	)

437 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

438 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

439 && 
deföed
 
	g__exã∫_ölöe


440 
	#__USE_EXTERN_INLINES
 1

	)

448 
	~<gnu/°ubs.h
>

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__USE_GNU


82 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

83 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

86 
˝u£ç
)

	)

87 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

88 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

90 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

91 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

92 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

93 
˝u£ç
)

	)

94 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

95 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

97 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

98 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

100 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

102 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

104 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

106 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

108 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

110 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

111 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

112 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

113 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

115 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

116 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

117 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

121 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

126 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

129 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 
	#adÀr32_z
 
z_adÀr32_z


	)

33 #i‚de‡
Z_SOLO


34 
	#com¥ess
 
z_com¥ess


	)

35 
	#com¥ess2
 
z_com¥ess2


	)

36 
	#com¥essBound
 
z_com¥essBound


	)

38 
	#¸c32
 
z_¸c32


	)

39 
	#¸c32_comböe
 
z_¸c32_comböe


	)

40 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

41 
	#¸c32_z
 
z_¸c32_z


	)

42 
	#deÊ©e
 
z_deÊ©e


	)

43 
	#deÊ©eBound
 
z_deÊ©eBound


	)

44 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

45 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

46 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

47 
	#deÊ©eInô
 
z_deÊ©eInô


	)

48 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

49 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

50 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

51 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

52 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

53 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

54 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

55 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

56 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

57 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

58 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

59 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

60 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

61 #i‚de‡
Z_SOLO


62 
	#gz_îr‹
 
z_gz_îr‹


	)

63 
	#gz_ötmax
 
z_gz_ötmax


	)

64 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

65 
	#gzbuf„r
 
z_gzbuf„r


	)

66 
	#gz˛óªº
 
z_gz˛óªº


	)

67 
	#gz˛o£
 
z_gz˛o£


	)

68 
	#gz˛o£_r
 
z_gz˛o£_r


	)

69 
	#gz˛o£_w
 
z_gz˛o£_w


	)

70 
	#gzdúe˘
 
z_gzdúe˘


	)

71 
	#gzd›í
 
z_gzd›í


	)

72 
	#gzeof
 
z_gzeof


	)

73 
	#gzîr‹
 
z_gzîr‹


	)

74 
	#gzÊush
 
z_gzÊush


	)

75 
	#gz‰ód
 
z_gz‰ód


	)

76 
	#gzfwrôe
 
z_gzfwrôe


	)

77 
	#gzgëc
 
z_gzgëc


	)

78 
	#gzgëc_
 
z_gzgëc_


	)

79 
	#gzgës
 
z_gzgës


	)

80 
	#gzoff£t
 
z_gzoff£t


	)

81 
	#gzoff£t64
 
z_gzoff£t64


	)

82 
	#gz›í
 
z_gz›í


	)

83 
	#gz›í64
 
z_gz›í64


	)

84 #ifde‡
_WIN32


85 
	#gz›í_w
 
z_gz›í_w


	)

87 
	#gz¥ötf
 
z_gz¥ötf


	)

88 
	#gzputc
 
z_gzputc


	)

89 
	#gzputs
 
z_gzputs


	)

90 
	#gzªad
 
z_gzªad


	)

91 
	#gzªwöd
 
z_gzªwöd


	)

92 
	#gz£ek
 
z_gz£ek


	)

93 
	#gz£ek64
 
z_gz£ek64


	)

94 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

95 
	#gzãŒ
 
z_gzãŒ


	)

96 
	#gzãŒ64
 
z_gzãŒ64


	)

97 
	#gzungëc
 
z_gzungëc


	)

98 
	#gzv¥ötf
 
z_gzv¥ötf


	)

99 
	#gzwrôe
 
z_gzwrôe


	)

101 
	#öÊ©e
 
z_öÊ©e


	)

102 
	#öÊ©eBack
 
z_öÊ©eBack


	)

103 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

104 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

105 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

106 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

107 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

108 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

109 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

110 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

111 
	#öÊ©eInô
 
z_öÊ©eInô


	)

112 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

113 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

114 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

115 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

116 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

117 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

118 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

119 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

120 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

121 
	#öÊ©eSync
 
z_öÊ©eSync


	)

122 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

123 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

124 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

125 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

126 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

127 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

128 #i‚de‡
Z_SOLO


129 
	#uncom¥ess
 
z_uncom¥ess


	)

130 
	#uncom¥ess2
 
z_uncom¥ess2


	)

132 
	#zEº‹
 
z_zEº‹


	)

133 #i‚de‡
Z_SOLO


134 
	#zˇŒoc
 
z_zˇŒoc


	)

135 
	#zc‰ì
 
z_zc‰ì


	)

137 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

138 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

141 
	#Byã
 
z_Byã


	)

142 
	#Byãf
 
z_Byãf


	)

143 
	#Æloc_func
 
z_Æloc_func


	)

144 
	#ch¨f
 
z_ch¨f


	)

145 
	#‰ì_func
 
z_‰ì_func


	)

146 #i‚de‡
Z_SOLO


147 
	#gzFûe
 
z_gzFûe


	)

149 
	#gz_hódî
 
z_gz_hódî


	)

150 
	#gz_hódîp
 
z_gz_hódîp


	)

151 
	#ö_func
 
z_ö_func


	)

152 
	#ötf
 
z_ötf


	)

153 
	#out_func
 
z_out_func


	)

154 
	#uI¡
 
z_uI¡


	)

155 
	#uI¡f
 
z_uI¡f


	)

156 
	#uL⁄g
 
z_uL⁄g


	)

157 
	#uL⁄gf
 
z_uL⁄gf


	)

158 
	#voidp
 
z_voidp


	)

159 
	#voidpc
 
z_voidpc


	)

160 
	#voidpf
 
z_voidpf


	)

163 
	#gz_hódî_s
 
z_gz_hódî_s


	)

164 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

168 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

169 
	#MSDOS


	)

171 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

172 
	#OS2


	)

174 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

175 
	#WINDOWS


	)

177 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

178 #i‚de‡
WIN32


179 
	#WIN32


	)

182 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

183 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

184 #i‚de‡
SYS16BIT


185 
	#SYS16BIT


	)

194 #ifde‡
SYS16BIT


195 
	#MAXSEG_64K


	)

197 #ifde‡
MSDOS


198 
	#UNALIGNED_OK


	)

201 #ifde‡
__STDC_VERSION__


202 #i‚de‡
STDC


203 
	#STDC


	)

205 #i‡
__STDC_VERSION__
 >= 199901L

206 #i‚de‡
STDC99


207 
	#STDC99


	)

211 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

212 
	#STDC


	)

214 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

215 
	#STDC


	)

217 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

218 
	#STDC


	)

220 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

221 
	#STDC


	)

224 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

225 
	#STDC


	)

228 #i‚de‡
STDC


230 c⁄°

	)

234 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

235 
	#z_c⁄°
 c⁄°

	)

237 
	#z_c⁄°


	)

240 #ifde‡
Z_SOLO


241 
	tz_size_t
;

243 
	#z_l⁄gl⁄g
 

	)

244 #i‡
deföed
(
NO_SIZE_T
)

245 
	tNO_SIZE_T
 
	tz_size_t
;

246 #ñi‡
deföed
(
STDC
)

247 
	~<°ddef.h
>

248 
size_t
 
	tz_size_t
;

250 
	tz_size_t
;

252 #unde‡
z_l⁄gl⁄g


256 #i‚de‡
MAX_MEM_LEVEL


257 #ifde‡
MAXSEG_64K


258 
	#MAX_MEM_LEVEL
 8

	)

260 
	#MAX_MEM_LEVEL
 9

	)

269 #i‚de‡
MAX_WBITS


270 
	#MAX_WBITS
 15

	)

288 #i‚de‡
OF


289 #ifde‡
STDC


290 
	#OF
(
¨gs
Ë
	)
args

292 
	#OF
(
¨gs
Ë()

	)

296 #i‚de‡
Z_ARG


297 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

298 
	#Z_ARG
(
¨gs
Ë
	)
args

300 
	#Z_ARG
(
¨gs
Ë()

	)

310 #ifde‡
SYS16BIT


311 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

313 
	#SMALL_MEDIUM


	)

314 #ifde‡
_MSC_VER


315 
	#FAR
 
_Ár


	)

317 
	#FAR
 
Ár


	)

320 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

322 
	#SMALL_MEDIUM


	)

323 #ifde‡
__BORLANDC__


324 
	#FAR
 
_Ár


	)

326 
	#FAR
 
Ár


	)

331 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

335 #ifde‡
ZLIB_DLL


336 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

337 #ifde‡
ZLIB_INTERNAL


338 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

340 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 #ifde‡
ZLIB_WINAPI


349 #ifde‡
FAR


350 #unde‡
FAR


352 
	~<wödows.h
>

355 
	#ZEXPORT
 
WINAPI


	)

356 #ifde‡
WIN32


357 
	#ZEXPORTVA
 
WINAPIV


	)

359 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

364 #i‡
deföed
 (
__BEOS__
)

365 #ifde‡
ZLIB_DLL


366 #ifde‡
ZLIB_INTERNAL


367 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

368 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

370 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

371 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

376 #i‚de‡
ZEXTERN


377 
	#ZEXTERN
 

	)

379 #i‚de‡
ZEXPORT


380 
	#ZEXPORT


	)

382 #i‚de‡
ZEXPORTVA


383 
	#ZEXPORTVA


	)

386 #i‚de‡
FAR


387 
	#FAR


	)

390 #i‡!
deföed
(
__MACTYPES__
)

391 
	tByã
;

393 
	tuI¡
;

394 
	tuL⁄g
;

396 #ifde‡
SMALL_MEDIUM


398 
	#Byãf
 
Byã
 
FAR


	)

400 
Byã
 
	tFAR
 
	tByãf
;

402 
	tFAR
 
	tch¨f
;

403 
	tFAR
 
	tötf
;

404 
uI¡
 
	tFAR
 
	tuI¡f
;

405 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

407 #ifde‡
STDC


408 c⁄° *
	tvoidpc
;

409 
	tFAR
 *
	tvoidpf
;

410 *
	tvoidp
;

412 
Byã
 c⁄° *
	tvoidpc
;

413 
Byã
 
	tFAR
 *
	tvoidpf
;

414 
Byã
 *
	tvoidp
;

417 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

418 
	~<limôs.h
>

419 #i‡(
UINT_MAX
 == 0xffffffffUL)

420 
	#Z_U4
 

	)

421 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

422 
	#Z_U4
 

	)

423 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

424 
	#Z_U4
 

	)

428 #ifde‡
Z_U4


429 
Z_U4
 
	tz_¸c_t
;

431 
	tz_¸c_t
;

435 
	#Z_HAVE_UNISTD_H


	)

439 
	#Z_HAVE_STDARG_H


	)

442 #ifde‡
STDC


443 #i‚de‡
Z_SOLO


444 
	~<sys/ty≥s.h
>

448 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

449 #i‚de‡
Z_SOLO


450 
	~<°d¨g.h
>

454 #ifde‡
_WIN32


455 #i‚de‡
Z_SOLO


456 
	~<°ddef.h
>

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

467 #unde‡
_LARGEFILE64_SOURCE


470 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

471 
	#Z_HAVE_UNISTD_H


	)

473 #i‚de‡
Z_SOLO


474 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

475 
	~<uni°d.h
>

476 #ifde‡
VMS


477 
	~<unixio.h
>

479 #i‚de‡
z_off_t


480 
	#z_off_t
 
off_t


	)

485 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

486 
	#Z_LFS64


	)

489 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

490 
	#Z_LARGE64


	)

493 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

494 
	#Z_WANT64


	)

497 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

498 
	#SEEK_SET
 0

	)

499 
	#SEEK_CUR
 1

	)

500 
	#SEEK_END
 2

	)

503 #i‚de‡
z_off_t


504 
	#z_off_t
 

	)

507 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

508 
	#z_off64_t
 
off64_t


	)

510 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

511 
	#z_off64_t
 
__öt64


	)

513 
	#z_off64_t
 
z_off_t


	)

518 #i‡
deföed
(
__MVS__
)

519 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

520 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

521 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

522 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

523 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

524 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

525 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

526 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

527 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

528 #¥agm®
m≠
(
com¥essBound
,"CMBND")

529 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

530 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

531 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

58 
	#__STDC_ISO_10646__
 201706L

	)

61 
	#__STDC_NO_THREADS__
 1

	)

	@
1
.
1
/usr/include
52
950
api.c
api.h
ceserver.c
ceserver.h
ceservertest.c
ceservertest.h
context.c
context.h
embedded-linux.c
embedded.c
embedded.h
extension/server.c
extension/server.h
extension/speedhack.c
extension/speedhack.h
extensionfunctions.c
extensionfunctions.h
extensionloader.c
extensionloader.h
porthelp.c
porthelp.h
symbols.c
symbols.h
threads.c
threads.h
/usr/include/arpa/inet.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/semaphore.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/sched.h
/usr/include/strings.h
/usr/include/zconf.h
/usr/include/stdc-predef.h
